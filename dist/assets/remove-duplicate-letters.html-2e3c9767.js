import{_ as n,o as s,c as a,d as t}from"./app-2d6feb9f.js";const p={},o=t(`<h1 id="移除重复字母" tabindex="-1"><a class="header-anchor" href="#移除重复字母" aria-hidden="true">#</a> <strong>移除重复字母</strong></h1><p>给定一个仅包含小写字母的字符串<code>S</code>，移除字符串中的重复字母，使得每个字母只出现一次，并保持相对顺序不变。返回移除重复字母后的新字符串。</p><p><strong>示例：</strong></p><p>输入：S = &quot;bcabc&quot; 输出：&quot;abc&quot; 解释：移除重复字母后，得到的字符串中每个字母只出现一次，并保持相对顺序不变，最终结果为&quot;abc&quot;。</p><p>输入：S = &quot;cbacdcbc&quot; 输出：&quot;acdb&quot; 解释：移除重复字母后，得到的字符串中每个字母只出现一次，并保持相对顺序不变，最终结果为&quot;acdb&quot;。</p><h2 id="题目分析与解题步骤" tabindex="-1"><a class="header-anchor" href="#题目分析与解题步骤" aria-hidden="true">#</a> <strong>题目分析与解题步骤：</strong></h2><p>这个问题可以使用栈来解决。我们可以遍历字符串中的每个字符，然后使用一个栈来模拟移除重复字母的过程。对于每个字符，我们将其与栈顶元素比较，如果当前字符小于栈顶元素且栈顶元素在后面还会出现，则将栈顶元素出栈，直到栈为空或栈顶元素小于当前字符。最后，栈中的字符按照出栈的顺序反转，并返回作为最终结果。</p><p>解题步骤如下：</p><ol><li><p>创建一个栈<code>stack</code>，用于模拟移除重复字母的过程。</p></li><li><p>创建一个哈希表<code>count</code>，用于记录每个字符在字符串中出现的次数。</p></li><li><p>遍历字符串<code>S</code>中的每个字符，并执行以下操作：</p><ul><li><p>将当前字符的出现次数加1。</p></li><li><p>如果当前字符已经在栈中出现过，则跳过该字符。</p></li><li><p>如果当前字符比栈顶元素小且栈顶元素在后面还会出现，则将栈顶元素出栈，直到栈为空或栈顶元素小于当前字符。</p></li><li><p>将当前字符入栈。</p></li></ul></li><li><p>遍历完整个字符串后，将栈中的字符按照出栈的顺序反转，并返回最终结果。</p></li></ol><h2 id="javascript解题框架" tabindex="-1"><a class="header-anchor" href="#javascript解题框架" aria-hidden="true">#</a> <strong>JavaScript解题框架：</strong></h2><p>以下是一个使用JavaScript实现栈来移除重复字母的框架代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">S</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">?</span> count<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> char <span class="token operator">&amp;&amp;</span> count<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个框架中，我们首先定义了一个栈类<code>Stack</code>，其中包含了常用的栈操作方法。然后，我们使用栈来移除重复字母。</p><p>在<code>removeDuplicateLetters</code>函数中，我们遍历字符串<code>S</code>，并使用栈来模拟移除重复字母的过程。对于每个字符，我们将其与栈顶元素比较，如果当前字符小于栈顶元素且栈顶元素在后面还会出现，则将栈顶元素出栈，直到栈为空或栈顶元素小于当前字符。</p><p>最后，我们将栈中的字符按照出栈的顺序反转，并返回作为最终结果。</p>`,15),c=[o];function e(l,u){return s(),a("div",null,c)}const k=n(p,[["render",e],["__file","remove-duplicate-letters.html.vue"]]);export{k as default};
