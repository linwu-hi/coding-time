import{_ as n,o as s,c as a,d as p}from"./app-2477bd15.js";const e={},o=p(`<h1 id="打家劫舍" tabindex="-1"><a class="header-anchor" href="#打家劫舍" aria-hidden="true">#</a> 打家劫舍</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定一个非负整数数组 <code>nums</code>，表示每个房屋中的存放的金额。相邻的房屋在同一晚上会被抢劫，但是由于安全系统的限制，不能同时抢劫相邻的两个房屋。</p><p>请你计算在不触发警报的情况下，能够抢劫到的最大金额。</p><p>例如，给定一个包含以下金额的数组 <code>nums</code>：<code>[2, 7, 9, 3, 1]</code>，可以抢劫的最大金额为 <code>12</code>，即抢劫第 <code>1</code> 个房屋和第 <code>3</code> 个房屋。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了计算在不触发警报的情况下能够抢劫到的最大金额，我们可以使用动态规划的思想来解决问题。</p><ol><li><p>定义状态：我们可以将问题转化为每个房屋的最优解。令 <code>dp[i]</code> 表示抢劫到第 <code>i</code> 个房屋时的最大金额。</p></li><li><p>初始状态：根据题目的约束，如果没有房屋可抢劫，即 <code>nums</code> 数组为空，那么最大金额为 <code>0</code>。即 <code>dp[0] = 0</code>。如果只有一个房屋，那么最大金额就是这个房屋里的金额。即 <code>dp[1] = nums[0]</code>。</p></li><li><p>状态转移方程：根据题目的要求，我们不能同时抢劫相邻的两个房屋。因此，对于第 <code>i</code> 个房屋，我们有两种选择：抢劫它或者不抢劫它。如果我们抢劫第 <code>i</code> 个房屋，那么最大金额为 <code>dp[i-2] + nums[i-1]</code>；如果我们不抢劫第 <code>i</code> 个房屋，那么最大金额为 <code>dp[i-1]</code>。因此，状态转移方程为 <code>dp[i] = max(dp[i-2] + nums[i-1], dp[i-1])</code>。</p></li><li><p>最终解：问题的解即为最后一个房屋的最优解，即 <code>dp[n]</code>，其中 <code>n</code> 是房屋的数量。</p></li></ol><p>下面是使用动态规划解决打家劫舍问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),t=[o];function c(i,l){return s(),a("div",null,t)}const d=n(e,[["render",c],["__file","house-robber.html.vue"]]);export{d as default};
