import{_ as n,o as s,c as a,d as t}from"./app-2477bd15.js";const e={},p=t(`<h1 id="dart中使用json" tabindex="-1"><a class="header-anchor" href="#dart中使用json" aria-hidden="true">#</a> Dart中使用JSON</h1><h1 id="第九章-dart中使用json" tabindex="-1"><a class="header-anchor" href="#第九章-dart中使用json" aria-hidden="true">#</a> 第九章：Dart中使用JSON</h1><p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，它基于JavaScript的一个子集。在Dart中，你可以使用<code>dart:convert</code>库来进行JSON的编码和解码。</p><h2 id="_9-1-json编码" tabindex="-1"><a class="header-anchor" href="#_9-1-json编码" aria-hidden="true">#</a> 9.1 JSON编码</h2><p>你可以使用<code>jsonEncode</code>函数将一个<code>Dart对象</code>转换为JSON字符串。例如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:convert&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;John Doe&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;age&#39;</span></span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;city&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;New York&#39;</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token function">jsonEncode</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：{&quot;name&quot;:&quot;John Doe&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;New York&quot;}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要将一个<code>Dart类</code>转换为JSON字符串，那么你需要在对象中添加一个<code>toJson</code>方法，这个方法应该返回一个可以直接转换为JSON字符串的对象。例如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:convert&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  int age<span class="token punctuation">;</span>
  <span class="token class-name">String</span> city<span class="token punctuation">;</span>

  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
        <span class="token string-literal"><span class="token string">&#39;age&#39;</span></span><span class="token punctuation">:</span> age<span class="token punctuation">,</span>
        <span class="token string-literal"><span class="token string">&#39;city&#39;</span></span><span class="token punctuation">:</span> city<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;John Doe&#39;</span></span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;New York&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token function">jsonEncode</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：{&quot;name&quot;:&quot;John Doe&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;New York&quot;}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-2-json解码" tabindex="-1"><a class="header-anchor" href="#_9-2-json解码" aria-hidden="true">#</a> 9.2 JSON解码</h2><p>你可以使用<code>jsonDecode</code>函数将一个JSON字符串转换为Dart对象。例如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:convert&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;{&quot;name&quot;:&quot;John Doe&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;New York&quot;}&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">jsonDecode</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：{name: John Doe, age: 30, city: New York}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要将一个JSON字符串转换为<code>Dart类</code>，那么你需要在对象中添加一个命名构造函数，例如<code>fromJson</code>，这个构造函数应该接收一个<code>Map&lt;String, dynamic&gt;</code>类型的参数。例如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:convert&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  int age<span class="token punctuation">;</span>
  <span class="token class-name">String</span> city<span class="token punctuation">;</span>

  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> name <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        age <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;age&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        city <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;city&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;{&quot;name&quot;:&quot;John Doe&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;New York&quot;}&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：John Doe</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用json-serializable" tabindex="-1"><a class="header-anchor" href="#使用json-serializable" aria-hidden="true">#</a> 使用json_serializable</h2><p>在上一部分中，我们介绍了如何手动将JSON转换为Dart对象。然而，当你处理复杂的JSON数据时，手动转换可能会变得繁琐并且容易出错。因此，你可能会想使用代码生成库来自动完成这部分工作。在Dart中，有一种非常流行的库就是<code>json_serializable</code>。</p><p>要使用<code>json_serializable</code>，你首先需要在<code>pubspec.yaml</code>文件中添加相关的依赖：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>
  <span class="token key atrule">flutter</span><span class="token punctuation">:</span>
    <span class="token key atrule">sdk</span><span class="token punctuation">:</span> flutter
  <span class="token key atrule">json_annotation</span><span class="token punctuation">:</span> ^4.0.0

<span class="token key atrule">dev_dependencies</span><span class="token punctuation">:</span>
  <span class="token key atrule">flutter_test</span><span class="token punctuation">:</span>
    <span class="token key atrule">sdk</span><span class="token punctuation">:</span> flutter
  <span class="token key atrule">build_runner</span><span class="token punctuation">:</span> ^2.0.0
  <span class="token key atrule">json_serializable</span><span class="token punctuation">:</span> ^4.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后运行<code>flutter pub get</code>命令来安装这些包。</p><p>接下来，你需要定义你的模型类，并使用一些注解：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:json_annotation/json_annotation.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">&#39;person.g.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token metadata function">@JsonSerializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  int age<span class="token punctuation">;</span>
  <span class="token class-name">String</span> city<span class="token punctuation">;</span>

  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">factory</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">PersonFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">PersonToJson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>_$PersonFromJson</code>和<code>_$PersonToJson</code>是由<code>json_serializable</code>生成的辅助函数，它们将会在我们运行代码生成命令后自动生成。</p><p>现在，你可以运行以下命令来生成JSON序列化代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flutter pub run build_runner build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成的代码将会放在一个名为<code>person.g.dart</code>的文件中。</p><p>现在，你就可以使用<code>fromJson</code>和<code>toJson</code>方法来进行JSON和模型的转换了：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;{&quot;name&quot;:&quot;John Doe&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;New York&quot;}&#39;</span></span><span class="token punctuation">;</span>
  
  <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：John Doe</span>
  
  <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token function">jsonEncode</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：{&quot;name&quot;:&quot;John Doe&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;New York&quot;}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>json_serializable</code>提供了许多其他的功能，例如处理嵌套的模型、使用自定义的日期格式、处理枚举类型等。要了解更多信息，你可以查看其官方文档。</p><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h2><blockquote><p>实际开发中，我们会将接口拿到的JSON数据转化为Dart 类 (通常被称为模型或数据类)</p></blockquote><p>主要有以下原因：</p><ol><li><p><strong>类型安全</strong>：Dart 是一种强类型语言，这意味着当你定义了一个变量的类型，你就不能再将其他类型的值赋给这个变量。通过将 JSON 数据转换为 Dart 类，你可以获得编译时的类型检查，这可以帮助你找出可能的错误。例如，如果你尝试将一个字符串赋给一个整数类型的字段，编译器会给出错误。</p></li><li><p><strong>代码可读性和可维护性</strong>：将 JSON 数据转换为 Dart 类可以使你的代码更加清晰和易于理解。你可以明确地知道你的数据结构，而不是在一个大的、结构不清的 Map 中查找数据。</p></li><li><p><strong>易于操作</strong>：使用 Dart 类来处理 JSON 数据，你可以使用 Dart 的各种特性，例如方法、计算属性等。此外，许多 Dart 库和框架，例如 Flutter，需要使用 Dart 类来工作。</p></li><li><p><strong>自动补全和文档</strong>：在 Dart 类中，你可以使用文档注释来说明每个字段的用途。而在 IDE 中，当你输入一个对象和一个点 (.) 时，IDE 就会显示出所有可用的字段和方法，这可以提高开发效率。</p></li></ol>`,31),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","Dart中使用JSON.html.vue"]]);export{r as default};
