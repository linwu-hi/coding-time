import{_ as n,o as s,c as a,d as e}from"./app-2d6feb9f.js";const o={},t=e(`<h1 id="跳跃游戏" tabindex="-1"><a class="header-anchor" href="#跳跃游戏" aria-hidden="true">#</a> 跳跃游戏</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定一个非负整数数组 <code>nums</code>，你的任务是判断是否能够从数组的第一个位置跳到最后一个位置。</p><p>每个元素表示你在该位置能够跳跃的最大长度。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了解决跳跃游戏问题，我们可以使用贪心算法来解决。</p><p>贪心算法的思路是从数组的第一个位置开始，每次选择能够跳得最远的位置作为下一步的目标位置，然后继续往前跳。如果能够跳到最后一个位置，则返回 <code>true</code>，否则返回 <code>false</code>。</p><p>以下是使用贪心算法解决跳跃游戏问题的详细步骤：</p><ol><li>初始化一个变量 <code>maxPosition</code> 表示当前能够到达的最远位置，初始值为 0。</li><li>遍历数组 <code>nums</code>，对于每一个位置 <code>i</code>： <ul><li>如果当前位置超过了 <code>maxPosition</code>，即当前位置无法到达，则无法继续跳跃，直接返回 <code>false</code>。</li><li>更新 <code>maxPosition</code>，即 <code>Math.max(maxPosition, i + nums[i])</code>。</li><li>如果 <code>maxPosition</code> 已经能够到达数组的最后一个位置，则可以成功跳跃到末尾，返回 <code>true</code>。</li></ul></li><li>遍历结束后，如果能够跳到数组的最后一个位置，则返回 <code>true</code>，否则返回 <code>false</code>。</li></ol><p>下面是使用贪心算法解决跳跃游戏问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> maxPosition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> maxPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    maxPosition <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxPosition<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxPosition <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><p>注意：根据题目的描述，假设你总是可以到达数组的最后一个位置，因此无需考虑无法到达末尾的情况。</p><p>以上就是使用贪心算法解决跳跃游戏问题的详细步骤和算法框架。该算法具有时间复杂度 O(n)，其中 n 是数组的长度。</p>`,14),p=[t];function c(i,l){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","jump-game.html.vue"]]);export{d as default};
