import{_ as n,o as s,c as a,d as p}from"./app-d7df62a4.js";const t={},e=p(`<h1 id="爆破气球的最少箭数" tabindex="-1"><a class="header-anchor" href="#爆破气球的最少箭数" aria-hidden="true">#</a> 爆破气球的最少箭数</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定一组气球的坐标 <code>points</code>，每个气球由一个二维数组表示，其中 <code>points[i] = [x, y]</code> 表示气球的水平坐标和垂直坐标。现在有一支箭，可以垂直射出。如果箭能够击中某个气球，那么该气球以及与其相邻的气球都会被引爆。求解击爆所有气球所需的最小箭数。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了解决最小箭数的问题，我们可以使用贪心算法来解决。贪心算法的思路是优先选择能够引爆尽可能多的气球的箭。</p><p>我们按照以下步骤进行解题：</p><ol><li>将气球按照水平坐标的结束位置进行排序，即按照 <code>points[i][1]</code> 进行升序排序。这样做的目的是将相邻的气球放在一起，方便进行处理。</li><li>初始化变量 <code>end</code> 为第一个气球的结束位置，初始化变量 <code>arrows</code> 为 1，表示需要至少一支箭。</li><li>遍历排序后的气球列表，对于每个气球： <ul><li>如果当前气球的开始位置大于 <code>end</code>，则说明当前气球与之前的气球没有重叠，需要增加一支箭，更新 <code>end</code> 为当前气球的结束位置。</li><li>否则，当前气球与之前的气球重叠，无需增加箭数，更新 <code>end</code> 为当前气球的结束位置。</li></ul></li><li>遍历结束后，<code>arrows</code> 就是所需的最小箭数。</li></ol><p>以下是使用贪心算法解决最小箭数问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">findMinArrowShots</span><span class="token punctuation">(</span><span class="token parameter">points</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>points<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  points<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> end <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arrows <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arrows<span class="token operator">++</span><span class="token punctuation">;</span>
      end <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> arrows<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","minimum-number-of-arrows-to-burst-balloons.html.vue"]]);export{r as default};
