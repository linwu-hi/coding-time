import{_ as n,o as s,c as a,e}from"./app-0301958d.js";const p={},c=e(`<h1 id="斐波那契数" tabindex="-1"><a class="header-anchor" href="#斐波那契数" aria-hidden="true">#</a> 斐波那契数</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定一个非负整数 <code>n</code>，计算 Fibonacci 数列中第 <code>n</code> 个数字的值。</p><p>Fibonacci 数列是一个递归定义的数列，其中每个数字是前两个数字之和。数列的前两个数字是 0 和 1，即 <code>fib(0) = 0</code>，<code>fib(1) = 1</code>。对于 <code>n &gt; 1</code> 的情况，<code>fib(n) = fib(n-1) + fib(n-2)</code>。</p><p>例如，Fibonacci 数列的前几个数字是：0, 1, 1, 2, 3, 5, 8, 13, 21, ...</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了计算 Fibonacci 数列中第 <code>n</code> 个数字的值，我们可以使用动态规划的思想来优化计算过程。</p><ol><li><p>定义状态：我们可以将 Fibonacci 数列的第 <code>n</code> 个数字作为状态。令 <code>dp[i]</code> 表示第 <code>i</code> 个数字的值。</p></li><li><p>初始状态：根据 Fibonacci 数列的定义，我们知道 <code>dp[0] = 0</code>，<code>dp[1] = 1</code>。</p></li><li><p>状态转移方程：根据 Fibonacci 数列的递推关系 <code>dp[i] = dp[i-1] + dp[i-2]</code>，我们可以使用状态转移方程来计算 Fibonacci 数列的其他数字。从 <code>i = 2</code> 开始，依次计算 <code>dp[2]</code> 到 <code>dp[n]</code> 的值。</p></li><li><p>边界条件：无需特别处理边界条件，因为初始状态已经包含了边界情况。</p></li></ol><p>下面是使用动态规划解决 Fibonacci 数问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),o=[c];function t(i,l){return s(),a("div",null,o)}const u=n(p,[["render",t],["__file","fibonacci-number.html.vue"]]);export{u as default};
