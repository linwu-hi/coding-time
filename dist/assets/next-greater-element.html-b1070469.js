import{_ as n,o as s,c as a,d as t}from"./app-2d6feb9f.js";const e={},p=t(`<h1 id="下一个更大元素" tabindex="-1"><a class="header-anchor" href="#下一个更大元素" aria-hidden="true">#</a> <strong>下一个更大元素</strong></h1><p>给定一个数组<code>nums1</code>和一个数组<code>nums2</code>，其中<code>nums1</code>是<code>nums2</code>的子集。对于<code>nums1</code>中的每个元素，求出在<code>nums2</code>中对应元素的下一个更大的元素。如果不存在下一个更大的元素，则将其设为-1。</p><p><strong>示例：</strong></p><p>输入：nums1 = [4,1,2], nums2 = [1,3,4,2] 输出：[-1,3,-1] 解释：nums1中的元素4在nums2中的下一个更大的元素是-1，元素1的下一个更大的元素是3，元素2的下一个更大的元素是-1。</p><h2 id="题目分析与解题步骤" tabindex="-1"><a class="header-anchor" href="#题目分析与解题步骤" aria-hidden="true">#</a> <strong>题目分析与解题步骤：</strong></h2><p>这个问题可以使用栈来解决。我们可以遍历<code>nums2</code>，并使用一个栈来保存尚未找到下一个更大元素的元素。对于每个元素，我们将其入栈，并与栈顶元素比较。如果当前元素大于栈顶元素，则说明当前元素是栈顶元素的下一个更大元素，将栈顶元素出栈，并记录下一个更大元素的关系。最后，对于栈中剩余的元素，将其下一个更大元素设为-1。</p><p>解题步骤如下：</p><ol><li><p>创建一个栈<code>stack</code>，用于保存尚未找到下一个更大元素的元素。</p></li><li><p>创建一个哈希表<code>nextGreater</code>，用于保存元素的下一个更大元素关系。</p></li><li><p>遍历数组<code>nums2</code>，并执行以下操作：</p><ul><li><p>如果栈不为空且当前元素大于栈顶元素，则栈顶元素的下一个更大元素就是当前元素，将栈顶元素出栈，并在<code>nextGreater</code>中记录该关系。</p></li><li><p>将当前元素入栈。</p></li></ul></li><li><p>遍历栈中剩余的元素，将它们的下一个更大元素设为-1，并在<code>nextGreater</code>中记录该关系。</p></li><li><p>遍历数组<code>nums1</code>，根据<code>nextGreater</code>中的记录，找到每个元素的下一个更大元素，并保存在结果数组中。</p></li><li><p>返回结果数组作为最终的解答。</p></li></ol><h2 id="javascript解题框架" tabindex="-1"><a class="header-anchor" href="#javascript解题框架" aria-hidden="true">#</a> <strong>JavaScript解题框架：</strong></h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">function</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> nextGreater <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&gt;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nextGreater<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nextGreater<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> nums1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nextGreater<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个框架中，我们首先定义了一个栈类<code>Stack</code>，其中包含了常用的栈操作方法。然后，我们使用栈来解决下一个更大元素的问题。</p><p>在<code>nextGreaterElement</code>函数中，我们遍历<code>nums2</code>，并使用栈来保存尚未找到下一个更大元素的元素。对于每个元素，我们将其与栈顶元素比较，如果当前元素大于栈顶元素，则说明当前元素是栈顶元素的下一个更大元素，将栈顶元素出栈，并在<code>nextGreater</code>中记录该关系。</p><p>最后，根据<code>nextGreater</code>中的记录，遍历<code>nums1</code>，找到每个元素的下一个更大元素，并保存在结果数组<code>result</code>中。</p>`,13),o=[p];function c(u,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","next-greater-element.html.vue"]]);export{r as default};
