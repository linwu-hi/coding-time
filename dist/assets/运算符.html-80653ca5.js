import{_ as n,o as a,c as s,d as t}from"./app-d7df62a4.js";const e={},p=t(`<h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h1><p>运算符是一种特殊的符号，用于检查，更改或结合值。Dart语言中的运算符主要包括以下几类：</p><h2 id="_1-算术运算符" tabindex="-1"><a class="header-anchor" href="#_1-算术运算符" aria-hidden="true">#</a> <strong>1. 算术运算符</strong></h2><p>算术运算符用于进行数学运算。Dart中的算术运算符有 <code>+</code>（加），<code>-</code>（减），<code>*</code>（乘），<code>/</code>（除），<code>%</code>（取余）以及<code>~/</code>（取整）。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：12</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：8</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：20</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：5.0</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：0</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">~/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-关系运算符" tabindex="-1"><a class="header-anchor" href="#_2-关系运算符" aria-hidden="true">#</a> <strong>2. 关系运算符</strong></h2><p>关系运算符用于比较两个值。Dart中的关系运算符有 <code>==</code>（等于），<code>!=</code>（不等于），<code>&gt;</code>（大于），<code>&lt;</code>（小于），<code>&gt;=</code>（大于或等于），<code>&lt;=</code>（小于或等于）。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_3-逻辑运算符" aria-hidden="true">#</a> <strong>3. 逻辑运算符</strong></h2><p>逻辑运算符主要用于Boolean类型的操作，但也可以用于非Boolean类型。Dart中的逻辑运算符有 <code>&amp;&amp;</code>（逻辑与），<code>||</code>（逻辑或），<code>!</code>（逻辑非）。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_4-赋值运算符" aria-hidden="true">#</a> <strong>4. 赋值运算符</strong></h2><p>赋值运算符用于给变量赋值。Dart中的赋值运算符有 <code>=</code>，<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>%=</code>，<code>~/=</code>。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

a <span class="token operator">=</span> b<span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：2</span>

a <span class="token operator">+=</span> b<span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：4</span>

a <span class="token operator">-=</span> b<span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：2</span>

a <span class="token operator">*=</span> b<span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：4</span>

a <span class="token operator">~/=</span> b<span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：2</span>

a <span class="token operator">%=</span> b<span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-条件运算符" tabindex="-1"><a class="header-anchor" href="#_5-条件运算符" aria-hidden="true">#</a> <strong>5. 条件运算符</strong></h2><p>Dart提供了两种类型的条件运算符，分别是 <code>? :</code> 和 <code>??</code>。其中 <code>? :</code> 可以在基于条件的情况下返回两个值中</p><p>的一个，<code>??</code> 用于在第一个操作数为null时返回第二个操作数。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;a is greater than 10&#39;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;a is not greater than 10&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：a is not greater than 10</span>
<span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;default value&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：default value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-类型测试运算符" tabindex="-1"><a class="header-anchor" href="#_6-类型测试运算符" aria-hidden="true">#</a> <strong>6. 类型测试运算符</strong></h2><p>类型测试运算符用于检查对象的类型。Dart中的类型测试运算符有 <code>is</code> 和 <code>is!</code>。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">is</span> int<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">is!</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-位运算符" tabindex="-1"><a class="header-anchor" href="#_7-位运算符" aria-hidden="true">#</a> <strong>7. 位运算符</strong></h2><p>位运算符用于对整数进行二进制位运算。Dart中的位运算符有 <code>&amp;</code>（与），<code>|</code>（或），<code>^</code>（异或），<code>~</code>（非），<code>&gt;&gt;</code>（右移），<code>&lt;&lt;</code>（左移）。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 二进制形式：1010</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 二进制形式：0010</span>

<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：2</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：10</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：8</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：-11</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：2</span>
<span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：40</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些都是Dart语言中的基本运算符，熟悉这些运算符可以帮助我们更好地理解和编写Dart程序。</p><h2 id="速查表" tabindex="-1"><a class="header-anchor" href="#速查表" aria-hidden="true">#</a> 速查表</h2><p>以下列出了 Dart 的运算符，从高到低按照优先级排列：</p><table><thead><tr><th>描述</th><th>运算符</th></tr></thead><tbody><tr><td>一元运算符（后置）</td><td>++ -- ( ) [ ] . ?.</td></tr><tr><td>一元运算符（前置）</td><td>- ! ~ ++ --</td></tr><tr><td>乘法运算符</td><td>* / % ~/</td></tr><tr><td>加法运算符</td><td>+ -</td></tr><tr><td>移位运算符</td><td>&lt;&lt; &gt;&gt;</td></tr><tr><td>按位与</td><td>&amp;</td></tr><tr><td>按位异或</td><td>^</td></tr><tr><td>按位或</td><td>|</td></tr><tr><td>关系与类型检测</td><td>&gt;= &gt; &lt;= &lt; as is is!</td></tr><tr><td>逻辑与</td><td>&amp;&amp;</td></tr><tr><td>逻辑或</td><td>||</td></tr><tr><td>是否为null</td><td>??</td></tr><tr><td>条件运算符</td><td>? :</td></tr><tr><td>级联运算符</td><td>..</td></tr><tr><td>赋值运算符</td><td>= *= /= ~/= %= += -= &lt;&lt;= &gt;&gt;= &amp;= ^= |= ??=</td></tr></tbody></table><p>与其他类语言比较，Dart的运算符大同小异，这里只选出部分Dart特有的运算符（上表中使用斜粗体的运算符）进行讲解:</p><table><thead><tr><th>运算符</th><th>介绍</th><th>示例</th></tr></thead><tbody><tr><td>?.</td><td>点符号前加问号，表示当前调用只在被访问者不为null的情况下才执行</td><td><code>var upper = name?.toUpperCase();</code></td></tr><tr><td>is is!</td><td>检查对象是否属于或不属于某种类型</td><td><code>if (name is String) { ... }</code></td></tr><tr><td>as</td><td>将对象转换为某类型，如果转换失败将抛出异常</td><td><code>name as String</code></td></tr><tr><td>??</td><td>空值检测，如：a1 ?? a2 ，表示如果a1不为null，则直接返回a1的值，否则返回a2的值</td><td><code>var message = input ?? &#39;Hello&#39;;</code></td></tr><tr><td>..</td><td>级联操作符，用于对同一对象执行一系列操作（链式操作），避免创建多余的临时变量</td><td>不使用级联：<code>person.name = &#39;bob&#39;; person.age = 28;</code> 使用级联：<code>person..name = &#39;bob&#39; ..age = 28;</code></td></tr><tr><td>??=</td><td>空值判断赋值，只在左值为null的情况下才执行赋值操作</td><td><code>message ??= &#39;Hello&#39;;</code></td></tr></tbody></table>`,30),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","运算符.html.vue"]]);export{r as default};
