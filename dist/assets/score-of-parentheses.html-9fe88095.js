import{_ as n,o as s,c as a,d as p}from"./app-2d6feb9f.js";const t={},o=p(`<h1 id="括号的得分" tabindex="-1"><a class="header-anchor" href="#括号的得分" aria-hidden="true">#</a> <strong>括号的得分</strong></h1><p>给定一个括号字符串<code>S</code>，按照以下规则计算字符串的得分：</p><ul><li><code>&quot;()&quot;</code> 得 1 分。</li><li><code>&quot;(A)&quot;</code> 得 <code>2 * A</code> 分，其中 <code>A</code> 是一个有效的括号字符串。</li><li><code>&quot;AB&quot;</code> 得 <code>A + B</code> 分，其中 <code>A</code> 和 <code>B</code> 是有效的括号字符串。</li></ul><p>计算并返回括号字符串<code>S</code>的得分。</p><p><strong>示例：</strong></p><p>输入：S = &quot;()&quot; 输出：1 解释：括号字符串&quot;()&quot;的得分为1。</p><p>输入：S = &quot;(())&quot; 输出：2 解释：括号字符串&quot;(())&quot;的得分为2。</p><p>输入：S = &quot;()()&quot; 输出：2 解释：括号字符串&quot;()()&quot;的得分为2。</p><p>输入：S = &quot;(()(()))&quot; 输出：6 解释：括号字符串&quot;(()(()))&quot;的得分为6。</p><h2 id="题目分析与解题步骤" tabindex="-1"><a class="header-anchor" href="#题目分析与解题步骤" aria-hidden="true">#</a> <strong>题目分析与解题步骤：</strong></h2><p>这个问题可以使用栈来解决。我们可以遍历括号字符串中的每个字符，并使用栈来模拟计算得分的过程。对于每个字符，我们根据其特点和栈的状态进行判断和操作，以计算最终得分。</p><p>解题步骤如下：</p><ol><li><p>创建一个栈<code>stack</code>，用于模拟计算得分的过程。</p></li><li><p>遍历括号字符串<code>S</code>中的每个字符，并执行以下操作：</p><ul><li><p>如果当前字符是左括号<code>(</code>，将其入栈。</p></li><li><p>如果当前字符是右括号<code>)</code>，则说明遇到了一个有效的括号组合。根据题目规则，我们需要计算得分。</p><ul><li><p>如果栈顶元素是左括号<code>(</code>，说明遇到的是一个空的括号对<code>()</code>，此时将<code>1</code>入栈。</p></li><li><p>如果栈顶元素不是左括号<code>(</code>，说明遇到的是一个有效的括号组合<code>(A)</code>，此时需要计算得分。从栈顶开始弹出元素，直到遇到左括号为止。将弹出的元素累加起来，并将累加结果乘以<code>2</code>，得到新的得分，然后将新得分入栈。</p></li></ul></li><li><p>当遍历完整个字符串后，栈中的元素即为最终得分。</p></li></ul></li><li><p>将栈中的元素按照顺序累加起来，得到最终得分。</p></li><li><p>返回最终得分作为解答。</p></li></ol><h2 id="javascript解题框架" tabindex="-1"><a class="header-anchor" href="#javascript解题框架" aria-hidden="true">#</a> <strong>JavaScript解题框架：</strong></h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">scoreOfParentheses</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">S</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          score <span class="token operator">+=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>score <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">+=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个框架中，我们首先定义了一个栈类<code>Stack</code>，其中包含了常用的栈操作方法。然后，我们使用栈来计算括号字符串的得分。</p><p>在<code>scoreOfParentheses</code>函数中，我们遍历括号字符串<code>S</code>，并根据括号的类型和栈的状态进行判断和操作，以计算得分。</p><p>最后，将栈中的元素累加起来，得到最终得分，并返回作为解答。</p>`,18),e=[o];function c(l,u){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","score-of-parentheses.html.vue"]]);export{k as default};
