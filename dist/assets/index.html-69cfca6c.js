import{_ as t,r as p,o,c,a as n,b as a,e,d as l}from"./app-d7df62a4.js";const i={},r=l(`<h1 id="跳跃搜索" tabindex="-1"><a class="header-anchor" href="#跳跃搜索" aria-hidden="true">#</a> 跳跃搜索</h1><p>跳跃搜索（Jump Search）又称为块搜索（Block Search），是一种用于已排序数组的搜索算法。其基本思想是通过固定的步长跳跃或跳过一些元素，而不是搜索所有元素，从而检查较少的元素（相比于线性搜索）。</p><p>例如，假设我们有一个大小为 <code>n</code> 的数组 <code>arr[]</code>，以及一个块大小 <code>m</code>。我们在索引 <code>arr[0]</code>、<code>arr[m]</code>、<code>arr[2 * m]</code>、...、<code>arr[k * m]</code> 等处进行搜索。一旦我们找到区间 <code>arr[k * m] &lt; x &lt; arr[(k+1) * m]</code>，我们在索引 <code>k * m</code> 开始执行线性搜索操作，以找到元素 <code>x</code>。</p><p><strong>什么是最优的块大小？</strong> 在最坏的情况下，我们需要进行 <code>n/m</code> 次跳跃，如果最后一个检查的值大于要搜索的元素，则我们还需要进行 <code>m - 1</code> 次比较进行线性搜索。因此，在最坏情况下，总的比较次数为 <code>((n/m) + m - 1)</code>。当 <code>m = √n</code> 时，函数 <code>((n/m) + m - 1)</code> 的值最小。因此，最佳的步长大小是 <code>m = √n</code>。</p><h2 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度" aria-hidden="true">#</a> 复杂度</h2><p><strong>时间复杂度</strong>：<code>O(√n)</code> - 因为我们按块大小 <code>√n</code> 进行搜索。</p><h2 id="完整实现" tabindex="-1"><a class="header-anchor" href="#完整实现" aria-hidden="true">#</a> 完整实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jumpSearch</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> blockSize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> step <span class="token operator">=</span> blockSize<span class="token punctuation">;</span>
  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// 跳跃定位目标值的可能范围</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    prev <span class="token operator">=</span> step<span class="token punctuation">;</span>
    step <span class="token operator">+=</span> blockSize<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 目标值不在数组中</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 在目标值的可能范围内进行线性搜索</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>prev<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    prev<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 目标值不在数组中</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 检查找到的元素是否是目标值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>prev<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> prev<span class="token punctuation">;</span> <span class="token comment">// 找到目标值，返回索引</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 未找到目标值</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,9),u={href:"https://www.geeksforgeeks.org/jump-search/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://en.wikipedia.org/wiki/Jump_search",target:"_blank",rel:"noopener noreferrer"};function k(m,v){const s=p("ExternalLinkIcon");return o(),c("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[a("GeeksForGeeks"),e(s)])]),n("li",null,[n("a",d,[a("Wikipedia"),e(s)])])])])}const h=t(i,[["render",k],["__file","index.html.vue"]]);export{h as default};
