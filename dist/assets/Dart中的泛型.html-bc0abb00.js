import{_ as n,o as s,c as a,e as t}from"./app-0301958d.js";const e={},p=t(`<h1 id="dart中泛型" tabindex="-1"><a class="header-anchor" href="#dart中泛型" aria-hidden="true">#</a> Dart中泛型</h1><p>泛型，一种强大而灵活的编程工具，可以让开发者创建可以适应任何类型的代码，同时又保持类型安全。这是在许多编程语言中都存在的一种重要的特性，Dart也不例外。在这篇文章中，我们将深入探讨Dart中的泛型。</p><h2 id="泛型的概念" tabindex="-1"><a class="header-anchor" href="#泛型的概念" aria-hidden="true">#</a> 泛型的概念</h2><p>在讨论泛型如何在Dart中工作之前，我们首先需要了解什么是泛型。泛型是一种编程概念，它允许我们在代码中使用占位符类型，然后在实例化类或方法时，指定这些占位符类型应该代表的实际类型。</p><h2 id="泛型的优点" tabindex="-1"><a class="header-anchor" href="#泛型的优点" aria-hidden="true">#</a> 泛型的优点</h2><ul><li><p>代码重用：泛型允许我们编写一次，然后以多种方式使用，只需通过改变我们所使用的类型即可。比如，我们可能有一个用于处理<code>List&lt;int&gt;</code>的方法，如果使用泛型，我们可以让这个方法同时处理<code>List&lt;String&gt;</code>，<code>List&lt;bool&gt;</code>等，而无需重写方法。</p></li><li><p>类型安全：当我们使用泛型时，Dart的静态类型系统将确保我们的代码是类型安全的。我们只能将正确的类型传递给泛型类或方法，否则我们会在编译时得到一个错误。</p></li></ul><h2 id="在dart中使用泛型" tabindex="-1"><a class="header-anchor" href="#在dart中使用泛型" aria-hidden="true">#</a> 在Dart中使用泛型</h2><h3 id="集合与泛型" tabindex="-1"><a class="header-anchor" href="#集合与泛型" aria-hidden="true">#</a> 集合与泛型</h3><p>我们已经在<code>List&lt;T&gt;</code>和<code>Map&lt;K, V&gt;</code>这样的集合类型中使用过泛型，其中T、K和V是类型参数。例如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> int<span class="token punctuation">&gt;</span></span> nameToAge <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;Alice&#39;</span></span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这些例子中，泛型参数告诉Dart集合中应该存储哪种类型的数据。在<code>List&lt;int&gt;</code>中，泛型参数是<code>int</code>，表示列表只能包含整数。在<code>Map&lt;String, int&gt;</code>中，有两个泛型参数，<code>String</code>和<code>int</code>，表示这个映射的键是字符串，值是整数。</p><h3 id="创建泛型类" tabindex="-1"><a class="header-anchor" href="#创建泛型类" aria-hidden="true">#</a> 创建泛型类</h3><p>你也可以在你自己的类中使用泛型。在类定义中，只需在类名后面加上尖括号（&lt;&gt;）和一个或多个类型参数即可。例如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token class-name">T</span> value<span class="token punctuation">;</span>

  <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">T</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> box <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们定义了一个名为<code>Box</code>的泛型类，该类可以保存任何类型的值。然后，我们创建了一个新的<code>Box&lt;int&gt;</code>实例，并传入了一个整数。<code>getValue</code>方法返回这个整数。如果我们试图将非整数类型的值传递给<code>Box&lt;int&gt;</code>，D</p><p>art将报错，因为<code>Box&lt;int&gt;</code>只接受整数。</p><h3 id="创建泛型函数和方法" tabindex="-1"><a class="header-anchor" href="#创建泛型函数和方法" aria-hidden="true">#</a> 创建泛型函数和方法</h3><p>你可以在函数或方法上使用泛型。在函数或方法名后面加上尖括号（&lt;&gt;）和一个或多个类型参数即可。例如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">T</span> first<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span>first<span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: 10</span>
<span class="token function">print</span><span class="token punctuation">(</span>first<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Alice&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Charlie&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: Alice</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们创建了一个名为<code>first</code>的泛型函数，该函数接受一个特定类型的列表，并返回第一个元素。我们使用不同类型的列表调用了这个函数，每次都正确地返回了第一个元素。</p><h2 id="泛型和类型推断" tabindex="-1"><a class="header-anchor" href="#泛型和类型推断" aria-hidden="true">#</a> 泛型和类型推断</h2><p>Dart的类型推断能力意味着我们通常不需要显式指定泛型类型，Dart可以根据上下文自动推断出正确的类型。例如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// List&lt;int&gt;</span>
<span class="token keyword">var</span> nameToAge <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;Alice&#39;</span></span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// Map&lt;String, int&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这些例子中，尽管我们没有显式指定泛型类型，但Dart还是能够推断出<code>numbers</code>是<code>List&lt;int&gt;</code>，<code>nameToAge</code>是<code>Map&lt;String, int&gt;</code>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>泛型是Dart强大的类型系统的一个重要组成部分。使用泛型可以帮助我们编写更灵活、更重用性强的代码，同时又保持了类型安全。对泛型的理解和正确使用，将极大地提升你的Dart编程能力。</p>`,26),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","Dart中的泛型.html.vue"]]);export{r as default};
