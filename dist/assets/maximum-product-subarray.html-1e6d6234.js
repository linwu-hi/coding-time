import{_ as n,o as s,c as a,d as p}from"./app-2d6feb9f.js";const t={},o=p(`<h1 id="最大连续乘积子数组" tabindex="-1"><a class="header-anchor" href="#最大连续乘积子数组" aria-hidden="true">#</a> 最大连续乘积子数组</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定一个整数数组 <code>nums</code>，找到一个具有最大乘积的连续子数组（至少包含一个数字）。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了计算最大连续乘积子数组，我们可以使用动态规划的思想来解决问题。</p><ol><li><p>定义状态：我们可以将问题转化为对于每个位置的状态，即以该位置为结尾的最大乘积子数组的乘积。令 <code>dpMax[i]</code> 表示以第 <code>i</code> 个位置为结尾的最大乘积子数组的乘积。</p></li><li><p>定义辅助状态：我们还需要定义一个辅助状态 <code>dpMin[i]</code>，表示以第 <code>i</code> 个位置为结尾的最小乘积子数组的乘积。这是因为乘积可能存在负数，而负数与负数相乘可以得到最大的乘积。</p></li><li><p>初始状态：对于第一个位置，最大乘积和最小乘积都为 <code>nums[0]</code>，即 <code>dpMax[0] = dpMin[0] = nums[0]</code>。</p></li><li><p>状态转移方程：对于位置 <code>i</code>，我们有两种情况：</p><ul><li><code>nums[i]</code> 为正数，那么最大乘积和最小乘积都有可能扩大或缩小，因此我们需要比较 <code>dpMax[i-1] * nums[i]</code> 和 <code>dpMin[i-1] * nums[i]</code> 的大小，并取最大值和最小值。</li><li><code>nums[i]</code> 为负数，那么最大乘积和最小乘积的关系将会颠倒，我们同样需要比较 <code>dpMax[i-1] * nums[i]</code> 和 <code>dpMin[i-1] * nums[i]</code> 的大小，并取最大值和最小值。</li></ul><p>综上所述，我们可以得到状态转移方程为：</p><p><code>dpMax[i] = max(nums[i], dpMax[i-1] * nums[i], dpMin[i-1] * nums[i])</code></p><p><code>dpMin[i] = min(nums[i], dpMax[i-1] * nums[i], dpMin[i-1] * nums[i])</code></p></li><li><p>最终解：问题的解即为所有 <code>dpMax[i]</code> 中的最大值。</p></li></ol><p>下面是使用动态规划解决最大连续乘积子数组问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

  <span class="token comment">// 初始化状态数组</span>
  <span class="token keyword">const</span> dpMax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> dpMin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 初始状态</span>
  dpMax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  dpMin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 计算最大连续乘积子数组的乘积</span>
  <span class="token keyword">let</span> maxProduct <span class="token operator">=</span> dpMax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dpMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dpMax<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dpMin<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dpMin<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dpMax<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dpMin<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    maxProduct <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxProduct<span class="token punctuation">,</span> dpMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 返回最大连续乘积</span>
  <span class="token keyword">return</span> maxProduct<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),e=[o];function c(i,u){return s(),a("div",null,e)}const d=n(t,[["render",c],["__file","maximum-product-subarray.html.vue"]]);export{d as default};
