import{_ as t,r as o,o as r,c,a as n,b as s,d as e,e as p}from"./app-0301958d.js";const i={},l=p(`<h1 id="线性搜索" tabindex="-1"><a class="header-anchor" href="#线性搜索" aria-hidden="true">#</a> 线性搜索</h1><p>在线性搜索（Linear Search）中，顺序搜索或者顺序查找是一种在列表中查找目标值的方法。它按顺序逐个检查列表中的每个元素，直到找到匹配的值或者搜索完所有元素。 线性搜索的最坏情况下的时间复杂度是线性的，最多进行 <code>n</code> 次比较，其中 <code>n</code> 是列表的长度。</p><figure><img src="https://www.tutorialspoint.com/data_structures_algorithms/images/linear_search.gif" alt="线性搜索" tabindex="0" loading="lazy"><figcaption>线性搜索</figcaption></figure><h2 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度" aria-hidden="true">#</a> 复杂度</h2><p><strong>时间复杂度</strong>：<code>O(n)</code> - 因为在最坏情况下，我们需要检查每个元素一次。</p><h2 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码" aria-hidden="true">#</a> 完整代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">linearSearch</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">// 找到目标元素，返回索引</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 未找到目标元素</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,8),u={href:"https://en.wikipedia.org/wiki/Linear_search",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.tutorialspoint.com/data_structures_algorithms/linear_search_algorithm.htm",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.youtube.com/watch?v=SGU9duLE30w",target:"_blank",rel:"noopener noreferrer"};function h(m,_){const a=o("ExternalLinkIcon");return r(),c("div",null,[l,n("ul",null,[n("li",null,[n("a",u,[s("维基百科"),e(a)])]),n("li",null,[n("a",d,[s("TutorialsPoint"),e(a)])]),n("li",null,[n("a",k,[s("YouTube"),e(a)])])])])}const v=t(i,[["render",h],["__file","index.html.vue"]]);export{v as default};
