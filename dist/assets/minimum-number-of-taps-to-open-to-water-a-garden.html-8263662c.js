import{_ as n,o as s,c as a,d as e}from"./app-2477bd15.js";const p={},t=e(`<h1 id="最少的水龙头灌溉花园" tabindex="-1"><a class="header-anchor" href="#最少的水龙头灌溉花园" aria-hidden="true">#</a> 最少的水龙头灌溉花园</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>有一个长度为 <code>n</code> 的花园，每个位置都可以安装一个水龙头，用于灌溉花园。给定一个长度为 <code>n</code> 的整数数组 <code>ranges</code>，其中 <code>ranges[i]</code> 表示第 <code>i</code> 个水龙头能够覆盖的范围。现在需要找到最少需要安装多少个水龙头，才能确保整个花园中的每个位置都能被水龙头覆盖到。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了解决最少水龙头的问题，我们可以使用贪心算法来解决。贪心算法的思路是优先选择能够覆盖尽可能多位置的水龙头。</p><p>我们按照以下步骤进行解题：</p><ol><li>创建一个长度为 <code>n+1</code> 的数组 <code>dp</code>，初始化所有元素为 <code>Infinity</code>，表示每个位置都需要一个水龙头来覆盖。</li><li>遍历水龙头的范围数组 <code>ranges</code>，对于每个水龙头的范围 <code>(i, j)</code>： <ul><li>如果 <code>i &lt;= n</code>，则更新 <code>dp[i]</code> 为 <code>Math.min(dp[i], j)</code>。这表示在位置 <code>i</code> 能够覆盖到的最远位置是 <code>j</code>。</li></ul></li><li>初始化变量 <code>end</code> 为 0，表示当前覆盖到的最远位置。</li><li>初始化变量 <code>count</code> 为 0，表示需要安装的水龙头数量。</li><li>从位置 0 开始，遍历数组 <code>dp</code>： <ul><li>如果当前位置 <code>i</code> 大于 <code>end</code>，则说明需要在位置 <code>i</code> 安装一个水龙头，更新 <code>end</code> 为 <code>dp[i]</code>，并将 <code>count</code> 增加 1。</li></ul></li><li>最终返回 <code>count</code>，即所需安装的最少水龙头数量。</li></ol><p>以下是使用贪心算法解决最少水龙头问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">minTaps</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> ranges</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ranges<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i <span class="token operator">-</span> ranges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> right <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> ranges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      end <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","minimum-number-of-taps-to-open-to-water-a-garden.html.vue"]]);export{d as default};
