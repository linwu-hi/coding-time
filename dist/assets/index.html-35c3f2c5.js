import{_ as c,r,o as n,c as d,a as e,b as o,e as a,d as t}from"./app-d7df62a4.js";const l={},s=e("h1",{id:"拓扑排序",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#拓扑排序","aria-hidden":"true"},"#"),o(" 拓扑排序")],-1),h=e("p",null,[o("在计算机科学领域，有向图的拓扑排序（Topological Sort）是对其顶点的一种线性排序，使得对于每条有向边 "),e("code",null,"(u, v)"),o("，顶点 "),e("code",null,"u"),o(" 在排序中都出现在顶点 "),e("code",null,"v"),o(" 之前。")],-1),p=e("p",null,"例如，图中的顶点可以表示要执行的任务，而边表示一个任务必须在另一个任务之前执行的约束；在这种应用中，拓扑排序就是任务的有效顺序。",-1),_={href:"https://en.wikipedia.org/wiki/Directed_acyclic_graph",target:"_blank",rel:"noopener noreferrer"},u=t('<figure><img src="https://upload.wikimedia.org/wikipedia/commons/c/c6/Topological_Ordering.svg" alt="有向无环图" tabindex="0" loading="lazy"><figcaption>有向无环图</figcaption></figure><p>有向无环图的拓扑排序：每条边从排序中的较早顶点（左上）指向较后顶点（右下）。有向图是无环的当且仅当它有一个拓扑排序。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><figure><img src="https://upload.wikimedia.org/wikipedia/commons/0/03/Directed_acyclic_graph_2.svg" alt="拓扑排序" tabindex="0" loading="lazy"><figcaption>拓扑排序</figcaption></figure><p>上图展示了许多有效的拓扑排序，包括：</p><ul><li><code>5, 7, 3, 11, 8, 2, 9, 10</code>（从左到右、从上到下）</li><li><code>3, 5, 7, 8, 11, 2, 9, 10</code>（选择编号最小的可用顶点）</li><li><code>5, 7, 3, 8, 11, 10, 9, 2</code>（选择边数最少的顶点）</li><li><code>7, 5, 11, 3, 10, 8, 9, 2</code>（选择编号最大的可用顶点）</li><li><code>5, 7, 11, 2, 3, 8, 9, 10</code>（从上到下、从左到右尝试）</li><li><code>3, 7, 8, 5, 11, 10, 2, 9</code>（任意顺序）</li></ul><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><p>拓扑排序的典型应用之一是<strong>基于依赖关系的任务调度</strong>。任务由顶点表示，如果任务 <code>x</code> 必须在任务 <code>y</code> 之前完成，那么就存在从 <code>x</code> 到 <code>y</code> 的边（例如，洗衣服时，洗衣机必须先完成才能把衣服放入烘干机）。然后，拓扑排序提供了一种执行任务的顺序。</p><p>另一个应用是<strong>依赖关系解析</strong>。每个顶点表示一个软件包，每条边表示软件包 <code>a</code> 对软件包 <code>b</code> 的依赖关系。然后拓扑排序提供了一种安装依赖关系的顺序，使得每个依赖关系的下一个软件包都在前面的软件包之前被安装。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',10),g={href:"https://en.wikipedia.org/wiki/Topological_sorting",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.youtube.com/watch?v=ddTC4Zovtbc&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"};function m(x,k){const i=r("ExternalLinkIcon");return n(),d("div",null,[s,h,p,e("p",null,[o("只有当图没有有向环时，即为"),e("a",_,[o("有向无环图"),a(i)]),o("（DAG），才可能存在拓扑排序。任何DAG都至少有一个拓扑排序，而且已知的算法可以在线性时间内构造任何DAG的拓扑排序。")]),u,e("ul",null,[e("li",null,[e("a",g,[o("维基百科"),a(i)])]),e("li",null,[e("a",f,[o("YouTube（Tushar Roy）"),a(i)])])])])}const w=c(l,[["render",m],["__file","index.html.vue"]]);export{w as default};
