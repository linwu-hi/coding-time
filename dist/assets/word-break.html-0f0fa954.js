import{_ as n,o as s,c as a,d as p}from"./app-2477bd15.js";const e={},o=p(`<h1 id="单词拆分" tabindex="-1"><a class="header-anchor" href="#单词拆分" aria-hidden="true">#</a> 单词拆分</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定一个非空字符串 <code>s</code> 和一个包含非空单词列表的字典 <code>wordDict</code>，确定 <code>s</code> 是否可以被拆分为一个或多个字典中的单词。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了确定给定字符串是否可以被拆分为字典中的单词，我们可以使用动态规划的思想来解决问题。</p><ol><li><p>定义状态：我们可以将问题转化为对于每个字符串的前缀，判断其是否可以被拆分为字典中的单词。令 <code>dp[i]</code> 表示字符串 <code>s</code> 的前 <code>i</code> 个字符是否可以被拆分为字典中的单词。</p></li><li><p>初始状态：根据题目的约束，空字符串可以被认为是可以被拆分的。因此，初始状态为 <code>dp[0] = true</code>。</p></li><li><p>状态转移方程：对于每个位置 <code>i</code>，我们需要判断字符串的前缀 <code>s[0:i]</code> 是否可以被拆分为字典中的单词。我们可以遍历从 <code>0</code> 到 <code>i-1</code> 的位置 <code>j</code>，并检查前缀 <code>s[0:j]</code> 是否可以被拆分为字典中的单词，以及剩余部分 <code>s[j:i]</code> 是否存在于字典中。即 <code>dp[i] = dp[j] &amp;&amp; wordDict.includes(s.substring(j, i))</code>。</p></li><li><p>最终解：问题的解即为 <code>dp[n]</code>，其中 <code>n</code> 是字符串 <code>s</code> 的长度。</p></li></ol><p>下面是使用动态规划解决单词拆分问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> wordDict</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> wordDict<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),t=[o];function c(i,l){return s(),a("div",null,t)}const d=n(e,[["render",c],["__file","word-break.html.vue"]]);export{d as default};
