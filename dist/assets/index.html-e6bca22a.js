import{_ as e,r as o,o as p,c as l,a as n,b as s,e as t,d as c}from"./app-d7df62a4.js";const i={},r=c(`<h1 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序" aria-hidden="true">#</a> 希尔排序</h1><p>希尔排序（Shellsort），也被称为 Shell 排序或 Shell 方法，是一种原地比较排序算法。它可以看作是交换排序（冒泡排序）或插入排序的推广。该方法从远离彼此的元素开始，对它们进行排序，然后逐渐减小要比较的元素之间的间隔。从远离彼此的元素开始，它可以更快地将一些错位的元素移动到正确的位置，而不只是简单地与最近的邻居交换。</p><figure><img src="https://upload.wikimedia.org/wikipedia/commons/d/d8/Sorting_shellsort_anim.gif" alt="希尔排序" tabindex="0" loading="lazy"><figcaption>希尔排序</figcaption></figure><h2 id="希尔排序的工作原理" tabindex="-1"><a class="header-anchor" href="#希尔排序的工作原理" aria-hidden="true">#</a> 希尔排序的工作原理</h2><p>为了方便理解，我们以间隔为4的情况作为示例。将所有间隔为4位置的值组成一个虚拟子列表。这些值是 <code>{35, 14}</code>, <code>{33, 19}</code>, <code>{42, 27}</code> 和 <code>{10, 44}</code>。</p><p>我们比较每个子列表中的值，并在原始数组中进行交换（如果需要）。经过这一步，新数组应该如下所示：</p><p>然后，我们以间隔2进行排序，这个间隔会生成两个子列表：<code>{14, 27, 35, 42}</code> 和 <code>{19, 10, 33, 44}</code>。</p><p>我们在原始数组中比较并交换值（如果需要）。经过这一步，数组应该如下所示：</p><blockquote><p>更新：下面的图片中存在一个错误，结果数组应该是 <code>[14, 10, 27, 19, 35, 33, 42, 44]</code>。</p></blockquote><p>最后，我们使用间隔值为1对数组的剩余部分进行排序。希尔排序使用插入排序来对数组进行排序。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>

      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> gap <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">&gt;</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>
        j <span class="token operator">-=</span> gap<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>gap <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度" aria-hidden="true">#</a> 复杂度</h2><table><thead><tr><th>名称</th><th style="text-align:center;">最佳情况</th><th style="text-align:center;">平均情况</th><th style="text-align:center;">最坏情况</th><th style="text-align:center;">内存</th><th style="text-align:center;">稳定性</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td><strong>希尔排序</strong></td><td style="text-align:center;">n log(n)</td><td style="text-align:center;">取决于间隔序列</td><td style="text-align:center;">n (log(n))<sup>2</sup></td><td style="text-align:center;">1</td><td style="text-align:center;">否</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,14),u={href:"https://www.tutorialspoint.com/data_structures_algorithms/shell_sort_algorithm.htm",target:"_blank",rel:"noopener noreferrer"},d={href:"https://en.wikipedia.org/wiki/Shellsort",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.youtube.com/watch?v=ddeLSDsYVp8&index=79&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"};function h(v,m){const a=o("ExternalLinkIcon");return p(),l("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[s("Tutorials Point"),t(a)])]),n("li",null,[n("a",d,[s("维基百科"),t(a)])]),n("li",null,[n("a",k,[s("YouTube（Rob Edwards）"),t(a)])])])])}const b=e(i,[["render",h],["__file","index.html.vue"]]);export{b as default};
