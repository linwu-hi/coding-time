import{_ as a,r as o,o as i,c as s,a as e,b as t,e as n,d as c}from"./app-d7df62a4.js";const l={},d=c('<h1 id="检测图中的循环" tabindex="-1"><a class="header-anchor" href="#检测图中的循环" aria-hidden="true">#</a> 检测图中的循环</h1><p>在图论中，<strong>循环</strong>是指一条由边和顶点组成的路径，其中一个顶点可以从自身到达。循环有几种不同的类型，主要有<strong>闭合路径</strong>和<strong>简单循环</strong>。</p><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p><strong>闭合路径</strong>由一系列从同一顶点开始和结束的顶点组成，序列中的任意两个连续顶点在图中相邻。在有向图中，每条边在路径中的遍历必须与其方向一致：边必须从序列中较早的顶点指向序列中较后的顶点。起始顶点的选择并不重要：从不同的起始顶点遍历相同的循环边序列会产生相同的闭合路径。</p><p><strong>简单循环</strong>可以定义为一条闭合路径，不允许重复顶点和边，除了起始和结束顶点的重复，或者可以定义为该路径中的边的集合。在有向图中，这两种定义是等价的，简单循环也被称为有向循环：在循环中的顶点和边的循环序列完全由其使用的边的集合确定。在无向图中，循环的边集可以按照两个方向之一遍历，为每个无向循环提供两种可能的有向循环。电路可以是允许重复顶点但不允许重复边的闭合路径；然而，它也可以是简单循环，因此在使用时建议明确定义。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><figure><img src="https://upload.wikimedia.org/wikipedia/commons/e/e7/Graph_cycle.gif" alt="循环" tabindex="0" loading="lazy"><figcaption>循环</figcaption></figure><p>带有颜色边的图，用于说明路径 <code>H-A-B</code>（绿色），带有重复顶点的闭合路径或<strong>循环路径</strong> <code>B-D-E-F-D-C-B</code>（蓝色）以及没有重复边或顶点的<strong>循环</strong> <code>H-D-G-H</code>（红色）</p><h3 id="无向图中的循环" tabindex="-1"><a class="header-anchor" href="#无向图中的循环" aria-hidden="true">#</a> 无向图中的循环</h3><figure><img src="https://www.geeksforgeeks.org/wp-content/uploads/cycleGraph.png" alt="无向图中的循环" tabindex="0" loading="lazy"><figcaption>无向图中的循环</figcaption></figure><h3 id="有向图中的循环" tabindex="-1"><a class="header-anchor" href="#有向图中的循环" aria-hidden="true">#</a> 有向图中的循环</h3><figure><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/cycle.png" alt="有向图中的循环" tabindex="0" loading="lazy"><figcaption>有向图中的循环</figcaption></figure><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><p>常规信息：</p>',14),h={href:"https://en.wikipedia.org/wiki/Cycle_(graph_theory)",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,"无向图中的循环：",-1),p={href:"https://www.geeksforgeeks.org/detect-cycle-undirected-graph/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.youtube.com/watch?v=n_t0a_8H8VY&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"有向图中的循环：",-1),f={href:"https://www.geeksforgeeks.org/detect-cycle-in-a-graph/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.youtube.com/watch?v=rKQaZuoUR4M&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"};function w(b,x){const r=o("ExternalLinkIcon");return i(),s("div",null,[d,e("ul",null,[e("li",null,[e("a",h,[t("Wikipedia"),n(r)])])]),g,e("ul",null,[e("li",null,[e("a",p,[t("GeeksForGeeks 上的无向图中检测循环"),n(r)])]),e("li",null,[e("a",u,[t("YouTube 上的无向图中检测循环算法"),n(r)])])]),_,e("ul",null,[e("li",null,[e("a",f,[t("GeeksForGeeks 上的有向图中检测循环"),n(r)])]),e("li",null,[e("a",k,[t("YouTube 上的有向图中检测循环算法"),n(r)])])])])}const y=a(l,[["render",w],["__file","index.html.vue"]]);export{y as default};
