import{_ as n,o as s,c as a,d as p}from"./app-2d6feb9f.js";const t={},e=p(`<h1 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> <strong>队列</strong></h1><p>队列是一种常见的数据结构，它遵循先进先出（First-In-First-Out，FIFO）的原则。简单来说，队列就像是排队买票一样，先到先服务。</p><p>在队列中，新元素被添加到队列的尾部，并且只能从队列的头部移除元素。这使得最先添加的元素最先被访问，而最后添加的元素最后被访问。</p><p>队列的操作通常包括两个主要动作：入队（enqueue）和出队（dequeue）。入队操作将一个元素添加到队列的尾部，而出队操作将队列的头部元素移除。</p><h2 id="队列的应用场景" tabindex="-1"><a class="header-anchor" href="#队列的应用场景" aria-hidden="true">#</a> <strong>队列的应用场景</strong></h2><p>队列在计算机科学中有广泛的应用场景，例如：</p><ol><li><p>任务调度：多个任务按照先后顺序加入队列，依次执行。</p></li><li><p>广度优先搜索（BFS）：用队列来存储待访问的节点。</p></li><li><p>缓存管理：使用队列来管理缓存中的数据，保证先进入缓存的数据先被访问。</p></li><li><p>线程池：使用队列来存储待执行的任务，线程按照先后顺序从队列中取出任务执行。</p></li></ol><h2 id="队列的基本操作" tabindex="-1"><a class="header-anchor" href="#队列的基本操作" aria-hidden="true">#</a> <strong>队列的基本操作</strong></h2><p>队列的基本操作包括：</p><ul><li><p><code>enqueue(element)</code>：将元素添加到队列的尾部。</p></li><li><p><code>dequeue()</code>：移除队列的头部元素，并返回该元素。</p></li><li><p><code>isEmpty()</code>：判断队列是否为空。</p></li><li><p><code>size()</code>：返回队列中元素的个数。</p></li><li><p><code>front()</code>：获取队列的头部元素，不移除。</p></li><li><p><code>rear()</code>：获取队列的尾部元素，不移除。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">rear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个队列的实现使用了数组作为底层存储结构。它包含了基本的队列操作方法，如入队、出队、判断队列是否为空、获取队列大小、获取头部元素和尾部元素等。</p><p>使用这个队列，我们可以轻松地实现队列相关的算法。例如，可以通过队列来实现广度优先搜索（BFS），任务调度，缓存管理等应用场景。</p>`,13),c=[e];function o(i,l){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","preamble.html.vue"]]);export{k as default};
