import{_ as n,o as s,c as a,d as p}from"./app-d7df62a4.js";const t={},o=p(`<h1 id="有效的括号" tabindex="-1"><a class="header-anchor" href="#有效的括号" aria-hidden="true">#</a> <strong>有效的括号</strong></h1><p>给定一个只包含字符<code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>和<code>&#39;]&#39;</code>的字符串<code>str</code>，判断该字符串中的括号是否有效。</p><p>为了判断括号是否有效，需满足以下条件：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ul><p>注意空字符串也被视为有效。</p><p><strong>示例：</strong></p><p>输入：str = &quot;()&quot; 输出：true 解释：括号字符串&quot;()&quot;是有效的。</p><p>输入：str = &quot;()[]{}&quot; 输出：true 解释：括号字符串&quot;()[]{}&quot;是有效的。</p><p>输入：str = &quot;(]&quot; 输出：false 解释：括号字符串&quot;(]&quot;是无效的，左括号必须用相同类型的右括号闭合。</p><p>输入：str = &quot;([)]&quot; 输出：false 解释：括号字符串&quot;([)]&quot;是无效的，左括号必须以正确的顺序闭合。</p><h2 id="题目分析与解题步骤" tabindex="-1"><a class="header-anchor" href="#题目分析与解题步骤" aria-hidden="true">#</a> <strong>题目分析与解题步骤：</strong></h2><p>这个问题可以使用栈来解决。我们可以遍历字符串中的每个字符，并使用一个栈来模拟括号的匹配过程。对于每个字符，我们根据其类型进行操作。</p><p>解题步骤如下：</p><ol><li><p>创建一个栈<code>stack</code>，用于模拟括号的匹配过程。</p></li><li><p>遍历字符串<code>str</code>中的每个字符，并执行以下操作：</p><ul><li><p>如果当前字符是左括号<code>(</code>，<code>{</code>或<code>[</code>，则将其入栈。</p></li><li><p>如果当前字符是右括号<code>)</code>，<code>}</code>或<code>]</code>，则需要进行匹配操作。</p><ul><li><p>如果栈为空，或栈顶元素与当前字符不匹配，则返回<code>false</code>，表示括号无效。</p></li><li><p>如果栈顶元素与当前字符匹配，将栈顶元素出栈，继续遍历下一个字符。</p></li></ul></li></ul></li><li><p>遍历完整个字符串后，如果栈为空，则表示括号有效，返回<code>true</code>；否则，表示括号无效，返回<code>false</code>。</p></li></ol><h2 id="javascript解题框架" tabindex="-1"><a class="header-anchor" href="#javascript解题框架" aria-hidden="true">#</a> <strong>JavaScript解题框架：</strong></h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;{&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;}&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isMatching</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isMatching</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token string">&#39;{&#39;</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token string">&#39;[&#39;</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个框架中，我们首先定义了一个栈类<code>Stack</code>，其中包含了常用的栈操作方法。然后，我们使用栈来判断括号是否有效。</p><p>在<code>isValid</code>函数中，我们遍历字符串<code>str</code>，并根据字符的类型进行判断和操作。如果当前字符是左括号，将其入栈；如果当前字符是右括号，则进行匹配操作。</p><p>匹配操作通过<code>isMatching</code>函数来判断栈顶元素与当前字符是否匹配。如果栈为空，或栈顶元素与当前字符不匹配，则返回<code>false</code>，表示括号无效。</p><p>最后，判断栈是否为空，如果为空，则表示括号有效，返回<code>true</code>；否则，表示括号无效，返回<code>false</code>。</p>`,20),e=[o];function c(l,i){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","valid-parentheses.html.vue"]]);export{r as default};
