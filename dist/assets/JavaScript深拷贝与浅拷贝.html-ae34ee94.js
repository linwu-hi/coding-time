const e=JSON.parse('{"key":"v-16a2920a","path":"/js/advance/JavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D.html","title":"JavaScript深拷贝与浅拷贝","lang":"zh-CN","frontmatter":{"description":"引言 在JavaScript中，对象的拷贝是一项常见的操作。浅拷贝和深拷贝是两种常用的拷贝方式。浅拷贝只复制对象的引用，而深拷贝创建了一个全新的对象，包含与原始对象相同的值和结构。深拷贝和浅拷贝各有适用的场景和注意事项。本文将详细介绍如何实现一个完整而优雅的深拷贝函数，处理循环引用和特殊类型，优化性能，并探讨深拷贝和浅拷贝的应用场景、注意事项和相关属性...","head":[["meta",{"property":"og:url","content":"https://www.coding-time.cn/js/advance/JavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D.html"}],["meta",{"property":"og:site_name","content":"编程时光"}],["meta",{"property":"og:title","content":"JavaScript深拷贝与浅拷贝"}],["meta",{"property":"og:description","content":"引言 在JavaScript中，对象的拷贝是一项常见的操作。浅拷贝和深拷贝是两种常用的拷贝方式。浅拷贝只复制对象的引用，而深拷贝创建了一个全新的对象，包含与原始对象相同的值和结构。深拷贝和浅拷贝各有适用的场景和注意事项。本文将详细介绍如何实现一个完整而优雅的深拷贝函数，处理循环引用和特殊类型，优化性能，并探讨深拷贝和浅拷贝的应用场景、注意事项和相关属性..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-09T02:59:11.000Z"}],["meta",{"property":"article:author","content":"linwu"}],["meta",{"property":"article:modified_time","content":"2023-07-09T02:59:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript深拷贝与浅拷贝\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-09T02:59:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"linwu\\",\\"url\\":\\"https://www.coding-time.cn\\",\\"email\\":\\"linwu.hi@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"引言","slug":"引言","link":"#引言","children":[]},{"level":2,"title":"1. 深拷贝的实现","slug":"_1-深拷贝的实现","link":"#_1-深拷贝的实现","children":[{"level":3,"title":"1.1 基本类型和特殊类型的处理","slug":"_1-1-基本类型和特殊类型的处理","link":"#_1-1-基本类型和特殊类型的处理","children":[]},{"level":3,"title":"1.2 处理循环引用","slug":"_1-2-处理循环引用","link":"#_1-2-处理循环引用","children":[]},{"level":3,"title":"1.3 性能优化","slug":"_1-3-性能优化","link":"#_1-3-性能优化","children":[]},{"level":3,"title":"1.4 完整的深拷贝实现示例","slug":"_1-4-完整的深拷贝实现示例","link":"#_1-4-完整的深拷贝实现示例","children":[]}]},{"level":2,"title":"2. 浅拷贝的实现","slug":"_2-浅拷贝的实现","link":"#_2-浅拷贝的实现","children":[{"level":3,"title":"2.1 Object.assign()","slug":"_2-1-object-assign","link":"#_2-1-object-assign","children":[]},{"level":3,"title":"2.2 展开语法（Spread Syntax）","slug":"_2-2-展开语法-spread-syntax","link":"#_2-2-展开语法-spread-syntax","children":[]},{"level":3,"title":"2.3 数组浅拷贝","slug":"_2-3-数组浅拷贝","link":"#_2-3-数组浅拷贝","children":[]}]},{"level":2,"title":"3. 深拷贝与浅拷贝的应用场景","slug":"_3-深拷贝与浅拷贝的应用场景","link":"#_3-深拷贝与浅拷贝的应用场景","children":[]},{"level":2,"title":"4. 注意事项","slug":"_4-注意事项","link":"#_4-注意事项","children":[]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1688871551000,"updatedTime":1688871551000,"contributors":[{"name":"linwu-hi","email":"linwu.hi@gmail.com","commits":1}]},"readingTime":{"minutes":6.71,"words":2013},"filePathRelative":"js/advance/JavaScript深拷贝与浅拷贝.md","localizedDate":"2023年7月9日","autoDesc":true}');export{e as data};
