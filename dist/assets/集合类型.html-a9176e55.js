import{_ as n,o as s,c as a,d as t}from"./app-2d6feb9f.js";const p={},e=t(`<h1 id="dart中的集合类型" tabindex="-1"><a class="header-anchor" href="#dart中的集合类型" aria-hidden="true">#</a> Dart中的集合类型</h1><p>Dart 提供了一系列的集合类型，其中包括 Map 和 Set。本文将简要介绍 Dart 中的 Map 和 Set，以及如何在 Dart 中使用这两种数据结构。</p><h2 id="dart中的list" tabindex="-1"><a class="header-anchor" href="#dart中的list" aria-hidden="true">#</a> Dart中的List</h2><p>Dart中的List是一种重要的数据类型，可以存储一系列有序的元素，元素的类型可以是任意类型，包括数字，字符串，布尔值，对象，甚至是其他List。它类似于其他编程语言中的数组，但具有更多的内置方法和功能。</p><h3 id="创建和初始化list" tabindex="-1"><a class="header-anchor" href="#创建和初始化list" aria-hidden="true">#</a> 创建和初始化List</h3><p>在Dart中，你可以通过几种不同的方式创建和初始化List：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 创建空列表</span>
<span class="token keyword">var</span> emptyList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 创建具有几个初始元素的列表</span>
<span class="token keyword">var</span> initializedList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 使用List构造函数创建列表</span>
<span class="token keyword">var</span> listWithConstructor <span class="token operator">=</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">filled</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个包含5个0的列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问和修改list元素" tabindex="-1"><a class="header-anchor" href="#访问和修改list元素" aria-hidden="true">#</a> 访问和修改List元素</h3><p>你可以使用索引（从0开始）来访问和修改List中的元素：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出1</span>
myList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="list的主要方法" tabindex="-1"><a class="header-anchor" href="#list的主要方法" aria-hidden="true">#</a> List的主要方法</h3><p>List类提供了一些方法来处理和操作列表。</p><ul><li><code>add(element)</code>: 在List的末尾添加一个元素</li><li><code>insert(index, element)</code>: 在指定索引处插入一个元素</li><li><code>remove(element)</code>: 删除列表中首个匹配的元素</li><li><code>removeAt(index)</code>: 删除指定索引处的元素</li><li><code>indexOf(element)</code>: 查找指定元素的索引，如果元素不存在，则返回-1</li><li><code>contains(element)</code>: 检查列表是否包含指定元素，如果包含则返回true，否则返回false</li><li><code>sort([compareFunction])</code>: 对List的元素进行排序，可以提供一个可选的比较函数</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 [1, 2, 3, 4]</span>

myList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 [0, 1, 2, 3, 4]</span>

myList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 [0, 1, 3, 4]</span>

myList<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 [1, 3, 4]</span>

<span class="token function">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 1</span>

<span class="token function">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 false</span>

myList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 [1, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dart中的map" tabindex="-1"><a class="header-anchor" href="#dart中的map" aria-hidden="true">#</a> Dart中的Map</h2><p>Dart中的Map是一种无序的键值对集合，其中的键和值都可以是任何类型。它是一个动态集合，这意味着你可以在运行时向其中添加或删除键值对。Map在很多场景下都很有用，例如，当你需要通过一种方式（键）来查找或访问数据（值）时。</p><h3 id="创建和初始化map" tabindex="-1"><a class="header-anchor" href="#创建和初始化map" aria-hidden="true">#</a> 创建和初始化Map</h3><p>在Dart中，你可以通过以下几种方式创建和初始化Map：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 创建空的Map</span>
<span class="token keyword">var</span> emptyMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建并初始化Map</span>
<span class="token keyword">var</span> initializedMap <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;key1&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;value1&#39;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;key2&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;value2&#39;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;key3&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;value3&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用Map构造函数创建Map</span>
<span class="token keyword">var</span> mapWithConstructor <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问和修改map元素" tabindex="-1"><a class="header-anchor" href="#访问和修改map元素" aria-hidden="true">#</a> 访问和修改Map元素</h3><p>你可以通过键来访问和修改Map中的值：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;key1&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;value1&#39;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;key2&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;value2&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span>myMap<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;key1&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 &#39;value1&#39;</span>

myMap<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;key1&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;new value1&#39;</span></span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myMap<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;key1&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 &#39;new value1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map的主要方法" tabindex="-1"><a class="header-anchor" href="#map的主要方法" aria-hidden="true">#</a> Map的主要方法</h3><p>Map类提供了一些方法来处理和操作键值对。</p><ul><li><code>containsKey(key)</code>: 检查Map是否包含指定的键</li><li><code>containsValue(value)</code>: 检查Map是否包含指定的值</li><li><code>remove(key)</code>: 删除指定的键及其对应的值</li><li><code>addAll(other)</code>: 将其他Map的键值对添加到当前Map中</li><li><code>clear()</code>: 删除Map中的所有键值对</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;key1&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;value1&#39;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;key2&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;value2&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span>myMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;key1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 true</span>
<span class="token function">print</span><span class="token punctuation">(</span>myMap<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;value3&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 false</span>

myMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;key1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 {key2: value2}</span>

myMap<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;key3&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;value3&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;key4&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;value4&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 {key2: value2, key3: value3, key4: value4}</span>

myMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dart中的set" tabindex="-1"><a class="header-anchor" href="#dart中的set" aria-hidden="true">#</a> Dart中的Set</h2><p>Dart中的Set是一种无序的、包含唯一项的集合，所有的元素都是唯一的，没有重复项。这意味着无论你尝试将同样的项目添加到Set中多少次，它都只会出现一次。</p><h3 id="创建和初始化set" tabindex="-1"><a class="header-anchor" href="#创建和初始化set" aria-hidden="true">#</a> 创建和初始化Set</h3><p>在Dart中，你可以通过以下几种方式创建和初始化Set：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 创建空的Set</span>
<span class="token keyword">var</span> emptySet <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建并初始化Set</span>
<span class="token keyword">var</span> initializedSet <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;item1&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;item2&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;item3&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用Set构造函数创建Set</span>
<span class="token keyword">var</span> setWithConstructor <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：如果你尝试创建一个空的Set但未指定类型，Dart会创建一个动态类型的Map。因此，为了创建一个空的Set，你需要在创建Set时提供一个类型参数。</p><h3 id="添加和删除set元素" tabindex="-1"><a class="header-anchor" href="#添加和删除set元素" aria-hidden="true">#</a> 添加和删除Set元素</h3><p>你可以使用<code>add</code>和<code>remove</code>方法向Set中添加或删除元素：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> mySet <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;item1&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;item2&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;item3&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>

mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;item4&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 {item1, item2, item3, item4}</span>

mySet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;item1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 {item2, item3, item4}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set的主要方法" tabindex="-1"><a class="header-anchor" href="#set的主要方法" aria-hidden="true">#</a> Set的主要方法</h3><p>Set类提供了一些方法来处理和操作集合。</p><ul><li><code>contains(element)</code>: 检查Set是否包含指定的元素</li><li><code>union(other)</code>: 返回一个新的Set，包含当前Set和另一个Set中所有的元素</li><li><code>intersection(other)</code>: 返回一个新的Set，包含当前Set和另一个Set中共有的元素</li><li><code>difference(other)</code>: 返回一个新的Set，包含当前Set中的元素，但不包含另一个Set中的元素</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> mySet1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;item1&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;item2&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;item3&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> mySet2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;item2&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;item3&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;item4&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span>mySet1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;item1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 true</span>

<span class="token keyword">var</span> unionSet <span class="token operator">=</span> mySet1<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>mySet2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>unionSet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 {item1, item2, item3, item4}</span>

<span class="token keyword">var</span> intersectionSet <span class="token operator">=</span> mySet1<span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>mySet2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>intersectionSet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 {item2, item3}</span>

<span class="token keyword">var</span> differenceSet <span class="token operator">=</span> mySet1<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>mySet2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>differenceSet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 {item1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),c=[e];function i(o,l){return s(),a("div",null,c)}const r=n(p,[["render",i],["__file","集合类型.html.vue"]]);export{r as default};
