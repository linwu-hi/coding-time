import{_ as n,o as s,c as a,d as t}from"./app-2477bd15.js";const p={},e=t(`<h1 id="最长重复字符替换" tabindex="-1"><a class="header-anchor" href="#最长重复字符替换" aria-hidden="true">#</a> 最长重复字符替换</h1><p>给定一个仅包含大写英文字母的字符串<code>s</code>和一个整数<code>k</code>，你可以对任何字符串中的字符进行最多<code>k</code>次替换。请你找出并返回替换后最长的重复字符子串的长度。</p><p><strong>示例:</strong></p><p>输入：s = &quot;ABAB&quot;, k = 2 输出：4 解释：使用两个&#39;A&#39;替换为两个&#39;B&#39;,反之亦然。</p><p>输入：s = &quot;AABABBA&quot;, k = 1 输出：4 解释：将中间的一个&#39;A&#39;替换为&#39;B&#39;,字符串变为&quot;AABBBBA&quot;。 子串 &quot;BBBB&quot; 有最长重复字母, 长度为4。</p><h2 id="题目分析与解题步骤" tabindex="-1"><a class="header-anchor" href="#题目分析与解题步骤" aria-hidden="true">#</a> <strong>题目分析与解题步骤：</strong></h2><p>为了解决这个问题，我们可以使用滑动窗口的方法。我们需要找出一个最长的窗口，这个窗口内部最多包含<code>k</code>个不同的字符。我们将这个窗口内的所有其他字符全部替换为出现次数最多的那个字符，就可以得到一个全是同一字符的字符串。</p><p>解题步骤如下：</p><ol><li><p>初始化两个指针<code>left</code>和<code>right</code>，都指向字符串的开始。</p></li><li><p>不断地向右移动<code>right</code>指针，扩大窗口。每次移动时，记录当前窗口中出现次数最多的字符的数量。同时，如果<code>right - left + 1</code>（当前窗口的大小）减去出现次数最多的字符的数量大于<code>k</code>，说明不能通过替换得到全是同一字符的字符串，此时需要移动<code>left</code>指针，缩小窗口。</p></li><li><p>每次移动<code>right</code>指针，都尝试用当前窗口的大小更新最长重复字符子串的长度。</p></li></ol><p>下面是对应的JavaScript代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">characterReplacement</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> maxCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        maxCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxCount<span class="token punctuation">,</span> count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> maxCount <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        right<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> maxLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们使用了一个数组<code>count</code>来记录每个字符的出现次数，<code>maxCount</code>来记录窗口中出现次数最多的字符的数量，<code>maxLength</code>来记录最长重复字符子串的长度。在每次移动<code>right</code>指针时，我们都会更新<code>count</code>和<code>maxCount</code>，并且如果当前窗口不能通过最多<code>k</code>次替换得到全是同一字符的字符串，我们就会移动<code>left</code>指针，缩小窗口。最后，返回的<code>maxLength</code>就是最长重复字符子串的长度。</p>`,12),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","longest-repeating-character-replacement.html.vue"]]);export{r as default};
