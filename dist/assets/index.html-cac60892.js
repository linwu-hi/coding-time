import{_ as n,r,o as t,c,a as e,b as o,e as a,d as s}from"./app-2d6feb9f.js";const d={},l=s('<h1 id="普里姆算法" tabindex="-1"><a class="header-anchor" href="#普里姆算法" aria-hidden="true">#</a> 普里姆算法</h1><p>在计算机科学中，<strong>普里姆算法</strong>是一种贪心算法，用于在加权无向图中找到最小生成树。</p><p>该算法通过从任意起始顶点开始，逐步构建这棵树，每一步都选择从树到另一个顶点的代价最小的连接。</p><figure><img src="https://upload.wikimedia.org/wikipedia/commons/f/f7/Prim&#39;s_algorithm.svg" alt="普里姆算法" tabindex="0" loading="lazy"><figcaption>普里姆算法</figcaption></figure><p>从顶点 <code>A</code> 开始的普里姆算法。在第三步中，边 <code>BD</code> 和 <code>AB</code> 的权重都是 <code>2</code>，因此任意选择 <code>BD</code>。在这一步之后，<code>AB</code> 不再作为添加到树中的候选边，因为它连接了树中已经存在的两个节点。</p><h2 id="最小生成树" tabindex="-1"><a class="header-anchor" href="#最小生成树" aria-hidden="true">#</a> 最小生成树</h2><p><strong>最小生成树</strong>（MST）或最小权重生成树是一个连通的、带权（非）有向图的边的子集，它将所有顶点连接在一起，没有任何环，并且具有最小可能的总边权重。也就是说，它是一个生成树，其边权重之和尽可能小。更一般地，任何带权无向图（不一定是连通的）都有一个最小生成森林，即其连通分量的最小生成树的并集。</p><figure><img src="https://upload.wikimedia.org/wikipedia/commons/d/d2/Minimum_spanning_tree.svg" alt="最小生成树" tabindex="0" loading="lazy"><figcaption>最小生成树</figcaption></figure><p>一个平面图及其最小生成树。每条边都带有其权重，这里的权重大致与其长度成比例。</p><figure><img src="https://upload.wikimedia.org/wikipedia/commons/c/c9/Multiple_minimum_spanning_trees.svg" alt="最小生成树" tabindex="0" loading="lazy"><figcaption>最小生成树</figcaption></figure><p>该图显示了图中可能有多个最小生成树的情况。在图中，图下方的两棵树是给定图的两种可能的最小生成树。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',12),p={href:"https://en.wikipedia.org/wiki/Minimum_spanning_tree",target:"_blank",rel:"noopener noreferrer"},h={href:"https://en.wikipedia.org/wiki/Prim%27s_algorithm",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.youtube.com/watch?v=oP2-8ysT3QQ&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.youtube.com/watch?v=cplfcGZmX7I&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"};function u(m,f){const i=r("ExternalLinkIcon");return t(),c("div",null,[l,e("ul",null,[e("li",null,[e("a",p,[o("维基百科上的最小生成树"),a(i)])]),e("li",null,[e("a",h,[o("维基百科上的普里姆算法"),a(i)])]),e("li",null,[e("a",g,[o("YouTube 上的 Tushar Roy 的普里姆算法"),a(i)])]),e("li",null,[e("a",_,[o("YouTube 上的 Michael Sambol 的普里姆算法"),a(i)])])])])}const w=n(d,[["render",u],["__file","index.html.vue"]]);export{w as default};
