import{_ as t,o as r,c as e,d as a}from"./app-2477bd15.js";const l={},o=a('<h1 id="flutter简介" tabindex="-1"><a class="header-anchor" href="#flutter简介" aria-hidden="true">#</a> Flutter简介</h1><p>Flutter是由Google开发和维护的开源框架，自2017年以来，已经迅速获得了开发者社区的广泛认可。其主要目的是开发出高性能、高保真的移动应用程序，用于iOS和Android两个主要平台。</p><p>Google创建Flutter的初衷是解决跨平台开发中的一些普遍问题，包括性能瓶颈，不同平台的UI不一致等。Google希望Flutter能够创建美观、流畅且用户体验接近原生应用的应用程序。目前，Flutter已经逐步扩展到其他平台，如Web、桌面应用和嵌入式系统。</p><h2 id="flutter架构" tabindex="-1"><a class="header-anchor" href="#flutter架构" aria-hidden="true">#</a> Flutter架构</h2><p>Flutter框架的架构设计主要分为三层：</p><ol><li><p><strong>框架层</strong>：框架层是基于Dart语言实现的，并为开发者提供了丰富的API。它主要包括Material和Cupertino两种设计风格的Widget，各种布局方式（Stack, Row, Column等），以及用于处理交互（手势处理，动画，路由/导航）的API。</p></li><li><p><strong>引擎层</strong>：引擎层主要是用C++编写的，并提供了低级别的服务，如网络、存储、插件的支持。此外，还包括Dart运行时环境以及Skia图形渲染引擎。</p></li><li><p><strong>嵌入层</strong>：嵌入层是特定于平台的，负责在各种不同的操作系统上启动Flutter应用。这一层包括Android和iOS的嵌入API，用于将Flutter引擎加载到Android和iOS应用程序中。</p></li></ol><h2 id="flutter与dart" tabindex="-1"><a class="header-anchor" href="#flutter与dart" aria-hidden="true">#</a> Flutter与Dart</h2><p>Flutter选择了Dart作为其开发语言。这主要有以下几个原因：</p><ol><li><p><strong>性能</strong>：Dart支持Ahead-Of-Time（AOT）编译，即预编译，可以将Dart代码直接编译为本地机器码，这对于提高Flutter应用的启动速度和运行性能至关重要。</p></li><li><p><strong>热重载</strong>：Dart也支持Just-In-Time（JIT）编译，即边编译边执行，这意味着开发者可以在应用程序运行过程中进行修改并立即看到结果，这极大地提高了开发效率。</p></li><li><p><strong>易学易用</strong>：Dart语法简洁明了，对于大多数开发者来说，特别是具有Java或JavaScript背景的开发者，能够轻松地上手Dart。</p></li><li><p><strong>单语言开发</strong>：使用Dart，开发者可以同时编写</p></li></ol><p>前端界面和后端逻辑，无需切换不同的语言，这有助于提高开发效率。</p><ol start="5"><li><strong>垃圾收集和内存管理</strong>：Dart语言的这些特性有助于简化开发流程，同时提高应用的运行效率。</li></ol><p>总的来说，Flutter框架提供了一个全新的方式来构建和部署跨平台的UI驱动型应用，而Dart语言则为其提供了强大的后盾，使得Flutter应用能够有出色的性能，同时还具有快速开发的能力。</p>',12),i=[o];function n(s,d){return r(),e("div",null,i)}const u=t(l,[["render",n],["__file","简介.html.vue"]]);export{u as default};
