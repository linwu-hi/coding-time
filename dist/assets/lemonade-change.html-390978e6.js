import{_ as n,o as s,c as a,d as e}from"./app-2477bd15.js";const p={},o=e(`<h1 id="柠檬水变化" tabindex="-1"><a class="header-anchor" href="#柠檬水变化" aria-hidden="true">#</a> 柠檬水变化</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定一个整数数组 <code>bills</code>，表示顾客购买柠檬水的账单金额。柠檬水的价格为 5 美元。每个顾客只会购买一杯柠檬水，并且顾客只能支付 5、10 或 20 美元的钞票。顾客按顺序购买柠檬水，且每次购买都会给出一张钞票。判断你能否正确找零。</p><p>如果你手头没有足够的零钱找零，或者无法正确找零，则返回 <code>false</code>。否则，返回 <code>true</code>。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了解决柠檬水找零问题，我们可以使用贪心算法来解决。</p><p>贪心算法的思路是尽量用面额大的钞票找零。我们遵循以下策略：</p><ol><li>维护两个变量 <code>five</code> 和 <code>ten</code>，分别表示手中的 5 美元和 10 美元的数量。</li><li>遍历账单数组 <code>bills</code>，对于每个账单金额 <code>bill</code>： <ul><li>如果 <code>bill</code> 为 5 美元，不需要找零，将 <code>five</code> 增加 1。</li><li>如果 <code>bill</code> 为 10 美元，需要找零 5 美元，首先检查是否有足够的 5 美元，如果没有，则无法找零，返回 <code>false</code>；否则，将 <code>five</code> 减少 1，将 <code>ten</code> 增加 1。</li><li>如果 <code>bill</code> 为 20 美元，需要找零 15 美元，首先检查是否有足够的零钱找零。我们有两种选择： <ul><li>一种是找零 1 张 10 美元和 1 张 5 美元。如果有足够的 10 美元和 5 美元，将 <code>ten</code> 减少 1，<code>five</code> 减少 1；</li><li>另一种是找零 3 张 5 美元。如果有足够的 5 美元，将 <code>five</code> 减少 3。</li><li>如果以上两种方式都无法满足找零条件，则无法找零，返回 <code>false</code>。</li></ul></li></ul></li><li>遍历结束后，如果能够正确找零，则返回 <code>true</code>。</li></ol><p>以下是使用贪心算法解决柠檬水找零问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">lemonadeChange</span><span class="token punctuation">(</span><span class="token parameter">bills</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> five <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bills<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bills<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      five<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bills<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>five <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      five<span class="token operator">--</span><span class="token punctuation">;</span>
      ten<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bills<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ten <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> five <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ten<span class="token operator">--</span><span class="token punctuation">;</span>
        five<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>five <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        five <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),t=[o];function c(l,i){return s(),a("div",null,t)}const d=n(p,[["render",c],["__file","lemonade-change.html.vue"]]);export{d as default};
