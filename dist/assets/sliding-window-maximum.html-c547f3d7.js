import{_ as n,o as s,c as a,d as p}from"./app-2477bd15.js";const t={},e=p(`<h1 id="滑动窗口的最大值" tabindex="-1"><a class="header-anchor" href="#滑动窗口的最大值" aria-hidden="true">#</a> <strong>滑动窗口的最大值</strong></h1><p>给定一个整数数组<code>nums</code>和一个整数<code>k</code>，请找出数组中所有滑动窗口大小为<code>k</code>的子数组的最大值。</p><p><strong>示例：</strong></p><p>输入：nums = [1,3,-1,-3,5,3,6,7], k = 3 输出：[3,3,5,5,6,7] 解释：</p><ul><li>窗口位置 最大值</li><li>[1 3 -1] -3 5 3 6 7 3</li><li>1 [3 -1 -3] 5 3 6 7 3</li><li>1 3 [-1 -3 5] 3 6 7 5</li><li>1 3 -1 [-3 5 3] 6 7 5</li><li>1 3 -1 -3 [5 3 6] 7 6</li><li>1 3 -1 -3 5 [3 6 7] 7</li></ul><h2 id="题目分析与解题步骤" tabindex="-1"><a class="header-anchor" href="#题目分析与解题步骤" aria-hidden="true">#</a> <strong>题目分析与解题步骤：</strong></h2><p>这个问题可以使用队列来解决。我们可以使用一个双端队列来存储滑动窗口中的元素，并保持队列中的元素按照降序排列。</p><p>解题步骤如下：</p><ol><li><p>创建一个双端队列<code>queue</code>，用于存储滑动窗口中的元素索引。</p></li><li><p>遍历数组<code>nums</code>，并执行以下操作：</p><ul><li><p>在添加新元素之前，先检查队列<code>queue</code>的头部元素是否超出滑动窗口范围。如果超出，则将头部元素移除。</p></li><li><p>然后，比较新元素与队列<code>queue</code>尾部元素所对应的数组元素的大小。如果新元素大于等于尾部元素，则将尾部元素移除，直到队列<code>queue</code>为空或者新元素小于尾部元素。</p></li><li><p>将新元素的索引添加到队列<code>queue</code>的尾部。</p></li><li><p>如果当前窗口已经达到大小<code>k</code>，则将队列<code>queue</code>头部元素所对应的数组元素作为当前窗口的最大值。</p></li></ul></li><li><p>遍历完整个数组后，我们将得到所有滑动窗口的最大值数组。</p></li></ol><h2 id="javascript解题框架" tabindex="-1"><a class="header-anchor" href="#javascript解题框架" aria-hidden="true">#</a> <strong>JavaScript解题框架：</strong></h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">function</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检查队列头部元素是否超出滑动窗口范围</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> i <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 比较新元素与队列尾部元素所对应的数组元素的大小</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>queue<span class="token punctuation">.</span>items<span class="token punctuation">[</span>queue<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 添加新元素的索引到队列尾部</span>
    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当窗口达到大小 k 时，将队列头部元素所对应的数组元素作为当前窗口的最大值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个框架中，我们使用一个双端队列 <code>Deque</code> 来实现滑动窗口最大值的计算。双端队列中存储的是数组元素的索引，而不是元素本身。</p><p>通过遍历数组 <code>nums</code>，我们依次将每个元素加入队列，并维护队列中的元素按照降序排列的规则。</p><p>在每次遍历过程中，我们检查队列头部元素是否超出滑动窗口范围，并将超出范围的元素移除。然后，我们比较新元素与队列尾部元素所对应的数组元素的大小，并移除比新元素小的尾部元素，以保持队列的降序特性。</p><p>当窗口大小达到 <code>k</code> 时，我们将队列头部元素所对应的数组元素作为当前窗口的最大值，并将其添加到结果数组 <code>result</code> 中。</p>`,15),o=[e];function c(u,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","sliding-window-maximum.html.vue"]]);export{k as default};
