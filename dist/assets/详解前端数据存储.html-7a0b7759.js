import{_ as e,r as o,o as p,c as i,a as n,b as a,e as t,d as c}from"./app-2477bd15.js";const l={},r=c(`<h1 id="详解cookie-session-sessionstorage-localstorage" tabindex="-1"><a class="header-anchor" href="#详解cookie-session-sessionstorage-localstorage" aria-hidden="true">#</a> 详解Cookie, Session, SessionStorage, LocalStorage</h1><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>在Web开发中，数据的存储和管理是非常重要的。Cookie、Session、SessionStorage和LocalStorage是常见的Web存储解决方案。本文将详细介绍这些概念，比较它们的特点和用法，并提供相关的代码示例。</p><h2 id="_1-什么是cookie" tabindex="-1"><a class="header-anchor" href="#_1-什么是cookie" aria-hidden="true">#</a> 1. 什么是Cookie？</h2><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><p>Cookie是一种在客户端存储数据的机制，它将数据以键值对的形式存储在用户的浏览器中。Cookie具有以下属性：</p><ul><li><strong>名称和值</strong>：每个Cookie都有一个名称和对应的值，以键值对的形式表示。</li><li><strong>域（Domain）</strong>：Cookie的域属性指定了可以访问Cookie的域名。默认情况下，Cookie的域属性设置为创建Cookie的页面的域名。</li><li><strong>路径（Path）</strong>：Cookie的路径属性指定了可以访问Cookie的路径。默认情况下，Cookie的路径属性设置为创建Cookie的页面的路径。</li><li><strong>过期时间（Expires/Max-Age）</strong>：Cookie的过期时间属性指定了Cookie的有效期限。可以通过设置<code>Expires</code>或<code>Max-Age</code>属性来定义过期时间。过期时间可以是一个具体的日期和时间，也可以是一个从当前时间开始的时间段。</li><li><strong>安全标志（Secure）</strong>：Cookie的安全标志属性指定了是否只在通过HTTPS协议发送请求时才发送Cookie。</li><li><strong>同站点标志（SameSite）</strong>：Cookie的同站点标志属性指定了是否限制Cookie只能在同一站点发送。可以设置为<code>Strict</code>（仅允许来自当前站点的请求携带Cookie）或<code>Lax</code>（允许部分跨站点请求携带Cookie）。</li></ul><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><p>Cookie在Web开发中有多种应用场景，包括：</p><ul><li><strong>会话管理</strong>：Cookie常用于存储会话标识符，以便在用户访问不同页面时保持会话状态。</li><li><strong>身份验证</strong>：Cookie可以用于存储用户的身份验证凭证或令牌，以便在用户下次访问时自动登录。</li><li><strong>个性化设置</strong>：Cookie可以用于存储用户的个性化首选项，例如语言偏好、主题设置等。</li><li><strong>追踪和分析</strong>：Cookie可以</li></ul><p>用于追踪用户的行为和进行网站分析，例如记录用户访问的页面、点击的链接等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置Cookie</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;username=John Doe; expires=Fri, 31 Dec 2023 23:59:59 GMT; path=/; secure; SameSite=Strict&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 读取Cookie</span>
<span class="token keyword">const</span> cookies <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cookie <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> cookie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> cookie<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-什么是session" tabindex="-1"><a class="header-anchor" href="#_2-什么是session" aria-hidden="true">#</a> 2. 什么是Session？</h2><h3 id="属性-1" tabindex="-1"><a class="header-anchor" href="#属性-1" aria-hidden="true">#</a> 属性</h3><p>Session是一种在服务器端存储和跟踪用户会话状态的机制。Session具有以下属性：</p><ul><li><strong>存储位置</strong>：Session数据存储在服务器端的内存或持久化介质中，而不是存储在客户端。</li><li><strong>会话ID</strong>：每个会话都有一个唯一的会话ID，用于标识该会话。会话ID通常通过Cookie或URL参数发送给客户端，并在后续请求中用于识别会话。</li><li><strong>过期时间</strong>：Session可以设置过期时间，以控制会话的有效期。过期时间可以是一个具体的日期和时间，也可以是一个从会话创建时开始的时间段。</li><li><strong>安全性</strong>：Session的会话ID需要进行保护，以防止会话劫持和其他安全问题。</li></ul><h3 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1" aria-hidden="true">#</a> 应用场景</h3><p>Session在Web开发中有多种应用场景，包括：</p><ul><li><strong>用户身份验证</strong>：Session用于存储用户的身份验证状态，以便在用户访问需要验证的资源时进行验证。</li><li><strong>购物车</strong>：Session用于存储用户的购物车内容，以便在用户进行结账或继续购物时保持购物车状态。</li><li><strong>个性化设置</strong>：Session可以用于存储用户的个性化首选项，例如语言偏好、主题设置等。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express-session&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&quot;mysecret&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">cookie</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">sameSite</span><span class="token operator">:</span> <span class="token string">&quot;strict&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">httpOnly</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Session is set.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/profile&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome, &quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server is running on port 3000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-什么是sessionstorage" tabindex="-1"><a class="header-anchor" href="#_3-什么是sessionstorage" aria-hidden="true">#</a> 3. 什么是SessionStorage？</h2><h3 id="属性-2" tabindex="-1"><a class="header-anchor" href="#属性-2" aria-hidden="true">#</a> 属性</h3><p>SessionStorage是一种在客户端存储临时数据的机制。SessionStorage具有以下属性：</p><ul><li><strong>存储位置</strong>：SessionStorage数据存储在客户端的内存中，与当前会话关联。</li><li><strong>会话范围</strong>：SessionStorage数据仅在浏览器会话期间保留，当用户关闭标签页或浏览器时数据将被清除。</li><li><strong>域和协议限制</strong>：SessionStorage数据只能在同一域和协议下访问。</li></ul><h3 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2" aria-hidden="true">#</a> 应用场景</h3><p>SessionStorage在Web开发中有多种应用场景，包括：</p><ul><li><strong>临时数据存储</strong>：SessionStorage可用于在页面之间传递临时数据，例如表单数据、临时状态等。</li><li><strong>表单数据保存</strong>：SessionStorage可用于保存用户填写的表单数据，以便在刷新页面或返回页面时恢复数据，防止数据丢失。</li><li><strong>单页应用状态管理</strong>：在单页应用中，可以使用SessionStorage来存储和管理应用的状态，例如当前选中的标签、展开/收起的面板等。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置SessionStorage</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取SessionStorage</span>
<span class="token keyword">const</span> username <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-什么是localstorage" tabindex="-1"><a class="header-anchor" href="#_4-什么是localstorage" aria-hidden="true">#</a> 4. 什么是LocalStorage？</h2><h3 id="属性-3" tabindex="-1"><a class="header-anchor" href="#属性-3" aria-hidden="true">#</a> 属性</h3><p>LocalStorage是一种在客户端存储持久性数据的机制。LocalStorage具有以下属性：</p><ul><li><strong>存储位置</strong>：LocalStorage数据存储在客户端的持久化介质中，与浏览器相关联。</li><li><strong>持久性</strong>：LocalStorage数据不受会话结束或浏览器关闭的影响，会一直保留在浏览器中，除非被显式删除。</li><li><strong>域和协议限制</strong>：LocalStorage数据只能在同一域和协议下访问。</li></ul><h3 id="应用场景-3" tabindex="-1"><a class="header-anchor" href="#应用场景-3" aria-hidden="true">#</a> 应用场景</h3><p>LocalStorage在Web开发中有多种应用场景，包括：</p><ul><li><strong>本地数据存储</strong>：LocalStorage可用于在客户端存储持久性数据，如用户首选项、缓存的数据等。</li><li><strong>离线应用</strong>：LocalStorage可用于存储离线应用所需的资源，例如HTML、CSS和JavaScript文件，以实现离线访问能力。</li><li><strong>单页应用状态管理</strong>：在单页应用中，可以使用LocalStorage来存储和管理应用的状态，例如当前选中的标签、展开/收起的面板等。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置LocalStorage</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取LocalStorage</span>
<span class="token keyword">const</span> username <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-cookie-vs-session-vs-sessionstorage-vs-localstorage" tabindex="-1"><a class="header-anchor" href="#_5-cookie-vs-session-vs-sessionstorage-vs-localstorage" aria-hidden="true">#</a> 5. Cookie vs. Session vs. SessionStorage vs. LocalStorage</h2><table><thead><tr><th></th><th>属性</th><th>存储位置</th><th>生命周期</th><th>安全性</th><th>大小限制</th><th>跨域限制</th></tr></thead><tbody><tr><td>Cookie</td><td>键值对</td><td>客户端</td><td>可配置</td><td>受同源策略限制</td><td>约4KB</td><td>是</td></tr><tr><td>Session</td><td>会话ID和服务器端存储</td><td>服务器端</td><td>可配置</td><td>较高（会话ID保护）</td><td>无</td><td>否</td></tr><tr><td>SessionStorage</td><td>键值对</td><td>客户端</td><td>浏览器会话期间</td><td>同源</td><td>约5MB</td><td>否</td></tr><tr><td>LocalStorage</td><td>键值对</td><td>客户端</td><td>永久（需显式删除）</td><td>同源</td><td>约5MB</td><td>否</td></tr></tbody></table><p>Cookie、Session、SessionStorage和LocalStorage都是常见的Web存储解决方案，每种方案都有其适用的场景和特点。</p><ul><li>使用Cookie可以在客户端存储数据，适用于存储会话标识符、用户首选项和追踪用户行为等场景。</li><li>Session用于在服务器端存储和管理用户的会话状态，适用于身份验证、购物车和个性化设置等场景。</li><li>SessionStorage用于在浏览器会话期间存储临时数据，适用于传递数据、保存表单数据和单页应用状态管理等场景。</li><li>LocalStorage用于在客户端存储持久性数据，适用于本地数据存储、离线应用和单页应用状态管理等场景。</li></ul><p>根据具体的需求和场景，选择合适的存储方案可以更好地管理和使用数据。</p><h2 id="_6-参考资料" tabindex="-1"><a class="header-anchor" href="#_6-参考资料" aria-hidden="true">#</a> 6. 参考资料</h2>`,42),u={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",target:"_blank",rel:"noopener noreferrer"},d={href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.w3schools.com/js/js_cookies.asp",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.w3schools.com/html/html5_webstorage.asp",target:"_blank",rel:"noopener noreferrer"};function m(b,S){const s=o("ExternalLinkIcon");return p(),i("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[a("MDN Web Docs - HTTP Cookies"),t(s)])]),n("li",null,[n("a",d,[a("MDN Web Docs - Web Storage API"),t(s)])]),n("li",null,[n("a",k,[a("MDN Web Docs - SameSite attribute"),t(s)])]),n("li",null,[n("a",g,[a("MDN Web Docs - HttpOnly attribute"),t(s)])]),n("li",null,[n("a",h,[a("W3Schools - JavaScript Cookies"),t(s)])]),n("li",null,[n("a",v,[a("W3Schools - HTML Web Storage Objects"),t(s)])])])])}const f=e(l,[["render",m],["__file","详解前端数据存储.html.vue"]]);export{f as default};
