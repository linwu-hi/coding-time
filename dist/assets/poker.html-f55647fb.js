import{_ as o,r as e,o as c,c as l,a as n,b as s,e as p,d as t}from"./app-d7df62a4.js";const u="/assets/3-8e90cd48.png",i="/assets/4-e2333c5e.png",k="/assets/5-1dd7c848.png",r={},d=n("h1",{id:"ts实战之扑克牌排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ts实战之扑克牌排序","aria-hidden":"true"},"#"),s(" TS实战之扑克牌排序")],-1),m={href:"https://code.juejin.cn/pen/7254739493366333499",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[s("我们用"),n("code",null,"ts实现扑克牌排序问题"),s("，首先，我们将定义所需的数据类型，然后专注于模式查找算法，该算法有几个有趣的要点。")],-1),b=n("h2",{id:"类型和转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类型和转换","aria-hidden":"true"},"#"),s(" 类型和转换")],-1),g=n("code",null,"Rank",-1),y=n("code",null,"Suit",-1),f={href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Rank</span> <span class="token operator">=</span>
 <span class="token operator">|</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;3&#39;</span>  <span class="token operator">|</span> <span class="token string">&#39;4&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;5&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;6&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;7&#39;</span>
 <span class="token operator">|</span> <span class="token string">&#39;8&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;9&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;10&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;J&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;Q&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;K&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">Suit</span> <span class="token operator">=</span> <span class="token string">&#39;♥&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;♦&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;♠&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;♣&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将使用<code>Card</code>对象进行处理，将rank和suit转换为数字。卡片将用从1（Ace）到13（King）的值表示，花色从1（红心）到4（梅花）。<code>rankToNumber()</code>和<code>suitToNumber()</code>函数处理从<code>Rank</code>和<code>Suit</code>值到数字的转换。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Card</span> <span class="token operator">=</span> <span class="token punctuation">{</span> rank<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> suit<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> rankToNumber <span class="token operator">=</span> <span class="token punctuation">(</span>rank<span class="token operator">:</span> Rank<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span>
 rank <span class="token operator">===</span> <span class="token string">&#39;A&#39;</span>  <span class="token operator">?</span> <span class="token number">1</span>
   <span class="token operator">:</span> rank <span class="token operator">===</span> <span class="token string">&#39;J&#39;</span> <span class="token operator">?</span> <span class="token number">11</span>
   <span class="token operator">:</span> rank <span class="token operator">===</span> <span class="token string">&#39;Q&#39;</span> <span class="token operator">?</span> <span class="token number">12</span>
   <span class="token operator">:</span> rank <span class="token operator">===</span> <span class="token string">&#39;K&#39;</span> <span class="token operator">?</span> <span class="token number">13</span>
   <span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>rank<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> suitToNumber <span class="token operator">=</span> <span class="token punctuation">(</span>suit<span class="token operator">:</span> Suit<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span>
 suit <span class="token operator">===</span> <span class="token string">&#39;♥&#39;</span> <span class="token operator">?</span> <span class="token number">1</span>
   <span class="token operator">:</span> suit <span class="token operator">===</span> <span class="token string">&#39;♦&#39;</span> <span class="token operator">?</span> <span class="token number">2</span>
   <span class="token operator">:</span> suit <span class="token operator">===</span> <span class="token string">&#39;♠&#39;</span> <span class="token operator">?</span> <span class="token number">3</span>
   <span class="token operator">:</span> <span class="token comment">/* suit === &quot;♣&quot; */</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="-" tabindex="0" loading="lazy"><figcaption>-</figcaption></figure>',4),w={href:"https://www.typescriptlang.org/docs/handbook/enums.html",target:"_blank",rel:"noopener noreferrer"},B=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Hand <span class="token punctuation">{</span>
 HighCard<span class="token punctuation">,</span> <span class="token comment">// 高牌 </span>
 OnePair<span class="token punctuation">,</span> <span class="token comment">//  一对</span>
 TwoPairs<span class="token punctuation">,</span> <span class="token comment">// 两对</span>
 ThreeOfAKind<span class="token punctuation">,</span> <span class="token comment">// 三条</span>
 Straight<span class="token punctuation">,</span> <span class="token comment">// 顺子</span>
 Flush<span class="token punctuation">,</span> <span class="token comment">// 同花</span>
 FullHouse<span class="token punctuation">,</span> <span class="token comment">//  葫芦</span>
 FourOfAKind<span class="token punctuation">,</span> <span class="token comment">// 四条</span>
 StraightFlush<span class="token punctuation">,</span> <span class="token comment">//  同花顺</span>
 RoyalFlush <span class="token comment">//皇家同花顺</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="我们有什么手牌" tabindex="-1"><a class="header-anchor" href="#我们有什么手牌" aria-hidden="true">#</a> 我们有什么手牌？</h2><p>让我们首先定义我们将要构建的<code>handRank()</code>函数。我们的函数将接收一个包含<code>五张牌的元组</code>，并返回一个<code>Hand</code>结果。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">handRank</span><span class="token punctuation">(</span>
 cardStrings<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Hand <span class="token punctuation">{</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于处理字符串比我们需要的要困难，我们将把牌字符串转换为具有数字<code>rank</code>和<code>suit</code>值的<code>Card</code>对象，以便更容易编写。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token keyword">const</span> cards<span class="token operator">:</span> Card<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> cardStrings<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
   rank<span class="token operator">:</span> <span class="token function">rankToNumber</span><span class="token punctuation">(</span>
     str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Rank
   <span class="token punctuation">)</span><span class="token punctuation">,</span>
   suit<span class="token operator">:</span> <span class="token function">suitToNumber</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Suit<span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token comment">// 继续...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="-" tabindex="0" loading="lazy"><figcaption>-</figcaption></figure><p>确定玩家手牌的价值的关键在于知道每个等级的牌有多少张，以及我们有多少计数。例如，如果我们有三张J和两张K，J的计数为3，K的计数为2。然后，知道我们有一个计数为三和一个计数为两的计数，我们可以确定我们有一个葫芦。另一个例子：如果我们有两个Q，两个A和一个5，我们会得到两个计数为两和一个计数为一；我们有两对。</p><p>生成计数很简单。我们希望A的计数在<code>countByRank[1]</code>处，因此我们不会使用<code>countByRank</code>数组的初始位置。类似地，花色的计数将位于<code>countBySuit[1]</code>到<code>countBySuit[4]</code>之间，因此我们也不会使用该数组的初始位置。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token comment">// ...继续</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token keyword">const</span> countBySuit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> countByRank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> countBySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 cards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>card<span class="token operator">:</span> Card<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   countByRank<span class="token punctuation">[</span>card<span class="token punctuation">.</span>rank<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
   countBySuit<span class="token punctuation">[</span>card<span class="token punctuation">.</span>suit<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 countByRank<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
   <span class="token punctuation">(</span>count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">++</span>
 <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token comment">// 继续...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不要忘记A可能位于顺子的开头（A-2-3-4-5）或结尾（10-J-Q-K-A）。我们可以通过在K之后复制Aces计数来处理这个问题。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token comment">// ...继续</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 countByRank<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> countByRank<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token comment">// 继续...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以开始识别手牌了。我们只需要查看按等级计数即可识别几种手牌：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token comment">// ...继续</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>count

BySet<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>FourOfAKind<span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>FullHouse<span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>ThreeOfAKind<span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>TwoPairs<span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>OnePair<span class="token punctuation">;</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token comment">// 继续...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),S=n("code",null,"countBySet[4] === 1",-1),_=n("code",null,"countBySet[1] === 1",-1),R={href:"https://en.wikipedia.org/wiki/Defensive_programming",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>上面的情况包括了所有某个等级出现多次的可能性。我们必须处理其他情况，包括顺子、同花和“高牌”。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token comment">// ...继续</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>countByRank<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;11111&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token keyword">return</span> <span class="token operator">!</span>countBySuit<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
       <span class="token operator">?</span> Hand<span class="token punctuation">.</span>Straight
       <span class="token operator">:</span> countByRank<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;11111&#39;</span>
       <span class="token operator">?</span> Hand<span class="token punctuation">.</span>RoyalFlush
       <span class="token operator">:</span> Hand<span class="token punctuation">.</span>StraightFlush<span class="token punctuation">;</span>
   <span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> countBySuit<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
       <span class="token operator">?</span> Hand<span class="token punctuation">.</span>Flush
       <span class="token operator">:</span> Hand<span class="token punctuation">.</span>HighCard<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
     <span class="token string">&#39;Unknown hand! This cannot happen! Bad logic!&#39;</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们再次进行防御性编程；即使我们知道我们有五个不同的等级，我们也确保逻辑工作良好，甚至在出现问题时抛出一个<code>throw</code>。</p><p>我们如何测试顺子？我们应该有五个连续的等级。如果我们查看<code>countByRank</code>数组，它应该有五个连续的1，所以通过执行<code>countByRank.join()</code>并检查生成的字符串是否包含<code>11111</code>，我们可以确定是顺子。</p><figure><img src="`+k+`" alt="-" tabindex="0" loading="lazy"><figcaption>-</figcaption></figure><p>我们必须区分几种情况：</p><ul><li>如果没有五张相同花色的牌，那么它是一个普通的顺子</li><li>如果所有牌都是相同花色，如果顺子以一张A结束，则为皇家同花顺</li><li>如果所有牌都是相同花色，但我们不以A结束，那么我们有一个同花顺</li></ul><p>如果我们没有顺子，只有两种可能性：</p><ul><li>如果所有牌都是相同花色，我们有一个同花</li><li>如果不是所有牌都是相同花色，我们有一个“高牌”</li></ul><p>完整的函数如下所示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">handRank</span><span class="token punctuation">(</span>
 cardStrings<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Hand <span class="token punctuation">{</span>
 <span class="token keyword">const</span> cards<span class="token operator">:</span> Card<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> cardStrings<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
   rank<span class="token operator">:</span> <span class="token function">rankToNumber</span><span class="token punctuation">(</span>
     str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Rank
   <span class="token punctuation">)</span><span class="token punctuation">,</span>
   suit<span class="token operator">:</span> <span class="token function">suitToNumber</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Suit<span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// We won&#39;t use the [0] place in the following arrays</span>
 <span class="token keyword">const</span> countBySuit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> countByRank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> countBySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 cards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>card<span class="token operator">:</span> Card<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   countByRank<span class="token punctuation">[</span>card<span class="token punctuation">.</span>rank<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
   countBySuit<span class="token punctuation">[</span>card<span class="token punctuation">.</span>suit<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 countByRank<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
   <span class="token punctuation">(</span>count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">++</span>
 <span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// count the A also as a 14, for straights</span>
 countByRank<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> countByRank<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

 <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>FourOfAKind<span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>FullHouse<span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>ThreeOfAKind<span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>TwoPairs<span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> countBySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>OnePair<span class="token punctuation">;</span>
 <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countBySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>countByRank<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;11111&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token keyword">return</span> <span class="token operator">!</span>countBySuit<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
       <span class="token operator">?</span> Hand<span class="token punctuation">.</span>Straight
       <span class="token operator">:</span> countByRank<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;11111&#39;</span>
       <span class="token operator">?</span> Hand<span class="token punctuation">.</span>RoyalFlush
       <span class="token operator">:</span> Hand<span class="token punctuation">.</span>StraightFlush<span class="token punctuation">;</span>
   <span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token comment">/* !countByRank.join(&quot;&quot;).includes(&quot;11111&quot;) */</span>
     <span class="token keyword">return</span> countBySuit<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
       <span class="token operator">?</span> Hand<span class="token punctuation">.</span>Flush
       <span class="token operator">:</span> Hand<span class="token punctuation">.</span>HighCard<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
     <span class="token string">&#39;Unknown hand! This cannot happen! Bad logic!&#39;</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8♣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;6♠&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8♣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♠&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3♣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♠&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8♣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♠&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2♦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A♣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4♠&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;J♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;10♦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A♣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Q♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;K♠&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4♦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;7♣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;6♠&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;9♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;6♥&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3♣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3♠&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3♦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3♣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3♠&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;7♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;6♥&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handRank</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;K♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Q♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;10♥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;J♥&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),H={href:"https://code.juejin.cn/pen/7254739493366333499",target:"_blank",rel:"noopener noreferrer"};function x(T,F){const a=e("ExternalLinkIcon");return c(),l("div",null,[d,n("p",null,[n("a",m,[s("在线运行"),p(a)])]),v,b,n("p",null,[s("定义一些我们需要的类型。"),g,s("和"),y,s("是明显的"),n("a",f,[s("联合类型"),p(a)]),s("。")]),h,n("p",null,[s("这些类型用于内部工作；我们还必须定义手牌检测算法的结果类型。我们需要一个"),n("a",w,[s("枚举"),p(a)]),s('类型来表示手牌的可能值。这些值按照从最低（"高牌"）到最高（"皇家同花顺"）的顺序排列。')]),B,n("p",null,[s("例如，如果有四张相同等级的牌，我们知道玩家将获得“四条”。可能会问：如果"),S,s("，为什么还要测试"),_,s("？如果四张牌的等级相同，应该只有一张其他牌，对吗？答案是"),n("a",R,[s("“防御性编程”"),p(a)]),s("——在开发代码时，有时会出现错误，通过在测试中更加具体，有助于排查错误。")]),A,n("p",null,[n("a",H,[s("在线运行"),p(a)])])])}const N=o(r,[["render",x],["__file","poker.html.vue"]]);export{N as default};
