import{_ as n,o as s,c as a,d as e}from"./app-d7df62a4.js";const t={},o=e(`<h1 id="救生艇" tabindex="-1"><a class="header-anchor" href="#救生艇" aria-hidden="true">#</a> 救生艇</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>有一些人需要乘坐救生艇从一个岛屿到另一个岛屿。每个人的体重不同，而救生艇有一定的限重。每艘救生艇最多可同时乘坐两人，但条件是这两人的体重之和不超过限重。求解最少需要多少艘救生艇才能将所有人安全送到目的地。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了解决救生艇的问题，我们可以使用贪心算法来解决。</p><ol><li>首先对人员的体重数组 <code>people</code> 进行排序，从小到大。</li><li>使用两个指针 <code>left</code> 和 <code>right</code> 分别指向体重数组的起始位置和末尾位置。</li><li>初始化 <code>count</code> 变量为 0，表示救生艇的数量。</li><li>在循环中，比较 <code>left</code> 和 <code>right</code> 位置的人员体重之和： <ul><li>如果体重之和不超过限重，表示可以安排这两个人乘坐一艘救生艇，将 <code>left</code> 向右移动一位，将 <code>right</code> 向左移动一位，同时 <code>count</code> 加一。</li><li>如果体重之和超过限重，表示无法安排这两个人乘坐同一艘救生艇，只能让 <code>right</code> 的人单独乘坐一艘救生艇，将 <code>right</code> 向左移动一位，同时 <code>count</code> 加一。</li></ul></li><li>循环结束后，返回 <code>count</code> 作为最少需要的救生艇数量。</li></ol><p>下面是使用贪心算法解决救生艇问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">numRescueBoats</span><span class="token punctuation">(</span><span class="token parameter">people<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  people<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> people<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> people<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left<span class="token operator">++</span><span class="token punctuation">;</span>
      right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),p=[o];function c(l,i){return s(),a("div",null,p)}const r=n(t,[["render",c],["__file","boats-to-save-people.html.vue"]]);export{r as default};
