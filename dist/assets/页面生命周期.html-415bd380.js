import{_ as o,r as t,o as d,c as l,a,b as e,e as s,d as i}from"./app-2477bd15.js";const c={},r=i(`<h1 id="页面生命周期-domcontentloaded-load-beforeunload-unload" tabindex="-1"><a class="header-anchor" href="#页面生命周期-domcontentloaded-load-beforeunload-unload" aria-hidden="true">#</a> 页面生命周期: DOMContentLoaded, load, beforeunload, unload</h1><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>在 Web 开发中，了解页面生命周期是非常重要的。页面生命周期定义了页面从加载到卸载的整个过程，包括各种事件和阶段。在本文中，我们将详细介绍四个关键事件：DOMContentLoaded、load、beforeunload 和 unload。我们将探讨这些事件的属性、API、应用场景，并提供一些代码示例和参考资料。</p><h2 id="_1-domcontentloaded" tabindex="-1"><a class="header-anchor" href="#_1-domcontentloaded" aria-hidden="true">#</a> 1. DOMContentLoaded</h2><h3 id="_1-1-属性" tabindex="-1"><a class="header-anchor" href="#_1-1-属性" aria-hidden="true">#</a> 1.1 属性</h3><ul><li><code>type</code>：事件类型，值为 <code>&quot;DOMContentLoaded&quot;</code></li><li><code>bubbles</code>：布尔值，指示事件是否会冒泡，默认为 <code>false</code></li><li><code>cancelable</code>：布尔值，指示事件是否可以被取消，默认为 <code>false</code></li><li><code>target</code>：事件的目标对象，即触发事件的元素</li></ul><h3 id="_1-2-api" tabindex="-1"><a class="header-anchor" href="#_1-2-api" aria-hidden="true">#</a> 1.2 API</h3><ul><li><code>EventTarget.addEventListener()</code>：用于注册事件监听器，以便在 DOMContentLoaded 事件触发时执行相应的处理函数。</li></ul><h3 id="_1-3-应用场景" tabindex="-1"><a class="header-anchor" href="#_1-3-应用场景" aria-hidden="true">#</a> 1.3 应用场景</h3><p>DOMContentLoaded 事件在页面的 HTML 和 DOM 树加载完成后触发，但在所有外部资源（如图像、样式表、脚本等）加载完成之前。这使得我们可以在 DOM 加载完成后执行一些操作，例如初始化页面元素、注册事件监听器、执行一些初始的 JavaScript 逻辑等。</p><p>常见的应用场景包括：</p><ul><li>初始化页面元素</li><li>注册事件监听器</li><li>发送初始的 AJAX 请求</li><li>执行一些初始的 JavaScript 逻辑</li></ul><h3 id="_1-4-示例代码" tabindex="-1"><a class="header-anchor" href="#_1-4-示例代码" aria-hidden="true">#</a> 1.4 示例代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// DOMContentLoaded 事件触发后执行的逻辑</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded event triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用 <code>addEventListener</code> 方法注册了一个 DOMContentLoaded 事件监听器。当 DOMContentLoaded 事件触发时，控制台将输出 <code>&#39;DOMContentLoaded event triggered&#39;</code>。</p><h2 id="_2-load" tabindex="-1"><a class="header-anchor" href="#_2-load" aria-hidden="true">#</a> 2. load</h2><h3 id="_2-1-属性" tabindex="-1"><a class="header-anchor" href="#_2-1-属性" aria-hidden="true">#</a> 2.1 属性</h3><ul><li><code>type</code>：事件类型，值为 <code>&quot;load&quot;</code></li><li><code>bubbles</code>：布尔值，指示事件是否会冒泡，默认为 <code>false</code></li><li><code>cancelable</code>：布尔值，指示事件是否可以被取消，默认为 <code>false</code></li><li><code>target</code>：事件的目标对象，即触发事件的元素</li></ul><h3 id="_2-2-api" tabindex="-1"><a class="header-anchor" href="#_2-2-api" aria-hidden="true">#</a> 2.2 API</h3><ul><li><code>EventTarget.addEventListener()</code>：用于注册事件监听器，以便在 load 事件触发时执行相应的处理函数。</li></ul><h3 id="_2-3-应用场景" tabindex="-1"><a class="header-anchor" href="#_2-3-应用场景" aria-hidden="true">#</a> 2.3 应用场景</h3><p>load 事件在整个页面及其所有外部资源（如图像、样式表、脚本等）加载完成后触发。这意味着页面的所有内容已经可用，并且可以执行与页面渲染和交互相关的操作。</p><p>常见的应用场景包括：</p><ul><li>执行一些需要页面完全加载后才能进行的操作</li><li>初始化和配置第三方库和插件</li><li>启动动画或其他视觉效果</li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><p>2.4 示例代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// load 事件触发后执行的逻辑</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;load event triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用 <code>addEventListener</code> 方法注册了一个 load 事件监听器。当 load 事件触发时，控制台将输出 <code>&#39;load event triggered&#39;</code>。</p><h2 id="_3-beforeunload" tabindex="-1"><a class="header-anchor" href="#_3-beforeunload" aria-hidden="true">#</a> 3. beforeunload</h2><h3 id="_3-1-属性" tabindex="-1"><a class="header-anchor" href="#_3-1-属性" aria-hidden="true">#</a> 3.1 属性</h3><ul><li><code>type</code>：事件类型，值为 <code>&quot;beforeunload&quot;</code></li><li><code>bubbles</code>：布尔值，指示事件是否会冒泡，默认为 <code>false</code></li><li><code>cancelable</code>：布尔值，指示事件是否可以被取消，默认为 <code>true</code></li><li><code>target</code>：事件的目标对象，即触发事件的元素</li></ul><h3 id="_3-2-api" tabindex="-1"><a class="header-anchor" href="#_3-2-api" aria-hidden="true">#</a> 3.2 API</h3><ul><li><code>EventTarget.addEventListener()</code>：用于注册事件监听器，以便在 beforeunload 事件触发时执行相应的处理函数。</li><li><code>Event.preventDefault()</code>：用于阻止默认的 beforeunload 行为，例如显示浏览器默认的退出提示框。</li></ul><h3 id="_3-3-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-3-应用场景" aria-hidden="true">#</a> 3.3 应用场景</h3><p>beforeunload 事件在页面即将被卸载（关闭、刷新、导航到其他页面等）之前触发。它通常用于询问用户是否确定离开当前页面，并可以在事件处理函数中执行一些清理操作。</p><p>常见的应用场景包括：</p><ul><li>提示用户保存未保存的数据或离开前的确认提示</li><li>执行清理操作，如取消未完成的 AJAX 请求、释放资源等</li></ul><h3 id="_3-4-示例代码" tabindex="-1"><a class="header-anchor" href="#_3-4-示例代码" aria-hidden="true">#</a> 3.4 示例代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// beforeunload 事件触发时执行的逻辑</span>
  <span class="token comment">// 可以在这里提示用户保存未保存的数据或离开前的确认提示</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻止默认的 beforeunload 行为</span>
  event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Chrome 需要设置 returnValue 属性</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用 <code>addEventListener</code> 方法注册了一个 beforeunload 事件监听器。在事件处理函数中，我们可以执行一些提示用户保存数据或离开前的确认逻辑。通过调用 <code>preventDefault</code> 方法，我们阻止了默认的 beforeunload 行为，并通过设置 <code>returnValue</code> 属性（在某些浏览器中需要设置）为空字符串来确保提示框的显示。</p><h2 id="_4-unload" tabindex="-1"><a class="header-anchor" href="#_4-unload" aria-hidden="true">#</a> 4. unload</h2><h3 id="_4-1-属性" tabindex="-1"><a class="header-anchor" href="#_4-1-属性" aria-hidden="true">#</a> 4.1 属性</h3><ul><li><code>type</code>：事件类型，值为 <code>&quot;unload&quot;</code></li><li><code>bubbles</code>：布尔值，指示事件是否会冒泡，默认为 <code>false</code></li><li><code>cancelable</code>：布尔值，指示事件是否可以被取消，默认为 <code>false</code></li><li><code>target</code>：事件的目标对象，即触发事件的元素</li></ul><h3 id="_4-2-api" tabindex="-1"><a class="header-anchor" href="#_4-2-api" aria-hidden="true">#</a> 4.2 API</h3><ul><li><code>EventTarget.addEventListener()</code>：用于注册事件监听器，以便在 unload 事件触发时执行相应的处理函数。</li></ul><h3 id="_4-3-应用场景" tabindex="-1"><a class="header-anchor" href="#_4-3-应用场景" aria-hidden="true">#</a> 4.3 应用场景</h3><p>unload 事件在页面即将被卸载（关闭、刷新、导航到其他页面等）时触发。它可以用于执行一些清理操作，如释放资源、取消未完成的请求等。</p><p>常见的应用场景包括：</p><ul><li>释放页面所使用的资源，如清除定时器、取消事件监听器等</li><li>发送最后的统计数据或日志</li></ul><h3 id="_4-4-示例代码" tabindex="-1"><a class="header-anchor" href="#_4-4-示例代码" aria-hidden="true">#</a> 4.4 示例代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;unload&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// unload 事件触发后执行的逻辑</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;unload event triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用 <code>addEventListener</code> 方法注册了一个 unload 事件监听器。当 unload 事件触发时，控制台将输出 <code>&#39;unload event triggered&#39;</code>。</p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><p>页面生命周期的四个重要事件：DOMContentLoaded、load、beforeunload 和 unload，定义了页面从加载到卸载的不同阶段。这些事件可以帮助我们在合适的时机执行相关的操作，提供更好的用户体验和数据处理。</p><ul><li>DOMContentLoaded 事件在 HTML 和 DOM 树加载完成后触发，适用于执行与 DOM 相关的初始化操作。</li><li>load 事件在整个页面及其外部资源加载完成后触发，适用于执行与页面渲染和交互相关的操作。</li><li>beforeunload 事件在页面即将被卸载之前触发，适用于询问用户是否确定离开页面或执行一些清理操作。</li><li>unload 事件在页面被卸载后触发，适用于执行最后的清理操作。</li></ul><p>了解页面生命周期事件及其应用场景对于优化页面加载和交互体验非常重要。通过合理利用这些事件，我们可以在适当的时机执行相关的逻辑，提供更好的用户交互和数据处理。</p><h2 id="_6-参考资料" tabindex="-1"><a class="header-anchor" href="#_6-参考资料" aria-hidden="true">#</a> 6. 参考资料</h2>`,57),p={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event",target:"_blank",rel:"noopener noreferrer"},u={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event",target:"_blank",rel:"noopener noreferrer"};function b(k,f){const n=t("ExternalLinkIcon");return d(),l("div",null,[r,a("ul",null,[a("li",null,[a("a",p,[e("MDN Web Docs - DOMContentLoaded"),s(n)])]),a("li",null,[a("a",u,[e("MDN Web Docs - load"),s(n)])]),a("li",null,[a("a",h,[e("MDN Web Docs - beforeunload"),s(n)])]),a("li",null,[a("a",v,[e("MDN Web Docs - unload"),s(n)])])])])}const m=o(c,[["render",b],["__file","页面生命周期.html.vue"]]);export{m as default};
