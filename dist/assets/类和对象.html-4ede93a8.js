import{_ as n,o as s,c as a,d as e}from"./app-2477bd15.js";const t={},p=e(`<h1 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象" aria-hidden="true">#</a> 类和对象</h1><h2 id="一、引言" tabindex="-1"><a class="header-anchor" href="#一、引言" aria-hidden="true">#</a> <strong>一、引言</strong></h2><p>面向对象编程（Object Oriented Programming，简称OOP）是一种编程范型，它使用 &quot;对象&quot;：包含数据字段（属性）和在对象上执行操作的方法。这是一种设计和结构化代码的方式，允许我们创建复杂的应用程序，使用基本代码构建并易于理解和维护。</p><p>Dart 作为一种面向对象的类定义语言，使用混合的继承模式：即，Dart 中的类只能有一个超类，但可以实现多个接口。类定义的语法非常接近于 C-style 的语言（如 Java、C++ 和 JavaScript），这使得大多数开发者可以快速理解和学习 Dart。</p><h2 id="二、dart中的类和对象" tabindex="-1"><a class="header-anchor" href="#二、dart中的类和对象" aria-hidden="true">#</a> <strong>二、Dart中的类和对象</strong></h2><h2 id="类的定义" tabindex="-1"><a class="header-anchor" href="#类的定义" aria-hidden="true">#</a> <strong>类的定义</strong></h2><p>在 Dart 中，我们可以通过 <code>class</code> 关键字来定义一个类。类是一种复合的数据类型，即它包含方法（函数）和变量（称为&quot;属性&quot;）。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  int age<span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello, my name is </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">, I am </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了一个名为 <code>Person</code> 的类，它有两个属性 <code>name</code> 和 <code>age</code>，还有一个方法 <code>sayHello</code>。</p><h2 id="创建对象" tabindex="-1"><a class="header-anchor" href="#创建对象" aria-hidden="true">#</a> <strong>创建对象</strong></h2><p>创建类的实例（也就是对象），我们可以使用 <code>new</code> 关键字，然后调用类的构造函数。在 Dart 2 中，<code>new</code> 关键字是可选的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Alice&#39;</span></span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="访问属性和方法" tabindex="-1"><a class="header-anchor" href="#访问属性和方法" aria-hidden="true">#</a> <strong>访问属性和方法</strong></h2><p>我们可以使用 <code>.</code> 符号来访问对象的属性和方法：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 Alice</span>
person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 Hello, my name is Alice, I am 20 years old.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> <strong>构造函数</strong></h2><p>在 Dart 中，构造函数的名称与类的名称相同，我们可以在构造函数中初始化对象的属性：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  int age<span class="token punctuation">;</span>

  <span class="token comment">// 这是一个构造函数</span>
  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> int age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello, my name is </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">, I am </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Alice&#39;</span></span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="this关键字的使用" tabindex="-1"><a class="header-anchor" href="#this关键字的使用" aria-hidden="true">#</a> <strong>this关键字的使用</strong></h2><p>在 Dart 中，<code>this</code> 关键字引用的是当前实例。我们可以在构造函数或其他方法中使用 <code>this</code> 关键字来访问当前对象的属性或方法。</p><h2 id="getter和setter方法" tabindex="-1"><a class="header-anchor" href="#getter和setter方法" aria-hidden="true">#</a> <strong>getter和setter方法</strong></h2><p>在 Dart 中，我们可以使用 getter 和 setter 方法来读取和写入对象的属性：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span>

 name<span class="token punctuation">;</span>
  int age<span class="token punctuation">;</span>

  <span class="token class-name">String</span> <span class="token keyword">get</span> greeting <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Hello, my name is </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">, I am </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old.&#39;</span></span><span class="token punctuation">;</span>
  
  <span class="token keyword">void</span> <span class="token keyword">set</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Alice&#39;</span></span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 Hello, my name is Alice, I am null years old.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="私有属性和方法" tabindex="-1"><a class="header-anchor" href="#私有属性和方法" aria-hidden="true">#</a> <strong>私有属性和方法</strong></h2><p>在 Dart 中，以 <code>_</code> 开头的属性和方法是私有的，不能在类的外部访问：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> _name<span class="token punctuation">;</span>
  int _age<span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">_privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>_name</code>、<code>_age</code> 和 <code>_privateMethod</code> 都是私有的，只能在 <code>Person</code> 类内部访问。</p>`,27),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","类和对象.html.vue"]]);export{d as default};
