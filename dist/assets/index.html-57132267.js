import{_ as e,r as o,o as p,c,a as n,b as a,e as t,d as l}from"./app-2477bd15.js";const i={},r=l(`<h1 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序" aria-hidden="true">#</a> 计数排序</h1><p>在计算机科学中，<strong>计数排序</strong>（Counting Sort）是一种根据键值为小整数的集合对对象进行排序的算法，也就是说，它是一种整数排序算法。它通过计算具有每个不同键值的对象的数量，并使用这些计数的算术运算来确定每个键值在输出序列中的位置。它的运行时间与项的数量和最大键值与最小键值之间的差异成线性关系，因此仅适用于键的变化不显著大于项的数量的直接使用情况。然而，它经常作为另一个排序算法（基数排序）的子程序使用，后者可以更有效地处理更大的键。</p><p>由于计数排序使用键值作为数组的索引，它不是一种比较排序，因此不适用于比较排序的下限 <code>Ω(n log n)</code>。桶排序可以用于与计数排序相同的任务，并且具有类似的时间复杂度分析；然而，与计数排序相比，桶排序需要使用链表、动态数组或大量预分配的内存来保存每个桶中的项目集，而计数排序则将每个桶中存储一个数字（项目的计数）。</p><p>计数排序在每个数组元素的数字范围非常小的情况下效果最好。</p><h2 id="算法步骤" tabindex="-1"><a class="header-anchor" href="#算法步骤" aria-hidden="true">#</a> 算法步骤</h2><p><strong>步骤一</strong></p><p>第一步是计算输入数组 <code>A</code> 的所有元素的计数。然后将结果存储在计数数组 <code>C</code> 中。 计数的方法如下图所示。</p><figure><img src="https://3.bp.blogspot.com/-jJchly1BkTc/WLGqCFDdvCI/AAAAAAAAAHA/luljAlz2ptMndIZNH0KLTTuQMNsfzDeFQCLcB/s1600/CSortUpdatedStepI.gif" alt="计数排序" tabindex="0" loading="lazy"><figcaption>计数排序</figcaption></figure><p><strong>步骤二</strong></p><p>第二步是计算在输入数组 <code>A</code> 中存在多少个元素小于或等于给定索引的值。 <code>Ci</code> = 输入数组中小于或等于 <code>i</code> 的元素的数量。</p><figure><img src="https://1.bp.blogspot.com/-1vFu-VIRa9Y/WLHGuZkdF3I/AAAAAAAAAHs/8jKu2dbQee4ap9xlVcNsILrclqw0UxAVACLcB/s1600/Step-II.png" alt="计数排序" tabindex="0" loading="lazy"><figcaption>计数排序</figcaption></figure><p><strong>步骤三</strong></p><p>在这一步中，我们根据步骤二中构建的计数数组 <code>C</code>，将输入数组 <code>A</code> 的元素放置在排序位置上。我们使用结果数组 <code>B</code> 来存储排序后的元素。这里我们将 <code>B</code> 的索引从零开始处理。</p><figure><img src="https://1.bp.blogspot.com/-xPqylngqASY/WLGq3p9n9vI/AAAAAAAAAHM/JHdtXAkJY8wYzDMBXxqarjmhpPhM0u8MACLcB/s1600/ResultArrayCS.gif" alt="计数排序" tabindex="0" loading="lazy"><figcaption>计数排序</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 确定数组的范围</span>
  <span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> range <span class="token operator">=</span> max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token comment">// 创建计数数组，并初始化为0</span>
  <span class="token keyword">const</span> countArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 统计每个元素出现的次数</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> countIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">;</span>
    countArray<span class="token punctuation">[</span>countIndex<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 根据计数数组重新排序原数组</span>
  <span class="token keyword">let</span> sortedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>countArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">[</span>sortedIndex<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> min<span class="token punctuation">;</span>
      sortedIndex<span class="token operator">++</span><span class="token punctuation">;</span>
      countArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度" aria-hidden="true">#</a> 复杂度</h2><table><thead><tr><th>名称</th><th style="text-align:center;">最佳情况</th><th style="text-align:center;">平均情况</th><th style="text-align:center;">最坏情况</th><th style="text-align:center;">内存</th><th style="text-align:center;">稳定性</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td><strong>计数排序</strong></td><td style="text-align:center;">n + r</td><td style="text-align:center;">n + r</td><td style="text-align:center;">n + r</td><td style="text-align:center;">n + r</td><td style="text-align:center;">是</td><td style="text-align:left;">r - 数组中的最大数</td></tr></tbody></table><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,18),u={href:"https://en.wikipedia.org/wiki/Counting_sort",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.youtube.com/watch?v=OKd534EWcdk&index=61&t=0s&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"},k={href:"https://efficientalgorithms.blogspot.com/2016/09/lenear-sorting-counting-sort.html",target:"_blank",rel:"noopener noreferrer"};function m(v,h){const s=o("ExternalLinkIcon");return p(),c("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[a("维基百科"),t(s)])]),n("li",null,[n("a",d,[a("YouTube"),t(s)])]),n("li",null,[n("a",k,[a("EfficientAlgorithms"),t(s)])])])])}const b=e(i,[["render",m],["__file","index.html.vue"]]);export{b as default};
