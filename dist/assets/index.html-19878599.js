import{_ as n,r as t,o as i,c as l,a as e,b as o,e as r,d}from"./app-2477bd15.js";const c={},s=d('<h1 id="bellman-ford-算法" tabindex="-1"><a class="header-anchor" href="#bellman-ford-算法" aria-hidden="true">#</a> Bellman-Ford 算法</h1><p>Bellman-Ford 算法是一种计算带权有向图中单个源顶点到其他所有顶点的最短路径的算法。相比于相同问题的 Dijkstra 算法，Bellman-Ford 算法更为灵活，因为它能够处理某些边权重为负数的图。</p><figure><img src="https://upload.wikimedia.org/wikipedia/commons/2/2e/Shortest_path_Dijkstra_vs_BellmanFord.gif" alt="Bellman-Ford" tabindex="0" loading="lazy"><figcaption>Bellman-Ford</figcaption></figure><h2 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度" aria-hidden="true">#</a> 复杂度</h2><p>最坏情况下的时间复杂度：<code>O(|V||E|)</code> 最佳情况下的时间复杂度：<code>O(|E|)</code> 最坏情况下的空间复杂度：<code>O(|V|)</code></p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',6),h={href:"https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.youtube.com/watch?v=obWXjtg0L64&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"};function m(p,f){const a=t("ExternalLinkIcon");return i(),l("div",null,[s,e("ul",null,[e("li",null,[e("a",h,[o("Wikipedia"),r(a)])]),e("li",null,[e("a",_,[o("YouTube 上的 Michael Sambol 视频"),r(a)])])])])}const g=n(c,[["render",m],["__file","index.html.vue"]]);export{g as default};
