import{_ as n,o as s,c as a,e as t}from"./app-0301958d.js";const p={},o=t(`<h1 id="雇用k名工人的最低成本" tabindex="-1"><a class="header-anchor" href="#雇用k名工人的最低成本" aria-hidden="true">#</a> 雇用K名工人的最低成本</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>有一组工人，每个工人的工作质量为 <code>quality[i]</code>，期望的最低工资为 <code>wage[i]</code>。现在需要雇佣 <code>K</code> 名工人来完成一项工作。其中，每名工人只能接受与其工作质量相同或更高的工资。求解需要满足工人数量为 <code>K</code> 的情况下，所需的最小总工资。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了解决最小成本雇佣工人的问题，我们可以使用贪心算法来解决。贪心算法的思路是优先选择工资效益最高的工人。</p><p>我们按照以下步骤进行解题：</p><ol><li>创建一个数组 <code>ratios[]</code>，用于存储每个工人的工资与工作质量的比率（<code>wage[i]/quality[i]</code>）。</li><li>将工人按照 <code>ratios[]</code> 的升序进行排序，以便能够从低比率到高比率依次选择工人。</li><li>创建一个最小堆 <code>pq</code>，用于维护当前选择的 <code>K</code> 名工人的最高工资。</li><li>初始化变量 <code>sumQuality</code> 为 0，用于累计当前选择的工人的工作质量之和。</li><li>遍历排序后的工人列表，对于每个工人： <ul><li>将其加入堆 <code>pq</code>。</li><li>将其工作质量添加到 <code>sumQuality</code>。</li><li>如果堆 <code>pq</code> 中的工人数量超过 <code>K</code>，则移除堆顶的工人（即最高工资的工人）。</li><li>如果堆 <code>pq</code> 中的工人数量等于 <code>K</code>，计算当前总工资 <code>currWage</code>，即当前选择的 <code>K</code> 名工人中的最高工资乘以 <code>sumQuality</code>。 <ul><li>如果 <code>currWage</code> 小于当前的最小总工资 <code>minWage</code>，更新 <code>minWage</code> 的值。</li></ul></li></ul></li><li>遍历结束后，<code>minWage</code> 就是所需的最小总工资。</li></ol><p>以下是使用贪心算法解决最小成本雇佣工人问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mincostToHireWorkers</span><span class="token punctuation">(</span><span class="token parameter">quality<span class="token punctuation">,</span> wage<span class="token punctuation">,</span> <span class="token constant">K</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> workers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> quality<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ratio <span class="token operator">=</span> wage<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> quality<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    workers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>quality<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> wage<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ratio<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  workers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> sumQuality <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> minWage <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MaxHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>currQuality<span class="token punctuation">,</span> currWage<span class="token punctuation">,</span> ratio<span class="token punctuation">]</span> <span class="token operator">=</span> workers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    pq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>currQuality<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sumQuality <span class="token operator">+=</span> currQuality<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sumQuality <span class="token operator">-=</span> pq<span class="token punctuation">.</span><span class="token function">extractMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> currWageSum <span class="token operator">=</span> sumQuality <span class="token operator">*</span> ratio<span class="token punctuation">;</span>
      minWage <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minWage<span class="token punctuation">,</span> currWageSum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> minWage<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","minimum-cost-to-hire-k-workers.html.vue"]]);export{r as default};
