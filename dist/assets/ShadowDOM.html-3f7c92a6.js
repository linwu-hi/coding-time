import{_ as o,r as e,o as p,c,a as n,b as a,e as t,d as l}from"./app-d7df62a4.js";const i={},u=l(`<h1 id="js-shadow-dom-创建封装的组件和样式隔离" tabindex="-1"><a class="header-anchor" href="#js-shadow-dom-创建封装的组件和样式隔离" aria-hidden="true">#</a> JS Shadow DOM：创建封装的组件和样式隔离</h1><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>在现代的 Web 开发中，组件化和样式隔离是非常重要的概念。为了解决这些问题，Web 标准引入了 Shadow DOM 技术。Shadow DOM 允许开发者创建封装的组件，并将组件的样式和行为隔离在组件的 Shadow DOM 内部。本文将详细介绍 Shadow DOM 的属性和 API，并探讨其在实际开发中的应用场景。</p><h2 id="_1-什么是-shadow-dom" tabindex="-1"><a class="header-anchor" href="#_1-什么是-shadow-dom" aria-hidden="true">#</a> 1. 什么是 Shadow DOM</h2><p>Shadow DOM 是一项 Web 标准，用于创建封装的组件并实现样式隔离。它允许将组件的 HTML 结构、样式和行为封装在一个独立的 DOM 树中，从而与主文档的 DOM 树相互隔离。通过这种方式，开发者可以创建具有独立样式和行为的组件，而不用担心与其他组件或主文档的样式冲突。</p><h2 id="_2-shadow-dom-api" tabindex="-1"><a class="header-anchor" href="#_2-shadow-dom-api" aria-hidden="true">#</a> 2. Shadow DOM API</h2><p>Shadow DOM 提供了一系列用于操作和管理 Shadow DOM 的 API。</p><h3 id="_2-1-添加-shadow-root-attachshadow-options" tabindex="-1"><a class="header-anchor" href="#_2-1-添加-shadow-root-attachshadow-options" aria-hidden="true">#</a> 2.1 添加 Shadow Root：attachShadow(options)</h3><p><code>attachShadow</code> 方法用于将 Shadow DOM 附加到指定的元素上。它接收一个 <code>options</code> 参数，用于指定 Shadow DOM 的模式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> hostElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;host-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shadowRoot <span class="token operator">=</span> hostElement<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-获取-shadow-root-shadowroot" tabindex="-1"><a class="header-anchor" href="#_2-2-获取-shadow-root-shadowroot" aria-hidden="true">#</a> 2.2 获取 Shadow Root：shadowRoot</h3><p><code>shadowRoot</code> 属性返回与元素关联的 Shadow Root。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> shadowRoot <span class="token operator">=</span> hostElement<span class="token punctuation">.</span>shadowRoot<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-3-在-shadow-root-中查询元素-queryselector-selector" tabindex="-1"><a class="header-anchor" href="#_2-3-在-shadow-root-中查询元素-queryselector-selector" aria-hidden="true">#</a> 2.3 在 Shadow Root 中查询元素：querySelector(selector)</h3><p><code>querySelector</code> 方法在 Shadow Root 内部查找匹配指定选择器的第一个元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> element <span class="token operator">=</span> shadowRoot<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.my-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-4-在-shadow-root-中查询元素列表-queryselectorall-selector" tabindex="-1"><a class="header-anchor" href="#_2-4-在-shadow-root-中查询元素列表-queryselectorall-selector" aria-hidden="true">#</a> 2.4 在 Shadow Root 中查询元素列表：querySelectorAll(selector)</h3><p><code>querySelectorAll</code> 方法在 Shadow Root 内部查找匹配指定选择器的所有元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> elements <span class="token operator">=</span> shadowRoot<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.my-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-获取-shadow-root-的宿主元素-host" tabindex="-1"><a class="header-anchor" href="#_2-5-获取-shadow-root-的宿主元素-host" aria-hidden="true">#</a> 2.5 获取 Shadow Root 的宿主元素：host</h3><p><code>host</code> 属性返回与 Shadow Root 相关联的宿主元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> hostElement <span class="token operator">=</span> shadowRoot<span class="token punctuation">.</span>host<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-shadow-dom-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-shadow-dom-应用场景" aria-hidden="true">#</a> 3. Shadow DOM 应用场景</h2><p>Shadow DOM 在 Web 开发中有许多实际应用场景，下面是几个常见的场景：</p><h3 id="_3-1-web-组件开发" tabindex="-1"><a class="header-anchor" href="#_3-1-web-组件开发" aria-hidden="true">#</a> 3.1 Web 组件开发</h3><p>Shadow DOM 可以帮助开发者创建封装的 Web 组件，确保组件的样式和行为不会被外部影响。以下是一个示例，演示如何使用 Shadow DOM 创建一个自定义按钮组件：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token comment">/* 组件的样式 */</span>
    <span class="token selector">.custom-button</span> <span class="token punctuation">{</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> #007bff<span class="token punctuation">;</span>
     

 <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span>
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>
      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 宿主元素 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>custom-button-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 创建 Shadow Root</span>
    <span class="token keyword">const</span> hostElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;custom-button-container&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> shadowRoot <span class="token operator">=</span> hostElement<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建自定义按钮</span>
    <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    button<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;custom-button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    button<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;Click me&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">// 将按钮添加到 Shadow Root 中</span>
    shadowRoot<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们创建了一个 Shadow Root，并将其附加到 <code>custom-button-container</code> 宿主元素上。然后，我们在 Shadow Root 中创建了一个自定义按钮，并将其添加到 Shadow Root 中。</p><h3 id="_3-2-样式隔离" tabindex="-1"><a class="header-anchor" href="#_3-2-样式隔离" aria-hidden="true">#</a> 3.2 样式隔离</h3><p>使用 Shadow DOM，我们可以实现样式隔离，确保组件的样式不会泄漏到外部环境。这样可以避免样式冲突，并提高组件的可维护性。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.custom-button</span> <span class="token punctuation">{</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> #007bff<span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span>
      <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>
      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 外部环境 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>custom-button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Outer Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- Shadow DOM 组件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>custom-button-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 创建 Shadow Root</span>
    <span class="token keyword">const</span> hostElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;custom-button-container&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> shadowRoot <span class="token operator">=</span> hostElement<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建自定义按钮</span>
    <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    button<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;custom-button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    button<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;Shadow Button&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">// 将按钮添加到 Shadow Root 中</span>
    shadowRoot<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们创建了一个具有相同类名的按钮，一个在外部环境中，一个在 Shadow DOM 组件中。由于 Shadow DOM 具有样式隔离的特性，这两个按钮将拥有不同的样式，且彼此不会相互影响。</p><h2 id="_4-自定义-shadow-dom-api" tabindex="-1"><a class="header-anchor" href="#_4-自定义-shadow-dom-api" aria-hidden="true">#</a> 4. 自定义 Shadow DOM API</h2><p>我们还可以模拟实现一些自定义的 Shadow DOM API，以增强 Shadow DOM 的功能。下面是一个示例，展示如何实现一个自定义的 <code>insertText</code> 方法，用于向 Shadow DOM 中的元素插入文本内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insertText</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> shadowRoot <span class="token operator">=</span> hostElement<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">insertText</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token string">&#39;Hello, Shadow DOM!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
shadowRoot<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个名为 <code>insertText</code> 的函数，它接收一个元素和文本内容作为参数，并创建一个文本节点，将</p><p>文本内容插入到元素中。然后，我们在 Shadow Root 中创建一个 <code>div</code> 元素，并使用 <code>insertText</code> 方法插入文本内容。</p><h2 id="_5-参考资料" tabindex="-1"><a class="header-anchor" href="#_5-参考资料" aria-hidden="true">#</a> 5. 参考资料</h2>`,38),d={href:"https://developer.mozilla.org/en-US/docs/Web/API/Shadow_DOM_API",target:"_blank",rel:"noopener noreferrer"},r={href:"https://developers.google.com/web/fundamentals/web-components/shadowdom",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developers.google.com/web/fundamentals/web-components/shadowdom#usage",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developers.google.com/web/fundamentals/web-components/shadowdom-v1",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"以上是关于 JS Shadow DOM 的介绍。通过使用 Shadow DOM，我们可以轻松创建封装的 Web 组件，并实现样式和行为的隔离。它在创建可重用组件、样式隔离和构建复杂 Web 应用程序时非常有用。",-1);function b(g,w){const s=e("ExternalLinkIcon");return p(),c("div",null,[u,n("ul",null,[n("li",null,[n("a",d,[a("Shadow DOM API - MDN Web Docs"),t(s)])]),n("li",null,[n("a",r,[a("Introduction to Shadow DOM - Web Components"),t(s)])]),n("li",null,[n("a",k,[a("Using Shadow DOM - Google Developers"),t(s)])]),n("li",null,[n("a",h,[a("Shadow DOM v1: Self-Contained Web Components"),t(s)])]),n("li",null,[n("a",v,[a("Web Components - MDN Web Docs"),t(s)])])]),m])}const y=o(i,[["render",b],["__file","ShadowDOM.html.vue"]]);export{y as default};
