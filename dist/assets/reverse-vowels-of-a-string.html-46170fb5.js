import{_ as n,o as s,c as a,d as t}from"./app-2d6feb9f.js";const p={},e=t(`<h1 id="反转字符串中的元音字母" tabindex="-1"><a class="header-anchor" href="#反转字符串中的元音字母" aria-hidden="true">#</a> 反转字符串中的元音字母</h1><h2 id="问题描述" tabindex="-1"><a class="header-anchor" href="#问题描述" aria-hidden="true">#</a> <strong>问题描述</strong>：</h2><p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p><p>示例：</p><p>输入：&quot;hello&quot;</p><p>输出：&quot;holle&quot;</p><p>注意:</p><p>元音字母不包含字母&quot;y&quot;。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> <strong>解题步骤</strong>：</h2><ol><li><p>设置两个指针，一个在开头，一个在末尾。开头的指针称为左指针，末尾的指针称为右指针。</p></li><li><p>遍历字符串，如果左指针指向的字符不是元音字母，左指针向右移动；如果右指针指向的字符不是元音字母，右指针向左移动。</p></li><li><p>当左右指针都指向元音字母时，交换两个指针指向的元素，然后左指针右移一位，右指针左移一位。</p></li><li><p>重复步骤 2 和 3，直到左指针大于或等于右指针，此时所有的元音字母已经反转，算法结束。</p></li></ol><h2 id="解题框架" tabindex="-1"><a class="header-anchor" href="#解题框架" aria-hidden="true">#</a> <strong>解题框架</strong>：</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reverseVowels</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> vowels <span class="token operator">=</span> <span class="token string">&#39;aeiouAEIOU&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> chars <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vowels<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vowels<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> temp <span class="token operator">=</span> chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        chars<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        chars<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> chars<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","reverse-vowels-of-a-string.html.vue"]]);export{r as default};
