import{_ as a,o as s,c as n,e}from"./app-0301958d.js";const t={},r=e(`<h1 id="变量与数据类型" tabindex="-1"><a class="header-anchor" href="#变量与数据类型" aria-hidden="true">#</a> 变量与数据类型</h1><p>在探索Dart语言的世界之前，我们首先需要熟悉一些基础的语法，包括如何声明和使用变量，以及理解Dart中的基础数据类型。</p><h2 id="变量与声明方式" tabindex="-1"><a class="header-anchor" href="#变量与声明方式" aria-hidden="true">#</a> <strong>变量与声明方式</strong></h2><p>变量是我们在编程中存储和操控数据的基本单位。在Dart中，我们有多种方式来声明和使用变量。</p><h3 id="使用-var-来声明一个变量-dart会自动推断出变量类型。" tabindex="-1"><a class="header-anchor" href="#使用-var-来声明一个变量-dart会自动推断出变量类型。" aria-hidden="true">#</a> 使用 <code>var</code> 来声明一个变量，Dart会自动推断出变量类型。</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Dart&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// Dart 自动推断出 \`name\` 是 String 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我们也可以在声明变量时明确指定其类型-这样可以使得代码更易于理解-并且在编译时能够检查到类型错误。" tabindex="-1"><a class="header-anchor" href="#我们也可以在声明变量时明确指定其类型-这样可以使得代码更易于理解-并且在编译时能够检查到类型错误。" aria-hidden="true">#</a> 我们也可以在声明变量时明确指定其类型，这样可以使得代码更易于理解，并且在编译时能够检查到类型错误。</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> greeting <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello Dart&#39;</span></span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dart2-12版本引入了空安全特性-如果变量可能含有空值-我们需要在类型后面加一个问号-。" tabindex="-1"><a class="header-anchor" href="#dart2-12版本引入了空安全特性-如果变量可能含有空值-我们需要在类型后面加一个问号-。" aria-hidden="true">#</a> Dart2.12版本引入了空安全特性，如果变量可能含有空值，我们需要在类型后面加一个问号<code>?</code>。</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span><span class="token operator">?</span> nullableString <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如果一个变量在初始化后值不再改变-我们可以使用-final-或-const-声明它-这样可以使我们的程序更加安全。" tabindex="-1"><a class="header-anchor" href="#如果一个变量在初始化后值不再改变-我们可以使用-final-或-const-声明它-这样可以使我们的程序更加安全。" aria-hidden="true">#</a> 如果一个变量在初始化后值不再改变，我们可以使用 <code>final</code> 或 <code>const</code> 声明它，这样可以使我们的程序更加安全。</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> gravity <span class="token operator">=</span> <span class="token number">9.8</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>final</code> 和 <code>const</code> 的区别在于，<code>final</code> 的值只能被设定一次，而 <code>const</code> 则是一个编译时常量。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> <strong>数据类型</strong></h2><p>Dart是一个强类型语言，包含了许多常见的数据类型：</p><h3 id="numbers-包括-int-和-double-两种类型。" tabindex="-1"><a class="header-anchor" href="#numbers-包括-int-和-double-两种类型。" aria-hidden="true">#</a> <strong>Numbers</strong>：包括 <code>int</code> 和 <code>double</code> 两种类型。</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
double score <span class="token operator">=</span> <span class="token number">93.5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="strings-表示文本的数据类型。可以通过单引号或者双引号来创建字符串。" tabindex="-1"><a class="header-anchor" href="#strings-表示文本的数据类型。可以通过单引号或者双引号来创建字符串。" aria-hidden="true">#</a> <strong>Strings</strong>：表示文本的数据类型。可以通过单引号或者双引号来创建字符串。</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> hello <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="booleans-包括-true-和-false-两种布尔值。" tabindex="-1"><a class="header-anchor" href="#booleans-包括-true-和-false-两种布尔值。" aria-hidden="true">#</a> <strong>Booleans</strong>：包括 <code>true</code> 和 <code>false</code> 两种布尔值。</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>bool isTrue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
bool isFalse <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lists-一个有序的项目集合-也被称为数组。" tabindex="-1"><a class="header-anchor" href="#lists-一个有序的项目集合-也被称为数组。" aria-hidden="true">#</a> <strong>Lists</strong>：一个有序的项目集合，也被称为数组。</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="maps-无序的键值对集合。" tabindex="-1"><a class="header-anchor" href="#maps-无序的键值对集合。" aria-hidden="true">#</a> <strong>Maps</strong>：无序的键值对集合。</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> countries <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;CN&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;China&#39;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;US&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;United States&#39;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;JP&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Japan&#39;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理解变量声明和数据类型是掌握Dart语言的重要基础。掌握这些知识后，我们就可以开始编写更加复杂的Dart程序了。</p>`,26),i=[r];function o(l,c){return s(),n("div",null,i)}const p=a(t,[["render",o],["__file","变量与数据类型.html.vue"]]);export{p as default};
