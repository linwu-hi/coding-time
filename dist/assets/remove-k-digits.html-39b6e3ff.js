import{_ as n,o as s,c as a,d as p}from"./app-d7df62a4.js";const t={},e=p(`<h1 id="移除k位数字" tabindex="-1"><a class="header-anchor" href="#移除k位数字" aria-hidden="true">#</a> <strong>移除k位数字</strong></h1><p>给定一个非负整数字符串<code>num</code>和一个整数<code>k</code>，从该整数中移除<code>k</code>位数字，使得剩下的数字形成的整数尽可能小。返回移除<code>k</code>位数字后的结果。</p><p><strong>示例：</strong></p><p>输入：num = &quot;1432219&quot;, k = 3 输出：&quot;1219&quot; 解释：移除数字4、3和2后，剩下的数字形成的整数最小，即为1219。</p><p>输入：num = &quot;10200&quot;, k = 1 输出：&quot;200&quot; 解释：移除数字1后，剩下的数字形成的整数最小，即为200。</p><h2 id="题目分析与解题步骤" tabindex="-1"><a class="header-anchor" href="#题目分析与解题步骤" aria-hidden="true">#</a> <strong>题目分析与解题步骤：</strong></h2><p>这个问题可以使用栈来解决。我们可以遍历整数字符串中的每个数字，然后使用一个栈来模拟移除数字的过程。对于每个数字，我们将其与栈顶元素比较，如果当前数字小于栈顶元素且还有剩余的移除次数<code>k</code>，则将栈顶元素出栈。最后，栈中的元素即为移除<code>k</code>位数字后的结果。</p><p>解题步骤如下：</p><ol><li><p>创建一个栈<code>stack</code>，用于模拟移除数字的过程。</p></li><li><p>遍历整数字符串<code>num</code>中的每个数字，并执行以下操作：</p><ul><li><p>将当前数字转换为整数类型。</p></li><li><p>如果栈不为空且当前数字小于栈顶元素且还有剩余的移除次数<code>k</code>，则将栈顶元素出栈，减少移除次数<code>k</code>。</p></li><li><p>将当前数字入栈。</p></li></ul></li><li><p>如果移除次数<code>k</code>大于0，则从栈顶依次出栈，直到移除次数<code>k</code>减为0。</p></li><li><p>将栈中的元素按照出栈的顺序组合成字符串，并返回最终结果。</p></li></ol><h2 id="javascript解题框架" tabindex="-1"><a class="header-anchor" href="#javascript解题框架" aria-hidden="true">#</a> <strong>JavaScript解题框架：</strong></h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">removeKDigits</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> digit <span class="token keyword">of</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> digit <span class="token operator">&lt;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      k<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    k<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 移除前导零</span>
  result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^0+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 处理结果为空的情况</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个框架中，我们首先定义了一个栈类<code>Stack</code>，其中包含了常用的栈操作方法。然后，我们使用栈来移除k位数字。</p><p>在<code>removeKDigits</code>函数中，我们遍历整数字符串<code>num</code>，并使用栈来模拟移除数字的过程。对于每个数字，我们将其与栈顶元素比较，如果当前数字小于栈顶元素且还有剩余的移除次数<code>k</code>，则将栈顶元素出栈，减少移除次数<code>k</code>。</p><p>最后，我们将栈中的元素按照出栈的顺序组合成字符串，并返回最终结果。同时，我们需要处理结果为空的情况和移除前导零的情况。</p>`,14),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","remove-k-digits.html.vue"]]);export{k as default};
