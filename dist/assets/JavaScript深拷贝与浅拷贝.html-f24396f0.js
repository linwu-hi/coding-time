import{_ as t,r as e,o,c,a as n,b as a,e as p,d as l}from"./app-2477bd15.js";const i={},u=l(`<h1 id="javascript深拷贝与浅拷贝" tabindex="-1"><a class="header-anchor" href="#javascript深拷贝与浅拷贝" aria-hidden="true">#</a> JavaScript深拷贝与浅拷贝</h1><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>在JavaScript中，对象的拷贝是一项常见的操作。浅拷贝和深拷贝是两种常用的拷贝方式。浅拷贝只复制对象的引用，而深拷贝创建了一个全新的对象，包含与原始对象相同的值和结构。深拷贝和浅拷贝各有适用的场景和注意事项。本文将详细介绍如何实现一个完整而优雅的深拷贝函数，处理循环引用和特殊类型，优化性能，并探讨深拷贝和浅拷贝的应用场景、注意事项和相关属性。</p><h2 id="_1-深拷贝的实现" tabindex="-1"><a class="header-anchor" href="#_1-深拷贝的实现" aria-hidden="true">#</a> 1. 深拷贝的实现</h2><p>实现一个完整而优雅的深拷贝函数需要考虑以下几个方面：</p><h3 id="_1-1-基本类型和特殊类型的处理" tabindex="-1"><a class="header-anchor" href="#_1-1-基本类型和特殊类型的处理" aria-hidden="true">#</a> 1.1 基本类型和特殊类型的处理</h3><p>在实现深拷贝函数时，首先需要处理基本类型（如字符串、数字、布尔值等）和特殊类型（如函数、正则表达式和日期对象等）。对于基本类型，直接返回其值即可。对于特殊类型，可以选择直接引用原始对象，而不进行复制。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理基本类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 处理特殊类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 处理普通对象和数组</span>
  <span class="token keyword">const</span> clone <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      clone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> clone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们使用 <code>typeof</code> 操作符判断基本类型，根据对象的类型选择适当的处理方式。对于函数、正则表达式和日期对象，我们使用相应的构造函数创建新的实例。</p><h3 id="_1-2-处理循环引用" tabindex="-1"><a class="header-anchor" href="#_1-2-处理循环引用" aria-hidden="true">#</a> 1.2 处理循环引用</h3><p>循环引用是指对象属性之间存在相互引用的情况，导致递归复制陷入无限循环。为了处理循环引用，我们可以使用一个额外的数据结构（如 <code>Map</code> 或 <code>WeakMap</code>）来存储已经复制的对象，以便在遇到循环引用时进行判断和处理。</p><p>下面是一个修改后的 <code>deepClone</code> 函数，解决了循环引用问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> obj

 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> clone <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> clone<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      clone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> clone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们使用 <code>Map</code> 数据结构来存储已经复制的对象。在每次递归调用时，我们首先检查 <code>map</code> 中是否存在当前对象的引用，如果存在则直接返回对应的副本。这样，我们可以避免陷入无限循环。</p><h3 id="_1-3-性能优化" tabindex="-1"><a class="header-anchor" href="#_1-3-性能优化" aria-hidden="true">#</a> 1.3 性能优化</h3><p>深拷贝是一项相对耗费性能的操作，特别是在处理大型对象或嵌套层次很深的对象时。为了提高性能，可以考虑以下几个优化策略：</p><ul><li><strong>循环拷贝</strong>：使用循环代替递归，减少函数调用的开销。这可以通过迭代对象的属性并复制它们来实现。</li><li><strong>使用 <code>JSON</code> 序列化与反序列化</strong>：<code>JSON.stringify()</code> 方法可以将对象序列化为字符串，<code>JSON.parse()</code> 方法可以将字符串解析为对象。使用这两个方法可以快速实现深拷贝，但它的适用范围受限，无法处理特殊类型（如函数和正则表达式）和循环引用。</li><li><strong>使用库函数</strong>：许多优秀的 JavaScript 库（如 Lodash、Underscore）提供了高性能的深拷贝函数。这些库经过充分测试和优化，可以满足大多数深拷贝需求。</li></ul><h3 id="_1-4-完整的深拷贝实现示例" tabindex="-1"><a class="header-anchor" href="#_1-4-完整的深拷贝实现示例" aria-hidden="true">#</a> 1.4 完整的深拷贝实现示例</h3><p>下面是一个完整的深拷贝函数的实现，综合考虑了上述的处理方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 也可以用WeakMap优化</span>
<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> clone <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  hash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> clone<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> flags <span class="token operator">=</span> obj<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>
    <span class="token keyword">const</span> pattern <span class="token operator">=</span> obj<span class="token punctuation">.</span>source<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cloneFunction</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    clone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> clone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cloneFunction</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> body <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> parameters <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\((.*?)\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> functionBody <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> functionBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-浅拷贝的实现" tabindex="-1"><a class="header-anchor" href="#_2-浅拷贝的实现" aria-hidden="true">#</a> 2. 浅拷贝的实现</h2><p>与深拷贝不同，浅拷贝只复制对象的引用，而不创建对象的副本。下面是几种常见的浅拷贝方法：</p><h3 id="_2-1-object-assign" tabindex="-1"><a class="header-anchor" href="#_2-1-object-assign" aria-hidden="true">#</a> 2.1 Object.assign()</h3><p><code>Object.assign()</code> 方法用于将所有可枚举属性从一个或多个源对象复制到目标对象，并返回目标对象。它只会复制源对象的属性的引用，而不是属性的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sourceObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span>

 <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> targetObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> sourceObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：{ name: &#39;John&#39;, age: 25 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们使用 <code>Object.assign()</code> 方法将源对象的属性复制到目标对象中。<code>targetObj</code> 是 <code>sourceObj</code> 的浅拷贝副本。</p><h3 id="_2-2-展开语法-spread-syntax" tabindex="-1"><a class="header-anchor" href="#_2-2-展开语法-spread-syntax" aria-hidden="true">#</a> 2.2 展开语法（Spread Syntax）</h3><p>展开语法（Spread Syntax）可以用于将一个对象的所有属性展开到另一个对象中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sourceObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> targetObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>sourceObj <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：{ name: &#39;John&#39;, age: 25 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们使用展开语法将源对象的所有属性展开到目标对象中。<code>targetObj</code> 是 <code>sourceObj</code> 的浅拷贝副本。</p><h3 id="_2-3-数组浅拷贝" tabindex="-1"><a class="header-anchor" href="#_2-3-数组浅拷贝" aria-hidden="true">#</a> 2.3 数组浅拷贝</h3><p>对于数组的浅拷贝，可以使用 <code>slice()</code> 或展开语法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sourceArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> targetArray1 <span class="token operator">=</span> sourceArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> targetArray2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>sourceArray<span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetArray1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[1, 2, 3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetArray2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们使用 <code>slice()</code> 方法和展开语法将源数组的元素复制到目标数组中。<code>targetArray1</code> 和 <code>targetArray2</code> 都是 <code>sourceArray</code> 的浅拷贝副本。</p><h2 id="_3-深拷贝与浅拷贝的应用场景" tabindex="-1"><a class="header-anchor" href="#_3-深拷贝与浅拷贝的应用场景" aria-hidden="true">#</a> 3. 深拷贝与浅拷贝的应用场景</h2><p>深拷贝和浅拷贝各有适用的场景：</p><ul><li><p><strong>深拷贝的应用场景</strong>：</p><ul><li>当需要创建一个对象的完全独立副本时，以防止对原始对象的修改。</li><li>在对象状态管理中，需要创建对象的副本以记录历史状态、实现撤销和重做等操作。</li><li>在数据变换和处理过程中，创建对象的副本以避免对原始数据的修改。</li></ul></li><li><p><strong>浅拷贝的应用场景</strong>：</p><ul><li>当只需要复制对象的引用，而不需要创建对象的副本时。</li><li>在一些简单的数据处理场景中，浅拷贝可以更高效地完成任务。</li></ul></li></ul><h2 id="_4-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-注意事项" aria-hidden="true">#</a> 4. 注意事项</h2><p>在使用深拷贝和浅拷贝时，需要注意以下几个问题：</p><ul><li><strong>循环引用</strong>：深拷贝和浅拷贝都需要注意循环引用的问题。循环引用是指对象之间相互引用，导致无限循环。在处理循环引用时，深拷贝需要使用额外的数据结构（如 <code>Map</code> 或 <code>WeakMap</code>）进行记录和判断，而浅拷贝则无法解决循环引用的问题。</li><li><strong>特殊类型的处理</strong>：在实现深拷贝和浅拷贝时，需要注意特殊类型的处理。特殊类型包括函数、正则表达式等。对于特殊类型，深拷贝可以选择直接引用原始对象，而浅拷贝只会复制引用。</li><li><strong>性能开销</strong>：深拷贝是一项相对耗费性能的操作，特别是在处理大型对象或嵌套层次很深的对象时。在实际应用中，需要根据场景权衡性能和需求。</li></ul><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>深拷贝和浅拷贝是JavaScript中常用的拷贝方式，每种方式都有其适用的场景和注意事项。通过实现一个完整而优雅的深拷贝函数，我们可以轻松地创建对象的独立副本，并处理循环引用和特殊类型。浅拷贝则提供了一种快速复制对象的方式，适用于简单的数据处理场景。根据实际需求和性能要求，选择适合的拷贝方式，可以更好地满足业务需求。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,43),r={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",target:"_blank",rel:"noopener noreferrer"};function d(v,b){const s=e("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("MDN Web Docs: Object.assign()"),p(s)])]),n("li",null,[n("a",k,[a("MDN Web Docs: Spread Syntax"),p(s)])])])])}const y=t(i,[["render",d],["__file","JavaScript深拷贝与浅拷贝.html.vue"]]);export{y as default};
