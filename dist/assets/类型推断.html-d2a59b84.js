import{_ as n,o as s,c as a,d as e}from"./app-d7df62a4.js";const t={},p=e(`<h1 id="类型推断" tabindex="-1"><a class="header-anchor" href="#类型推断" aria-hidden="true">#</a> 类型推断</h1><p>TypeScript通过类型推断可以自动推导出变量和表达式的类型，提高代码的可读性和可维护性。</p><h2 id="类型推断-1" tabindex="-1"><a class="header-anchor" href="#类型推断-1" aria-hidden="true">#</a> 类型推断</h2><p>类型推断是 TypeScript 在编译时根据上下文自动推导变量和表达式的类型。它根据变量的赋值、函数的返回值、表达式的操作等信息来确定变量或表达式的最佳类型。</p><h3 id="_1-基础类型推断" tabindex="-1"><a class="header-anchor" href="#_1-基础类型推断" aria-hidden="true">#</a> 1. 基础类型推断</h3><p>TypeScript根据变量的初始值来推断基础类型，包括字符串、数字、布尔值等。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 推断为string类型</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token comment">// 推断为number类型</span>
<span class="token keyword">let</span> isStudent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 推断为boolean类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-最佳公共类型推断" tabindex="-1"><a class="header-anchor" href="#_2-最佳公共类型推断" aria-hidden="true">#</a> 2. 最佳公共类型推断</h3><p>当我们将不同类型的值赋给一个变量或数组时，TypeScript会根据这些值的类型推断出一个最佳公共类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 推断为(number | string | boolean)[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的示例中，数组<code>values</code>包含了数字、字符串和布尔值，TypeScript推断出这个数组的类型为<code>(number | string | boolean)[]</code>，即联合类型。</p><h3 id="_3-上下文类型推断" tabindex="-1"><a class="header-anchor" href="#_3-上下文类型推断" aria-hidden="true">#</a> 3. 上下文类型推断</h3><p>TypeScript会根据上下文中的预期类型推断变量的类型。这种上下文可以是函数参数、赋值语句等。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span>person<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>person<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// person的类型推断为string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，函数<code>greet</code>的参数<code>person</code>的类型被推断为<code>string</code>，因为在函数调用时传入的实参是一个字符串。</p><h3 id="_4-类型断言" tabindex="-1"><a class="header-anchor" href="#_4-类型断言" aria-hidden="true">#</a> 4. 类型断言</h3><p>如果我们希望手动指定一个变量或表达式的类型，可以使用类型断言（Type Assertion）来告诉TypeScript我们的意图。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&quot;Hello, TypeScript!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 类型断言为string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用类型断言<code>as string</code>将变量<code>value</code>的类型指定为<code>string</code>，以便在后面获取其长度时，TypeScript能正确推断出类型。</p><h3 id="_5-类型推断和泛型" tabindex="-1"><a class="header-anchor" href="#_5-类型推断和泛型" aria-hidden="true">#</a> 5. 类型推断和泛型</h3><p>在使用泛型时，TypeScript会根据传入的参数类型推断泛型类型的具体类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, TypeScript!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// result的类型推断为string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，泛型函数<code>identity</code>的参数<code>value</code>的类型被推断为传入的实参</p><p>类型，因此返回值的类型也被推断为<code>string</code>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>类型推断是TypeScript中的一个重要特性，通过自动推导变量和表达式的类型，可以提高代码的可读性和可维护性。TypeScript根据赋值、返回值、上下文等信息进行类型推断，并在需要时允许手动指定类型。在编写现代化高级TypeScript代码时，深入了解和应用类型推断是非常重要的一部分。通过结合最新的TypeScript语法和类型推断，我们可以编写更具表达力和类型安全的代码。</p>`,26),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","类型推断.html.vue"]]);export{u as default};
