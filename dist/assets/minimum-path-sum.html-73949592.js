const t=JSON.parse('{"key":"v-0b3bf832","path":"/lc/algorithms/dynamic-programming/minimum-path-sum.html","title":"最小下降路径和","lang":"zh-CN","frontmatter":{"description":"题目描述 给定一个大小为 n x n 的二维整数数组 matrix，找到从第一行到最后一行的最小下降路径和。每一步只能移动到下一行中相邻的元素上。在这里，相邻的元素指的是位于当前元素右下方和右下方的两个元素。 要求路径上的数字总和最小。 解题步骤 为了解决最小下降路径和的问题，我们可以使用动态规划的思想来解决。 1. 定义状态：我们使用一个二维数组 d...","head":[["meta",{"property":"og:url","content":"https://www.coding-time.cn/lc/algorithms/dynamic-programming/minimum-path-sum.html"}],["meta",{"property":"og:site_name","content":"编程时光"}],["meta",{"property":"og:title","content":"最小下降路径和"}],["meta",{"property":"og:description","content":"题目描述 给定一个大小为 n x n 的二维整数数组 matrix，找到从第一行到最后一行的最小下降路径和。每一步只能移动到下一行中相邻的元素上。在这里，相邻的元素指的是位于当前元素右下方和右下方的两个元素。 要求路径上的数字总和最小。 解题步骤 为了解决最小下降路径和的问题，我们可以使用动态规划的思想来解决。 1. 定义状态：我们使用一个二维数组 d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-14T16:27:54.000Z"}],["meta",{"property":"article:author","content":"linwu"}],["meta",{"property":"article:modified_time","content":"2023-07-14T16:27:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最小下降路径和\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-14T16:27:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"linwu\\",\\"url\\":\\"https://www.coding-time.cn\\",\\"email\\":\\"linwu.hi@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解题步骤","slug":"解题步骤","link":"#解题步骤","children":[]}],"git":{"createdTime":1689352074000,"updatedTime":1689352074000,"contributors":[{"name":"linwu-hi","email":"linwu.hi@gmail.com","commits":1}]},"readingTime":{"minutes":1.54,"words":462},"filePathRelative":"lc/algorithms/dynamic-programming/minimum-path-sum.md","localizedDate":"2023年7月15日","autoDesc":true}');export{t as data};
