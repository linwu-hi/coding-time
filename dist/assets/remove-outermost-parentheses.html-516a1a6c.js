import{_ as n,o as s,c as a,d as t}from"./app-2477bd15.js";const p={},e=t(`<h1 id="移除最外层的括号" tabindex="-1"><a class="header-anchor" href="#移除最外层的括号" aria-hidden="true">#</a> <strong>移除最外层的括号</strong></h1><p>给定一个有效的括号字符串<code>S</code>，移除字符串中最外层的括号，返回新的字符串。</p><p><strong>示例：</strong></p><p>输入：S = &quot;(()())(())&quot; 输出：&quot;()()()&quot; 解释：最外层的括号被移除，得到新的字符串为&quot;()()()&quot;。</p><p>输入：S = &quot;(()())(())(()(()))&quot; 输出：&quot;()()()()(())&quot; 解释：最外层的括号被移除，得到新的字符串为&quot;()()()()(())&quot;。</p><h2 id="题目分析与解题步骤" tabindex="-1"><a class="header-anchor" href="#题目分析与解题步骤" aria-hidden="true">#</a> <strong>题目分析与解题步骤：</strong></h2><p>这个问题可以使用栈来解决。我们可以遍历字符串中的每个字符，然后使用一个栈来模拟括号的匹配过程。对于每个字符，如果它是左括号且栈为空，说明它是最外层的左括号，我们将其标记为不需要保留。否则，我们将其入栈，表示保留该括号。当遇到右括号时，我们将栈顶的左括号出栈，表示匹配成功。最后，将栈中剩余的括号组合成新的字符串即为最终结果。</p><p>解题步骤如下：</p><ol><li><p>创建一个栈<code>stack</code>，用于模拟括号的匹配过程。</p></li><li><p>创建一个空字符串<code>result</code>，用于保存最终结果。</p></li><li><p>遍历字符串<code>S</code>中的每个字符，并执行以下操作：</p><ul><li><p>如果当前字符是左括号且栈为空，说明它是最外层的左括号，不需要保留。</p></li><li><p>如果当前字符是左括号，将其入栈。</p></li><li><p>如果当前字符是右括号，将栈顶的左括号出栈，表示匹配成功。</p><ul><li><p>如果出栈后，栈为空，说明这是最外层的右括号，不需要保留。</p></li><li><p>如果出栈后，栈不为空，将出栈的左括号和右括号添加到结果字符串<code>result</code>中。</p></li></ul></li></ul></li><li><p>返回结果字符串<code>result</code>作为最终的解答。</p></li></ol><h2 id="javascript解题框架" tabindex="-1"><a class="header-anchor" href="#javascript解题框架" aria-hidden="true">#</a> <strong>JavaScript解题框架：</strong></h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">removeOuterParentheses</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">S</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">+=</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span> char <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个框架中，我们首先定义了一个栈类<code>Stack</code>，其中包含了常用的栈操作方法。然后，我们使用栈来移除最外层的括号。</p><p>在<code>removeOuterParentheses</code>函数中，我们遍历字符串<code>S</code>，并使用栈来模拟括号的匹配过程。对于每个字符，我们根据括号的类型和栈的状态进行判断和操作，以移除最外层的括号。</p><p>最后，将栈中剩余的括号组合成新的字符串，并返回最终结果。</p>`,14),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","remove-outermost-parentheses.html.vue"]]);export{r as default};
