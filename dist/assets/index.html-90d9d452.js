import{_ as p,r as o,o as c,c as i,a as s,b as n,e,d as t}from"./app-2477bd15.js";const l="/assets/cover-e1f63e41.png",u={},r=t('<h1 id="加权随机" tabindex="-1"><a class="header-anchor" href="#加权随机" aria-hidden="true">#</a> 加权随机</h1><figure><img src="'+l+`" alt="Weighted Random" tabindex="0" loading="lazy"><figcaption>Weighted Random</figcaption></figure><h2 id="什么是-加权随机" tabindex="-1"><a class="header-anchor" href="#什么是-加权随机" aria-hidden="true">#</a> 什么是&quot;加权随机&quot;</h2><p>假设你有一个<strong>项目列表</strong>。项目可以是任何东西。例如，我们可能有一个喜欢吃的水果和蔬菜列表：<code>[ &#39;🍌&#39;, &#39;🍎&#39;, &#39;🥕&#39; ]</code>。</p><p><strong>权重列表</strong>表示每个项目的权重（或概率、重要性）。权重是数字。例如，权重列表 <code>[3, 7, 1]</code> 可以表示：</p><ul><li>你更喜欢吃<code>🍎苹果</code>（<code>7</code>次中的<code>3</code>次+<code>7</code>次+<code>1</code>次中的<code>11</code>次），</li><li>然后你不太喜欢吃香蕉<code>🍌</code>（只有<code>11</code>次中的<code>3</code>次），</li><li>而你真的不喜欢胡萝卜<code>🥕</code>（只想吃<code>11</code>次中的<code>1</code>次）。</li></ul><blockquote><p>如果我们以概率为基础来讲，那么权重列表可能是一个总和为<code>1</code>的浮点数数组（例如<code>[0.1, 0.5, 0.2, 0.2]</code>）。</p></blockquote><p><strong>加权随机</strong>是一个函数，它会根据每个项目的权重随机返回列表中的一个项目，使得权重较大的项目更容易被选中。</p><p>函数的示例接口：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> items <span class="token operator">=</span>   <span class="token punctuation">[</span> <span class="token string">&#39;🍌&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🍎&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🥕&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> weights <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token number">1</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">weightedRandom</span><span class="token punctuation">(</span><span class="token parameter">items<span class="token punctuation">,</span> weights</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 实现代码在这里...</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> nextSnackToEat <span class="token operator">=</span> <span class="token function">weightedRandom</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> weights<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能是 &#39;🍎&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="加权随机的应用" tabindex="-1"><a class="header-anchor" href="#加权随机的应用" aria-hidden="true">#</a> 加权随机的应用</h2>`,11),d={href:"https://en.wikipedia.org/wiki/Genetic_algorithm",target:"_blank",rel:"noopener noreferrer"},k={href:"https://trekhleb.dev/blog/2021/self-parking-car-evolution/",target:"_blank",rel:"noopener noreferrer"},m=s("strong",null,"示例",-1),v={href:"https://en.wikipedia.org/wiki/Recurrent_neural_network",target:"_blank",rel:"noopener noreferrer"},b={href:"https://nbviewer.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/recipe_generation_rnn/recipe_generation_rnn.ipynb",target:"_blank",rel:"noopener noreferrer"},g=s("strong",null,"示例",-1),h={href:"https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/",target:"_blank",rel:"noopener noreferrer"},w=s("li",null,"等等...",-1),_=t(`<h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h2><p><strong>直接的方法</strong>如下：</p><ol><li>根据权重重复列表中的每个项目。</li><li>从列表中随机选择一个项目。</li></ol><p>例如，在水果和蔬菜的情况下，我们可以生成大小为<code>3 + 7 + 1 = 11</code>的以下列表：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> items <span class="token operator">=</span>   <span class="token punctuation">[</span> <span class="token string">&#39;🍌&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🍎&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🥕&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> weights <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token number">1</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 根据权重重复项目。</span>
<span class="token keyword">const</span> weightedItems <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;🍌&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🍌&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🍌&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;🍎&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🍎&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🍎&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🍎&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🍎&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🍎&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;🍎&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;🥕&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 现在只需从weightedItems数组中随机选择项目。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，正如你所看到的，这种方法可能需要大量的内存，特别是当我们需要在<code>weightedItems</code>列表中重复很多项目时。想象一下，如果你需要将一个字符串如<code>&quot;some-random-string&quot;</code>（<code>18</code>个字节）重复十亿次。你将需要额外分配大约<code>180Mb</code>的内存空间来存储这个数组。</p><p><strong>更高效的方法</strong>如下：</p><ol><li>准备每个项目的累积权重列表（即<code>cumulativeWeights</code>列表，该列表将与原始的<code>weights</code>列表具有相同数量的元素）。在我们的例子中，它将如下所示：<code>cumulativeWeights = [3, 3 + 7, 3 + 7 + 1] = [3, 10, 11]</code>。</li><li>生成从<code>0</code>到最大累积权重值的随机数<code>randomNumber</code>。在我们的例子中，随机数将在<code>[0..11]</code>的范围内。假设我们有<code>randomNumber = 8</code>。</li><li>从左到右遍历<code>cumulativeWeights</code>列表，并选择第一个大于或等于<code>randomNumber</code>的元素。我们将使用这个元素的索引从<code>items</code>数组中选择项目。</li></ol><p>这种方法的思想是，较高的权重将占据更多的数值空间。因此，随机数落入&quot;较高权重数字桶&quot;的可能性更高。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> weights <span class="token operator">=</span>           <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cumulativeWeights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 以伪代码的方式，我们可以这样考虑cumulativeWeights数组。</span>
<span class="token keyword">const</span> pseudoCumulativeWeights <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>               <span class="token comment">// &lt;-- [3]个数字</span>
  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment">// &lt;-- [7]个数字</span>
  <span class="token number">11</span><span class="token punctuation">,</span>                    <span class="token comment">// &lt;-- [1]个数字</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 根据权重选择随机项目。
 * 权重较大的项目将被更频繁地选择（具有较高的概率）。
 *
 * 例如：
 * - items = [&#39;banana&#39;, &#39;orange&#39;, &#39;apple&#39;]
 * - weights = [0, 0.2, 0.8]
 * - weightedRandom(items, weights) 在80%的情况下返回&#39;apple&#39;，
 *   在20%的情况下返回&#39;orange&#39;，它永远不会返回&#39;banana&#39;（因为选择香蕉的概率为0%）
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">items</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">weights</span>
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token operator">:</span> any<span class="token punctuation">,</span> index<span class="token operator">:</span> number<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">weightedRandom</span><span class="token punctuation">(</span><span class="token parameter">items<span class="token punctuation">,</span> weights</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">.</span>length <span class="token operator">!==</span> weights<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Items and weights must be of the same size&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Items must not be empty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 准备累积权重数组。</span>
  <span class="token comment">// 例如：</span>
  <span class="token comment">// - weights = [1, 4, 3]</span>
  <span class="token comment">// - cumulativeWeights = [1, 5, 8]</span>
  <span class="token keyword">const</span> cumulativeWeights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weights<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cumulativeWeights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cumulativeWeights<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 在范围[0...sum(weights)]内获取随机数</span>
  <span class="token comment">// 例如：</span>
  <span class="token comment">// - weights = [1, 4, 3]</span>
  <span class="token comment">// - maxCumulativeWeight = 8</span>
  <span class="token comment">// - 随机数的范围是[0...8]</span>
  <span class="token keyword">const</span> maxCumulativeWeight <span class="token operator">=</span> cumulativeWeights<span class="token punctuation">[</span>cumulativeWeights<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> randomNumber <span class="token operator">=</span> maxCumulativeWeight <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 根据权重选择随机项目。</span>
  <span class="token comment">// 权重较大的项目将被更频繁地选择。</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> itemIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> itemIndex <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> itemIndex <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cumulativeWeights<span class="token punctuation">[</span>itemIndex<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> randomNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">item</span><span class="token operator">:</span> items<span class="token punctuation">[</span>itemIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">index</span><span class="token operator">:</span> itemIndex<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><ul><li>可以在<a href="weightedRandom.js">weightedRandom.js</a>文件中找到<code>weightedRandom()</code>函数的实现。</li><li>可以在<a href="__test__/weightedRandom.test.js"><strong>test</strong>/weightedRandom.test.js</a>文件中找到测试用例。</li></ul>`,14);function f(y,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,s("ul",null,[s("li",null,[n("在"),s("a",d,[n("遗传算法"),e(a)]),n('中，加权随机用于"选择"阶段，当我们需要根据个体的适应度评分选择最适应/最强大的个体进行交配，并产生下一代更强大的个体。你可以在'),s("a",k,[n("500行代码中构建自动停车汽车"),e(a)]),n("文章中找到一个"),m,n("。")]),s("li",null,[n("在"),s("a",v,[n("循环神经网络(RNN)"),e(a)]),n("中，当根据下一个字母的概率来决定下一个要选择的字母（以形成句子）时使用加权随机。你可以在"),s("a",b,[n("使用循环神经网络（RNN）生成食谱"),e(a)]),n("的Jupyter笔记本中找到一个"),g,n("。")]),s("li",null,[n("在"),s("a",h,[n("Nginx负载均衡"),e(a)]),n("中，为了将HTTP请求更频繁地发送到权重较高的服务器。")]),w]),_])}const j=p(u,[["render",f],["__file","index.html.vue"]]);export{j as default};
