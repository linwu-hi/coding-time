import{_ as n,o as s,c as a,d as p}from"./app-2d6feb9f.js";const t={},e=p(`<h1 id="栈-stack" tabindex="-1"><a class="header-anchor" href="#栈-stack" aria-hidden="true">#</a> <strong>栈（Stack）</strong></h1><p>栈（Stack）是一种常见的数据结构，具有先进后出（Last-In-First-Out，LIFO）的特性。在计算机科学中，栈被广泛应用于算法和数据处理中，例如函数调用、表达式求值、深度优先搜索等。本文将介绍栈的基本概念、应用场景以及常见的栈相关算法，并提供相应的JavaScript伪代码框架。</p><h2 id="栈的基本概念" tabindex="-1"><a class="header-anchor" href="#栈的基本概念" aria-hidden="true">#</a> <strong>栈的基本概念</strong></h2><p>栈是一个具有限定操作的线性数据结构，它支持两个基本操作：</p><ol><li><p><strong>入栈（Push）</strong>：将元素添加到栈顶。</p></li><li><p><strong>出栈（Pop）</strong>：移除并返回栈顶元素。</p></li></ol><p>另外，栈还有两个重要的属性：</p><ol><li><p><strong>栈顶（Top）</strong>：指向栈顶元素的指针。</p></li><li><p><strong>栈空（Empty）</strong>：当栈中没有元素时称为栈空。</p></li></ol><h2 id="栈的应用场景" tabindex="-1"><a class="header-anchor" href="#栈的应用场景" aria-hidden="true">#</a> <strong>栈的应用场景</strong></h2><p>栈在计算机科学中有许多应用场景。以下是一些常见的应用场景：</p><ol><li><p><strong>函数调用栈</strong>：函数调用过程中，每次调用都会将当前函数的上下文（包括局部变量和返回地址）入栈，并在函数返回时出栈，以实现函数的嵌套调用和返回。</p></li><li><p><strong>表达式求值</strong>：通过栈可以实现中缀表达式转后缀表达式，然后利用后缀表达式进行求值，如逆波兰表达式。</p></li><li><p><strong>括号匹配</strong>：通过栈可以判断表达式中的括号是否匹配，如括号序列的合法性检查。</p></li><li><p><strong>浏览器的前进后退</strong>：浏览器通过栈来管理用户的浏览历史，每当用户点击前进或后退按钮时，对应的URL会入栈或出栈。</p></li><li><p><strong>深度优先搜索（DFS）</strong>：DFS是一种图遍历算法，使用栈来保存待访问的节点。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="栈的常见算法" tabindex="-1"><a class="header-anchor" href="#栈的常见算法" aria-hidden="true">#</a> <strong>栈的常见算法</strong></h2><h3 id="_1-括号匹配" tabindex="-1"><a class="header-anchor" href="#_1-括号匹配" aria-hidden="true">#</a> <strong>1. 括号匹配</strong></h3><p>括号匹配是栈的典型应用之一。算法的思想是遍历字符串，遇到左括号时入栈，遇到右括号时出栈，如果遇到右括号时栈为空或栈顶元素不是对应的左括号，则表明括号不匹配。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isParenthesesMatching</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> c <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">&#39;[&#39;</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">&#39;]&#39;</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">let</span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">!==</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;]&#39;</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">!==</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;}&#39;</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">!==</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-逆波兰表达式求值" tabindex="-1"><a class="header-anchor" href="#_2-逆波兰表达式求值" aria-hidden="true">#</a> <strong>2. 逆波兰表达式求值</strong></h3><p>逆波兰表达式是一种无括号的数学表达式表示法，通过栈可以方便地求解逆波兰表达式的值。</p><p>以下是逆波兰表达式求值算法的伪代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">evaluateReversePolishNotation</span><span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> token <span class="token keyword">of</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 操作数</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 运算符</span>
            <span class="token keyword">let</span> operand2 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> operand1 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> result<span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token string">&#39;+&#39;</span><span class="token operator">:</span>
                    result <span class="token operator">=</span> operand1 <span class="token operator">+</span> operand2<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&#39;-&#39;</span><span class="token operator">:</span>
                    result <span class="token operator">=</span> operand1 <span class="token operator">-</span> operand2<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&#39;*&#39;</span><span class="token operator">:</span>
                    result <span class="token operator">=</span> operand1 <span class="token operator">*</span> operand2<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">&#39;/&#39;</span><span class="token operator">:</span>
                    result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span>operand1 <span class="token operator">/</span> operand2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","preamble.html.vue"]]);export{r as default};
