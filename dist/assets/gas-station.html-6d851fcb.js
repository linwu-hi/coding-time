import{_ as n,o as s,c as a,e}from"./app-0301958d.js";const t={},o=e(`<h1 id="加油站" tabindex="-1"><a class="header-anchor" href="#加油站" aria-hidden="true">#</a> 加油站</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定一个环形路线上的加油站数组 <code>gas</code> 和消耗汽油的数组 <code>cost</code>，其中 <code>gas[i]</code> 表示第 <code>i</code> 个加油站的汽油量，<code>cost[i]</code> 表示从第 <code>i</code> 个加油站前往下一个加油站所需的汽油量。</p><p>你的任务是找到一个出发加油站的索引，使得从该加油站出发能够环绕一圈并返回起始加油站，并且在整个过程中汽油剩余量不会为负数。如果不存在这样的加油站，返回 -1。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了解决加油站问题，我们可以使用贪心算法来解决。</p><ol><li>初始化两个变量 <code>totalGas</code> 和 <code>currentGas</code>，分别表示加油站总的汽油量和当前汽油剩余量，初始值都为 0。</li><li>初始化一个变量 <code>start</code>，表示出发加油站的索引，初始值为 0。</li><li>遍历加油站数组 <code>gas</code> 和消耗数组 <code>cost</code>，计算累计汽油剩余量和总的汽油量： <ul><li>将当前加油站的汽油量加到 <code>totalGas</code> 上。</li><li>将从当前加油站前往下一个加油站所需的汽油量加到 <code>currentGas</code> 上。</li><li>如果 <code>currentGas</code> 小于 0，表示从当前加油站出发无法到达下一个加油站，因此将出发加油站设为下一个加油站，并将 <code>currentGas</code> 重置为 0。</li></ul></li><li>遍历结束后，判断 <code>totalGas</code> 是否大于等于 <code>currentGas</code>，如果是，则返回出发加油站的索引；否则，返回 -1。</li></ol><p>下面是使用贪心算法解决加油站问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span><span class="token parameter">gas<span class="token punctuation">,</span> cost</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> totalGas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> currentGas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gas<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    totalGas <span class="token operator">+=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    currentGas <span class="token operator">+=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentGas <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      currentGas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> totalGas <span class="token operator">&gt;=</span> currentGas <span class="token operator">?</span> start <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),c=[o];function p(l,i){return s(),a("div",null,c)}const u=n(t,[["render",p],["__file","gas-station.html.vue"]]);export{u as default};
