import{_ as p,r as e,o,c,a as n,b as a,d as t,e as i}from"./app-0301958d.js";const l="/assets/radix-sort-7d9454af.png",u={},r=i('<h1 id="基数排序" tabindex="-1"><a class="header-anchor" href="#基数排序" aria-hidden="true">#</a> 基数排序</h1><p>在计算机科学中，<strong>基数排序</strong>（Radix Sort）是一种非比较的整数排序算法，它通过将具有相同有效位置和值的数字按位进行分组来排序具有整数键的数据。这需要使用位数制表示法，但由于整数可以表示字符串（例如，名称或日期）和特定格式的浮点数，因此基数排序不仅限于整数。</p><p><em>名称的由来</em></p><p>在数学的数字系统中，基数或底数是用于表示位置制数字系统中的数字的唯一数字的数量，包括数字零。例如，二进制系统（使用数字0和1）的基数为2，十进制系统（使用数字0到9）的基数为10。</p><h2 id="效率" tabindex="-1"><a class="header-anchor" href="#效率" aria-hidden="true">#</a> 效率</h2><p>基数排序与其他排序算法相比的效率问题有些棘手，并且容易引起很多误解。基数排序是否与最佳的基于比较的排序算法同样高效、低效还是更高效，取决于所做的具体假设。对于具有单词大小 <code>w</code> 的整数键的 <code>n</code> 个键，基数排序的复杂度为 <code>O(wn)</code>。有时将 <code>w</code> 视为常数，这将使基数排序（对于足够大的 <code>n</code>）优于最佳的基于比较的排序算法，因为所有这些排序算法对 <code>n</code> 个键进行排序时执行的比较次数为 <code>O(n log n)</code>。然而，一般来说，<code>w</code> 不能被视为常数：如果所有的 <code>n</code> 个键都是不同的，那么为了能够在内存中存储它们，<code>w</code> 必须至少为 <code>log n</code>，这最多可以给出时间复杂度为 <code>O(n log n)</code>。这似乎使基数排序最多与最佳的基于比较的排序算法同样高效（如果键比 <code>log n</code> 长很多，则效率会更低）。</p><figure><img src="'+l+`" alt="基数排序" tabindex="0" loading="lazy"><figcaption>基数排序</figcaption></figure><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理：</h2><blockquote><p>基数排序是一种多次分配和收集的排序算法。它按照位数进行排序，从最低有效位（个位）到最高有效位（最高位）。具体排序流程如下：</p></blockquote><ul><li>步骤1：将待排序的整数序列按照个位数进行排序，形成个位数上的桶；</li><li>步骤2：按照十位数将桶中的元素收集起来，形成十位数上的桶；</li><li>步骤3：重复上述步骤，直到最高有效位。</li></ul><p>重复这个过程后，整个序列将按照位数从低到高逐渐有序。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取数组中的最大值</span>
  <span class="token keyword">const</span> maxDigitCount <span class="token operator">=</span> <span class="token function">digitCount</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取最大值的位数</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxDigitCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> digitBuckets <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> digit <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      digitBuckets<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>digitBuckets<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取数字的位数</span>
<span class="token keyword">function</span> <span class="token function">digitCount</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取数字指定位数上的值</span>
<span class="token keyword">function</span> <span class="token function">getDigit</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> place</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> place <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化手段" tabindex="-1"><a class="header-anchor" href="#优化手段" aria-hidden="true">#</a> 优化手段：</h2><p>基数排序的性能可以通过以下优化手段进行改进：</p><h3 id="负数的处理" tabindex="-1"><a class="header-anchor" href="#负数的处理" aria-hidden="true">#</a> 负数的处理：</h3><p>基数排序默认适用于非负整数序列。若序列中包含负数，可以将负数和非负数分开进行排序，再进行合并。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token comment">// 场景1：对非负整数数组进行排序</span>
<span class="token keyword">function</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 基础代码实现省略</span>
<span class="token punctuation">}</span>

<span class="token comment">// 场景2：对包含负数的整数数组进行排序</span>
<span class="token keyword">function</span> <span class="token function">radixSortWithNegative</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> negatives <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> positives <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> sortedNegatives <span class="token operator">=</span> <span class="token function">radixSort</span><span class="token punctuation">(</span>negatives<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">-</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sortedPositives <span class="token operator">=</span> <span class="token function">radixSort</span><span class="token punctuation">(</span>positives<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> sortedNegatives<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>sortedPositives<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 示例用法</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">802</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sortedArray <span class="token operator">=</span> <span class="token function">radixSortWithNegative</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortedArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [-802, -90, 2, 24, 45, 66, 75, 170]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基数排序是一种非比较性排序算法，通过按照位数进行多次分配和收集，实现整数序列的排序。我们可以使用基础的基数排序代码实现排序流程，并根据实际需求选择不同的优化手段来提高性能。通过桶的优化、桶内排序优化和处理负数的方法，我们可以进一步优化基数排序算法。在 JavaScript 中，我们可以使用上述代码实现基数排序，并根据实际场景选择适当的优化策略来满足排序需求。</p><h2 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度" aria-hidden="true">#</a> 复杂度</h2><table><thead><tr><th>名称</th><th style="text-align:center;">最佳情况</th><th style="text-align:center;">平均情况</th><th style="text-align:center;">最坏情况</th><th style="text-align:center;">内存</th><th style="text-align:center;">稳定性</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td><strong>基数排序</strong></td><td style="text-align:center;">n * k</td><td style="text-align:center;">n * k</td><td style="text-align:center;">n * k</td><td style="text-align:center;">n + k</td><td style="text-align:center;">是</td><td style="text-align:left;">k - 最长键的长度</td></tr></tbody></table><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,21),k={href:"https://en.wikipedia.org/wiki/Radix_sort",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.youtube.com/watch?v=XiuSW_mEn7g&index=62&t=0s&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.researchgate.net/figure/Simplistic-illustration-of-the-steps-performed-in-a-radix-sort-In-this-example-the_fig1_291086231",target:"_blank",rel:"noopener noreferrer"};function v(b,h){const s=e("ExternalLinkIcon");return o(),c("div",null,[r,n("ul",null,[n("li",null,[n("a",k,[a("维基百科"),t(s)])]),n("li",null,[n("a",d,[a("YouTube"),t(s)])]),n("li",null,[n("a",m,[a("ResearchGate"),t(s)])])])])}const f=p(u,[["render",v],["__file","index.html.vue"]]);export{f as default};
