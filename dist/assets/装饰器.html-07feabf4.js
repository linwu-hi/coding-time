import{_ as e,r as p,o,c,a as n,b as s,d as t,e as i}from"./app-0301958d.js";const l={},u=i(`<h1 id="javascript修饰器-简化代码-增强功能" tabindex="-1"><a class="header-anchor" href="#javascript修饰器-简化代码-增强功能" aria-hidden="true">#</a> JavaScript修饰器：简化代码，增强功能</h1><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>在JavaScript中，修饰器（Decorator）是一种特殊的语法，用于修改类、方法或属性的行为。修饰器提供了一种简洁而灵活的方式来扩展和定制代码功能。本文将详细介绍JavaScript修饰器的概念、语法和应用场景，并提供相关的代码示例。</p><h2 id="_1-修饰器简介" tabindex="-1"><a class="header-anchor" href="#_1-修饰器简介" aria-hidden="true">#</a> 1. 修饰器简介</h2><p>修饰器是一种用于修改类、方法或属性的语法，它可以在不修改原始代码的情况下增强其功能。修饰器可以实现横切关注点（cross-cutting concerns）的功能，例如日志记录、性能分析、缓存等。通过将这些功能与原始代码分离，我们可以更好地组织和维护代码，并实现更高的可重用性和可扩展性。</p><h2 id="_2-修饰器语法" tabindex="-1"><a class="header-anchor" href="#_2-修饰器语法" aria-hidden="true">#</a> 2. 修饰器语法</h2><p>修饰器使用<code>@</code>符号作为前缀，紧跟着修饰器函数或类。修饰器可以接收不同的参数，根据修饰的目标不同，参数也会有所区别。修饰器可以单独使用，也可以通过组合多个修饰器来实现更复杂的功能。</p><p>下面是一个基本的修饰器语法示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@decorator
<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  @propertyDecorator
  myProperty <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

  @methodDecorator
  <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 代码逻辑</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-类修饰器" tabindex="-1"><a class="header-anchor" href="#_3-类修饰器" aria-hidden="true">#</a> 3. 类修饰器</h2><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><p>类修饰器用于修改类的行为和属性。它可以在类定义之前应用，以修改类的构造函数或原型。</p><p>常见的应用场景包括：</p><ul><li><strong>日志记录</strong>：在类的方法执行前后记录日志信息。</li><li><strong>验证和授权</strong>：对类的方法进行验证和授权操作。</li><li><strong>性能分析</strong>：测量类的方法执行时间，进行性能分析。</li><li><strong>依赖注入</strong>：为类的构造函数注入依赖项。</li></ul><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h3><p>下面是一个使用类修饰器实现日志记录</p><p>的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> originalConstructor <span class="token operator">=</span> target<span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">newConstructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Creating instance of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>originalConstructor<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">originalConstructor</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> newConstructor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

@log
<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个名为<code>log</code>的修饰器函数。该修饰器函数接收一个参数<code>target</code>，表示要修饰的类构造函数。在修饰器函数内部，我们将原始的构造函数保存到<code>originalConstructor</code>中，并创建一个新的构造函数<code>newConstructor</code>，该构造函数在创建实例前打印日志信息。最后，我们将新的构造函数返回作为修饰后的类构造函数。</p><h2 id="_4-方法修饰器" tabindex="-1"><a class="header-anchor" href="#_4-方法修饰器" aria-hidden="true">#</a> 4. 方法修饰器</h2><h3 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1" aria-hidden="true">#</a> 应用场景</h3><p>方法修饰器用于修改类的方法行为。它可以在方法定义之前应用，以修改方法的特性和行为。</p><p>常见的应用场景包括：</p><ul><li><strong>日志记录</strong>：在方法执行前后记录日志信息。</li><li><strong>验证和授权</strong>：对方法进行验证和授权操作。</li><li><strong>性能分析</strong>：测量方法执行时间，进行性能分析。</li><li><strong>缓存</strong>：为方法添加缓存功能，提高性能。</li></ul><h3 id="示例代码-1" tabindex="-1"><a class="header-anchor" href="#示例代码-1" aria-hidden="true">#</a> 示例代码</h3><p>下面是一个使用方法修饰器实现日志记录的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> originalMethod <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">;</span>

  descriptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Executing method </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">originalMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Method </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> executed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  @log
  <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 代码逻辑</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myObj<span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个名为<code>log</code>的修饰器函数。该修饰器函数接收三个参数，分别是<code>target</code>（类的原型或构造函数）、<code>name</code>（方法名）和<code>descriptor</code>（方法的属性描述符）。在修饰器函数内部，我们获取原始方法并将其保存到<code>originalMethod</code>中。然后，我们修改<code>descriptor.value</code>，将其替换为一个新的函数，该函数在执行原始方法前后打印日志信息。最后，我们返回修改后的属性描述符。</p><h2 id="_5-属性修饰器" tabindex="-1"><a class="header-anchor" href="#_5-属性修饰器" aria-hidden="true">#</a> 5. 属性修饰器</h2><h3 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2" aria-hidden="true">#</a> 应用场景</h3><p>属性修饰器用于修改类的属性行为。它可以在属性定义之前应用，以修改属性的特性和行为。</p><p>常见的应用场景包括：</p><ul><li><strong>日志记录</strong>：在属性读取或写入时记录日志信息。</li><li><strong>验证和授权</strong>：对属性进行验证和授权操作。</li><li><strong>计算属性</strong>：根据其他属性的值计算属性的值。</li><li><strong>缓存</strong>：为属性添加</li></ul><p>缓存功能，提高性能。</p><h3 id="示例代码-2" tabindex="-1"><a class="header-anchor" href="#示例代码-2" aria-hidden="true">#</a> 示例代码</h3><p>下面是一个使用属性修饰器实现日志记录的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> value<span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Getting value of property </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">setter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Setting value of property </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">get</span><span class="token operator">:</span> getter<span class="token punctuation">,</span>
    <span class="token literal-property property">set</span><span class="token operator">:</span> setter<span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  @log
  myProperty<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myObj<span class="token punctuation">.</span>myProperty <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> myObj<span class="token punctuation">.</span>myProperty<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个名为<code>log</code>的修饰器函数。该修饰器函数接收两个参数，分别是<code>target</code>（类的原型或构造函数）和<code>name</code>（属性名）。在修饰器函数内部，我们定义了一个名为<code>getter</code>的函数，用于获取属性值，并在获取属性值时打印日志信息。我们还定义了一个名为<code>setter</code>的函数，用于设置属性值，并在设置属性值时打印日志信息。最后，我们使用<code>Object.defineProperty</code>方法将修饰后的属性定义到类的原型上。</p><h2 id="_6-参数修饰器" tabindex="-1"><a class="header-anchor" href="#_6-参数修饰器" aria-hidden="true">#</a> 6. 参数修饰器</h2><h3 id="应用场景-3" tabindex="-1"><a class="header-anchor" href="#应用场景-3" aria-hidden="true">#</a> 应用场景</h3><p>参数修饰器用于修改方法的参数行为。它可以在方法参数声明之前应用，以修改参数的特性和行为。</p><p>常见的应用场景包括：</p><ul><li><strong>验证和授权</strong>：对方法的参数进行验证和授权操作。</li><li><strong>日志记录</strong>：在方法执行前后记录参数信息。</li><li><strong>参数转换</strong>：对方法的参数进行类型转换或格式化操作。</li></ul><h3 id="示例代码-3" tabindex="-1"><a class="header-anchor" href="#示例代码-3" aria-hidden="true">#</a> 示例代码</h3><p>下面是一个使用参数修饰器实现参数验证的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> index<span class="token punctuation">,</span> validator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> originalMethod <span class="token operator">=</span> target<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>

  target<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> args<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">validator</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">originalMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid value for parameter </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> of method </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token parameter">@validate isNumber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 代码逻辑</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myObj<span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个名为<code>validate</code>的修饰器函数。该修饰器函数接收四个参数，分别是<code>target</code>（类的原型或构造函数）、<code>name</code>（方法名）、<code>index</code>（参数索引）和<code>validator</code>（验证函数）。在修饰器函数内部，我们获取原始方法并将其保存到<code>originalMethod</code>中。然后，我们修改<code>target[name]</code>，将其替换为一个新的函数，该函数在执行原始方法之前对指定参数进行验证。如果参数通过验证，就继续执行原始方法；否则，抛出一个错误</p><p>。最后，我们使用<code>@validate</code>修饰器应用参数验证。</p><h2 id="_7-修饰器组合和执行顺序" tabindex="-1"><a class="header-anchor" href="#_7-修饰器组合和执行顺序" aria-hidden="true">#</a> 7. 修饰器组合和执行顺序</h2><p>可以通过组合多个修饰器来实现更复杂的功能。修饰器的执行顺序从上到下，从右到左。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 日志记录逻辑</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> index<span class="token punctuation">,</span> validator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 参数验证逻辑</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  @log
  @<span class="token function">validate</span><span class="token punctuation">(</span>isNumber<span class="token punctuation">)</span>
  <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token parameter">@<span class="token function">validate</span><span class="token punctuation">(</span>isString<span class="token punctuation">)</span> param1<span class="token punctuation">,</span> @<span class="token function">validate</span><span class="token punctuation">(</span>isBoolean<span class="token punctuation">)</span> param2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 代码逻辑</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们通过使用<code>@log</code>修饰器和<code>@validate</code>修饰器组合，为类的方法和参数添加日志记录和验证功能。修饰器的执行顺序是从上到下，从右到左。</p><h2 id="_8-常用修饰器库和工具" tabindex="-1"><a class="header-anchor" href="#_8-常用修饰器库和工具" aria-hidden="true">#</a> 8. 常用修饰器库和工具</h2><p>除了原生的修饰器语法，还有许多优秀的修饰器库和工具可供使用。一些常见的库和工具包括：</p>`,54),r=n("strong",null,"core-decorators",-1),d=n("code",null,"@readonly",-1),k=n("code",null,"@debounce",-1),v=n("code",null,"@throttle",-1),m={href:"https://github.com/jayphelps/core-decorators",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"lodash-decorators",-1),h={href:"https://github.com/steelsojka/lodash-decorators",target:"_blank",rel:"noopener noreferrer"},g=n("strong",null,"mobx",-1),y={href:"https://mobx.js.org/README.html",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"nestjs",-1),_={href:"https://docs.nestjs.com/",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"_9-结论",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-结论","aria-hidden":"true"},"#"),s(" 9. 结论")],-1),x=n("p",null,"JavaScript修饰器是一种强大的语法，它能够简化代码、增强功能，并提高代码的可维护性和可扩展性。通过使用修饰器，我们可以轻松地实现日志记录、验证和授权、性能分析等常见的功能，同时保持代码的整洁和可读性。修饰器在许多库和框架中得到了广泛的应用，为开发者提供了更好的开发体验和工具支持。",-1),j=n("h2",{id:"_10-参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-参考资料","aria-hidden":"true"},"#"),s(" 10. 参考资料")],-1),M={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Decorators",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.sitepoint.com/javascript-decorators-what-they-are/",target:"_blank",rel:"noopener noreferrer"};function S(N,O){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[r,s("：提供了一组常用的修饰器，如"),d,s("、"),k,s("、"),v,s("等。"),n("a",m,[s("GitHub 地址"),t(a)])]),n("li",null,[b,s("：基于Lodash库的修饰器集合，提供了许多实用的修饰器。"),n("a",h,[s("GitHub 地址"),t(a)])]),n("li",null,[g,s("：流行的状态管理库MobX使用修饰器来实现响应式数据和自动触发更新。"),n("a",y,[s("官方文档"),t(a)])]),n("li",null,[f,s("：基于Node.js的框架NestJS使用修饰器来实现依赖注入、路由定义等功能。"),n("a",_,[s("官方文档"),t(a)])])]),w,x,j,n("ul",null,[n("li",null,[n("a",M,[s("MDN Web Docs - Decorators"),t(a)])]),n("li",null,[n("a",C,[s("JavaScript Decorators: What They Are and When to Use Them"),t(a)])])])])}const J=e(l,[["render",S],["__file","装饰器.html.vue"]]);export{J as default};
