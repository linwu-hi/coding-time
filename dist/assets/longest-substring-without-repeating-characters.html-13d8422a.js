import{_ as n,o as s,c as a,d as t}from"./app-2d6feb9f.js";const e={},p=t(`<h1 id="无重复字符的最长子串" tabindex="-1"><a class="header-anchor" href="#无重复字符的最长子串" aria-hidden="true">#</a> 无重复字符的最长子串</h1><p>给定一个字符串<code>s</code>，请你找出其中不含有重复字符的最长子串的长度。</p><h2 id="问题分析" tabindex="-1"><a class="header-anchor" href="#问题分析" aria-hidden="true">#</a> <strong>问题分析：</strong></h2><p>这个问题可以通过滑动窗口算法来解决。我们可以使用两个指针，即<code>left</code>和<code>right</code>，来构建和维护一个窗口，确保窗口内的字符不重复。通过不断地移动指针，我们可以找到最长的不含重复字符的子串。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> <strong>解题步骤：</strong></h2><ol><li><p>初始化两个指针<code>left</code>和<code>right</code>，并初始化最长子串的长度<code>maxLength</code>为0。</p></li><li><p>创建一个哈希集合（或者字符数组）<code>set</code>来存储窗口内的字符。哈希集合可以快速判断字符是否出现过。</p></li><li><p>使用<code>right</code>指针向右移动，扩大窗口。在每次移动时，检查当前字符是否已经在哈希集合中。</p><ul><li>如果当前字符不在集合中，将其添加到集合中，并更新最长子串的长度<code>maxLength</code>为当前窗口的大小（<code>right - left + 1</code>）。</li><li>如果当前字符已经在集合中，表示遇到了重复字符，需要移动<code>left</code>指针，并将<code>left</code>指针对应的字符从集合中删除，以缩小窗口。</li></ul></li><li><p>重复步骤3，直到<code>right</code>指针达到字符串的末尾。</p></li><li><p>返回最长子串的长度<code>maxLength</code>。</p></li></ol><h2 id="javascript解题框架" tabindex="-1"><a class="header-anchor" href="#javascript解题框架" aria-hidden="true">#</a> <strong>JavaScript解题框架：</strong></h2><p>下面是一个使用JavaScript实现滑动窗口算法解决最长无重复字符子串问题的框架代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> maxLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个框架中，我们使用了<code>left</code>和<code>right</code>两个指针来构建窗口，<code>set</code>集合用于存储窗口内的字符。我们不断地向右移动<code>right</code>指针，如果遇到重复字符，则移动<code>left</code>指针来缩小窗口。在每次移动<code>right</code>指针时，都会更新最长子串的长度<code>maxLength</code>。最后，我们返回最长子串的长度作为结果。</p>`,10),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","longest-substring-without-repeating-characters.html.vue"]]);export{d as default};
