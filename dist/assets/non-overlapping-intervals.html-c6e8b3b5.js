import{_ as n,o as s,c as a,e}from"./app-0301958d.js";const t={},p=e(`<h1 id="无重叠区间" tabindex="-1"><a class="header-anchor" href="#无重叠区间" aria-hidden="true">#</a> 无重叠区间</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定一个由多个区间组成的数组 <code>intervals</code>，找到需要移除的区间数量，使得剩余的区间没有重叠。要求返回移除的最少区间数量。</p><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤" aria-hidden="true">#</a> 解题步骤</h2><p>为了解决无重叠区间的问题，我们可以使用贪心算法来解决。贪心算法的思路是优先选择结束位置较小的区间，这样可以给后面的区间留下更多的空间。</p><p>我们按照以下步骤进行解题：</p><ol><li>将区间数组 <code>intervals</code> 按照结束位置的大小进行升序排序。</li><li>初始化变量 <code>end</code> 为第一个区间的结束位置。</li><li>初始化变量 <code>count</code> 为 0，表示需要移除的区间数量。</li><li>从第二个区间开始遍历，对于每个区间 <code>(start, end)</code>： <ul><li>如果当前区间的开始位置大于等于 <code>end</code>，表示当前区间与前一个区间没有重叠，更新 <code>end</code> 为当前区间的结束位置。</li><li>否则，当前区间与前一个区间重叠，需要移除该区间，将 <code>count</code> 增加 1。</li></ul></li><li>返回 <code>count</code>，即需要移除的最少区间数量。</li></ol><p>以下是使用贪心算法解决无重叠区间问题的算法框架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span><span class="token parameter">intervals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  intervals<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> end <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> currEnd<span class="token punctuation">]</span> <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      end <span class="token operator">=</span> currEnd<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","non-overlapping-intervals.html.vue"]]);export{r as default};
