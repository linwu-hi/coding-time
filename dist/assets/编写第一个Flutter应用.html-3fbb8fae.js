import{_ as n,o as a,c as s,d as e}from"./app-2d6feb9f.js";const t={},p=e(`<h1 id="编写第一个flutter应用" tabindex="-1"><a class="header-anchor" href="#编写第一个flutter应用" aria-hidden="true">#</a> 编写第一个Flutter应用</h1><p>在本文中，我们将详细介绍如何编写你的第一个Flutter应用程序：一个简单的Hello World应用。我们将使用Dart语言和Flutter框架来创建一个具有基本用户界面的应用。</p><h2 id="步骤-1-安装-flutter-和-dart" tabindex="-1"><a class="header-anchor" href="#步骤-1-安装-flutter-和-dart" aria-hidden="true">#</a> 步骤 1：安装 Flutter 和 Dart</h2><p>首先，确保你已经安装了Flutter和Dart的开发环境。可以参考之前提供的安装指南。</p><h2 id="步骤-2-创建新的-flutter-项目" tabindex="-1"><a class="header-anchor" href="#步骤-2-创建新的-flutter-项目" aria-hidden="true">#</a> 步骤 2：创建新的 Flutter 项目</h2><p>在命令行或终端中，进入你希望创建项目的目录，并执行以下命令来创建一个新的Flutter项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flutter create hello_world_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将会创建一个名为<code>hello_world_app</code>的新目录，其中包含Flutter项目的初始结构。</p><h2 id="步骤-3-编辑主要的-dart-文件" tabindex="-1"><a class="header-anchor" href="#步骤-3-编辑主要的-dart-文件" aria-hidden="true">#</a> 步骤 3：编辑主要的 Dart 文件</h2><p>打开你喜欢的代码编辑器（如VS Code），导航到<code>hello_world_app/lib</code>目录，并编辑<code>main.dart</code>文件。</p><p>删除初始的代码，并替换为以下内容：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
      title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Hello World App&#39;</span></span><span class="token punctuation">,</span>
      theme<span class="token punctuation">:</span> <span class="token class-name">ThemeData</span><span class="token punctuation">(</span>
        primarySwatch<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      home<span class="token punctuation">:</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>
        appBar<span class="token punctuation">:</span> <span class="token class-name">AppBar</span><span class="token punctuation">(</span>
          title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello World&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        body<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>
          child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">&#39;Hello, World!&#39;</span></span><span class="token punctuation">,</span>
            style<span class="token punctuation">:</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码定义了一个名为<code>MyApp</code>的无状态Widget，并在<code>build</code>方法中返回了一个<code>MaterialApp</code>，其中包含一个<code>Scaffold</code>。<code>Scaffold</code>是一个常用的基本布局，包含一个AppBar和一个居中对齐的Text Widget，显示了&quot;Hello, World!&quot;。</p><h2 id="步骤-4-运行应用程序" tabindex="-1"><a class="header-anchor" href="#步骤-4-运行应用程序" aria-hidden="true">#</a> 步骤 4：运行应用程序</h2><p>回到命令行或终端，确保你仍然在<code>hello_world_app</code>目录下。执行以下命令来运行你的应用程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flutter run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将会在连接的设备或模拟器上启动你的Flutter应用程序。你将看到应用程序的界面显示了&quot;Hello, World!&quot;的文本。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>恭喜你！👏🏻你已经成功地编写了你的第一个Flutter应用程序：一个简单的Hello World应用。你学会了创建一个基本的Flutter应用程序结构，以及如何使用Dart语言构建用户界面。从这个简单的例子开始，你可以继续探索Flutter的更多功能和高级开发技巧，构建出丰富多样的移动应用程序。</p>`,19),l=[p];function c(o,i){return a(),s("div",null,l)}const d=n(t,[["render",c],["__file","编写第一个Flutter应用.html.vue"]]);export{d as default};
