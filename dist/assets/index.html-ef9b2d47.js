import{_ as i,r as a,o as t,c as n,a as e,b as o,e as c,d as r}from"./app-2d6feb9f.js";const s={},l=r('<h1 id="编辑距离" tabindex="-1"><a class="header-anchor" href="#编辑距离" aria-hidden="true">#</a> 编辑距离</h1><p>编辑距离（Levenshtein distance）是一种衡量两个序列之间差异的字符串度量。简单地说，编辑距离是将一个字符串转换为另一个字符串所需的最少单字符编辑（插入、删除或替换）次数。</p><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>数学上，两个字符串 <code>a</code> 和 <code>b</code>（长度分别为 <code>|a|</code> 和 <code>|b|</code>）之间的编辑距离由下式给出： <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/4cf357d8f2135035207088d2c7b890fb4b64e410" alt="Levenshtein" loading="lazy"> 其中， <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f0a48ecfc9852c042382fdc33c19e11a16948e85" alt="Levenshtein" loading="lazy"> 是指示函数，当 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/231fda9ee578f0328c5ca28088d01928bb0aaaec" alt="Levenshtein" loading="lazy"> 时等于 0，否则等于 1， 而 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/bdc0315678caad28648aafedb6ebafb16bd1655c" alt="Levenshtein" loading="lazy"> 是字符串 <code>a</code> 的前 <code>i</code> 个字符和字符串 <code>b</code> 的前 <code>j</code> 个字符之间的距离。</p><p>注意，最小值中的第一个元素对应删除（从 <code>a</code> 到 <code>b</code>），第二个元素对应插入，第三个元素对应匹配或不匹配，具体取决于相应的符号是否相同。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>例如，字符串 <code>kitten</code> 和 <code>sitting</code> 之间的编辑距离为 <code>3</code>，因为以下三个编辑操作将一个字符串变成另一个字符串，而没有办法少于三个编辑操作：</p><ol><li><strong>k</strong>itten → <strong>s</strong>itten（用 &quot;s&quot; 替换 &quot;k&quot;）</li><li>sitt<strong>e</strong>n → sitt<strong>i</strong>n（用 &quot;i&quot; 替换 &quot;e&quot;）</li><li>sittin → sittin<strong>g</strong>（在末尾插入 &quot;g&quot;）。</li></ol><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><p>编辑距离在许多应用中都有广泛的应用，例如拼写检查器、光学字符识别纠错系统、模糊字符串搜索以及基于翻译记忆的自然语言翻译辅助软件。</p><h2 id="动态规划方法解释" tabindex="-1"><a class="header-anchor" href="#动态规划方法解释" aria-hidden="true">#</a> 动态规划方法解释</h2><p>让我们以查找字符串 <code>ME</code> 和 <code>MY</code> 之间的最小编辑距离为例。直观上，您已经知道这里的最小编辑距离是 <code>1</code>，即将 <code>E</code> 替换为 <code>Y</code>。但是，让我们试图将其正式化为算法形式，以便能够处理更复杂的示例，如将 <code>Saturday</code> 转换为 <code>Sunday</code>。</p><p>为了将上述数学公式应用于 <code>ME → MY</code> 转换，我们需要事先知道 <code>ME → M</code>、<code>M → MY</code> 和 <code>M → M</code> 转换的最小编辑距离。然后，我们需要选择其中最小的一个，并在最后一个字母 <code>E → Y</code> 上增加一次操作。因此，<code>ME → MY</code> 转换的最小编辑距离是基于三个先前可能的转换计算得出的。</p><p>为了进一步解释这一点，我们来绘制下面的矩阵：</p><figure><img src="https://cdn-images-1.medium.com/max/1600/1*aTunSUoy0BJyYBVn4tWGrA.png" alt="Levenshtein 矩阵" tabindex="0" loading="lazy"><figcaption>Levenshtein 矩阵</figcaption></figure><ul><li>单元格 <code>(0:1)</code> 包含红色数字 1。这意味着我们需要 1 次操作将 <code>M</code> 转换为空字符串。这就是为什么这个数字是红色的。</li><li>单元格 <code>(0:2)</code> 包含红色数字 2。这意味着我们需要 2 次操作将 <code>ME</code> 转换为空字符串。这是通过删除 <code>E</code> 和 <code>M</code> 完成的。</li><li>单元格 <code>(1:0)</code> 包含绿色数字 1。这意味着我们需要 1 次操作将空字符串转换为 <code>M</code>。这是通过插入 <code>M</code> 完成的。这就是为什么这个数字是绿色的。</li><li>单元格 <code>(2:0)</code> 包含绿色数字 2。这意味着我们需要 2 次操作将空字符串转换为 <code>MY</code>。这是通过插入 <code>Y</code> 和 <code>M</code> 完成的。</li><li>单元格 <code>(1:1)</code></li></ul><p>包含数字 0。这意味着将 <code>M</code> 转换为 <code>M</code> 不需要任何操作。</p><ul><li>单元格 <code>(1:2)</code> 包含红色数字 1。这意味着我们需要 1 次操作将 <code>ME</code> 转换为 <code>M</code>。这是通过删除 <code>E</code> 完成的。</li><li>以此类推...</li></ul><p>对于我们这样小的矩阵（只有 <code>3x3</code>），看起来很简单。但是，您可以从中找到可以应用于计算更大矩阵（例如，用于 <code>Saturday → Sunday</code> 转换的 <code>9x7</code> 矩阵）的基本概念。</p><p>根据上述公式，您只需要找到相邻单元格 <code>(i-1:j)</code>、<code>(i-1:j-1)</code> 和 <code>(i:j-1)</code> 中的最小值，然后在行 <code>i</code> 的字母和列 <code>j</code> 的字母不同的情况下加 <code>1</code>。</p><p>您可以清楚地看到问题的递归性质。</p><figure><img src="https://cdn-images-1.medium.com/max/1600/1*w8UB4DSvBnAK6mBXRGQDjw.png" alt="Levenshtein 矩阵" tabindex="0" loading="lazy"><figcaption>Levenshtein 矩阵</figcaption></figure><p>让我们为这个问题绘制一个决策图。</p><figure><img src="https://cdn-images-1.medium.com/max/1600/1*8jD0qvr5B9PwRFM_9z7q9A.png" alt="最小编辑距离决策图" tabindex="0" loading="lazy"><figcaption>最小编辑距离决策图</figcaption></figure><p>您可以在图片中看到一些带有红色标记的重叠子问题。而且没有办法减少操作数并使其少于公式中那三个相邻单元格中的最小值。</p><p>您还可以注意到矩阵中的每个单元格编号都是基于先前单元格计算出来的。因此，这里应用了自底向上的缓存填充技术。</p><p>通过进一步应用这个原理，我们可以解决更复杂的问题，例如 <code>Saturday → Sunday</code> 转换。</p><figure><img src="https://cdn-images-1.medium.com/max/2600/1*497gMaFErzJpCXG7kS_7dw.png" alt="Levenshtein 距离" tabindex="0" loading="lazy"><figcaption>Levenshtein 距离</figcaption></figure><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',29),h={href:"https://en.wikipedia.org/wiki/Levenshtein_distance",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.youtube.com/watch?v=We3YDTzNXEk&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"},g={href:"https://itnext.io/dynamic-programming-vs-divide-and-conquer-2fea680becbe",target:"_blank",rel:"noopener noreferrer"};function u(m,f){const d=a("ExternalLinkIcon");return t(),n("div",null,[l,e("ul",null,[e("li",null,[e("a",h,[o("维基百科"),c(d)])]),e("li",null,[e("a",p,[o("YouTube"),c(d)])]),e("li",null,[e("a",g,[o("ITNext"),c(d)])])])])}const b=i(s,[["render",u],["__file","index.html.vue"]]);export{b as default};
