import{_ as e,r as o,o as p,c as i,a as n,b as a,e as t,d as c}from"./app-4ff2b8c3.js";const r={},u=c(`<h1 id="mutationobserver-监测dom变化的强大工具" tabindex="-1"><a class="header-anchor" href="#mutationobserver-监测dom变化的强大工具" aria-hidden="true">#</a> MutationObserver：监测DOM变化的强大工具</h1><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>在Web开发中，操作和监测DOM元素的变化是一项常见的任务。MutationObserver是JavaScript提供的一个强大的API，用于异步监测DOM树的变化，并在发生变化时执行相应的操作。本文将详细介绍MutationObserver的属性、应用场景以及使用示例，帮助读者充分理解和应用这一强大的工具。</p><h2 id="_1-mutationobserver简介" tabindex="-1"><a class="header-anchor" href="#_1-mutationobserver简介" aria-hidden="true">#</a> 1. MutationObserver简介</h2><p>MutationObserver是一个JavaScript的API，用于监测DOM树的变化。它提供了一种异步的方式来监听DOM元素的增加、删除、属性变化等操作，以及文本节点的修改。通过MutationObserver，开发者可以实时地捕捉到DOM的变化，并做出相应的响应。</p><p>MutationObserver是在2012年引入的，目前被广泛支持的浏览器（包括Chrome、Firefox、Safari、Edge等）都提供了对MutationObserver的支持。</p><h2 id="_2-mutationobserver的属性" tabindex="-1"><a class="header-anchor" href="#_2-mutationobserver的属性" aria-hidden="true">#</a> 2. MutationObserver的属性</h2><p>MutationObserver提供了一些属性，用于配置和控制观察器的行为。下面是一些常用的属性：</p><ul><li><strong>attributes</strong>：是否监测元素的属性变化。</li><li><strong>attributeOldValue</strong>：是否在属性变化时记录旧值。</li><li><strong>attributeFilter</strong>：指定要监测的属性列表。</li><li><strong>childList</strong>：是否监测子元素的添加或移除。</li><li><strong>subtree</strong>：是否监测后代元素的变化。</li><li><strong>characterData</strong>：是否监测文本节点的内容变化。</li><li><strong>characterDataOldValue</strong>：是否在文本节点内容变化时记录旧值。</li></ul><p>通过这些属性，可以灵活地配置MutationObserver的观察行为，以满足不同的需求。</p><h2 id="_3-mutationobserver的应用场景" tabindex="-1"><a class="header-anchor" href="#_3-mutationobserver的应用场景" aria-hidden="true">#</a> 3. MutationObserver的应用场景</h2><p>MutationObserver在许多场景下都能发挥重要作用。下面是一些常见的应用场景：</p><h3 id="_3-1-动态内容加载" tabindex="-1"><a class="header-anchor" href="#_3-1-动态内容加载" aria-hidden="true">#</a> 3.1 动态内容加载</h3><p>当页面中的内容是通过异步加载或动态生成时，可以使用MutationObserver来监测内容的变化，并在变化发生后进行相应的处理，如更新页面布局、添加事件监听器等。例如，在无限滚动加载的场景中，当新的内容被加载到页面时，可以使用MutationObserver来自动监听内容的变化，并在变化发生后动态添加相应的元素或事件。</p><h3 id="_3-2-表单验证" tabindex="-1"><a class="header-anchor" href="#_3-2-表单验证" aria-hidden="true">#</a> 3.2 表单验证</h3><p>当需要实时验证用户输入时，可以使用MutationObserver来监测表单元素的变化，以及对应的属性变化，如值的变化、禁用状态的变化等。这样可以及时地对用户的输入进行验证和反馈。例如，在一个表单中，当用户输入时，可以使用MutationObserver来监测输入框的值变化，并在值变化后进行实时的表单验证。</p><h3 id="_3-响应式布局" tabindex="-1"><a class="header-anchor" href="#_3-响应式布局" aria-hidden="true">#</a> 3. 响应式布局</h3><p>当页面布局需要根据DOM变化自适应调整时，可以使用MutationObserver来监测相关元素的变化，并根据变化动态地调整页面布局。例如，在响应式网页设计中，当窗口大小发生变化或元素被添加或移除时，可以使用MutationObserver来监听相关元素的变化，并根据变化重新计算和调整页面布局，以适应不同的设备和屏幕尺寸。</p><h3 id="_3-4-自定义组件开发" tabindex="-1"><a class="header-anchor" href="#_3-4-自定义组件开发" aria-hidden="true">#</a> 3.4 自定义组件开发</h3><p>在自定义组件的开发中，MutationObserver可以用于监听组件内部的DOM变化，以及对应的属性变化。这样可以在组件内部做出相应的处理，如更新组件的状态、重新渲染组件等。例如，当一个自定义组件中的某个子元素被添加或移除时，可以使用MutationObserver来监听这些变化，并在变化发生后更新组件的状态或重新渲染组件。</p><h2 id="_4-使用mutationobserver的示例" tabindex="-1"><a class="header-anchor" href="#_4-使用mutationobserver的示例" aria-hidden="true">#</a> 4. 使用MutationObserver的示例</h2><p>下面通过几个示例来演示如何使用MutationObserver进行DOM变化的监测。</p><h3 id="_4-1-监测元素属性变化" tabindex="-1"><a class="header-anchor" href="#_4-1-监测元素属性变化" aria-hidden="true">#</a> 4.1 监测元素属性变化</h3><p>下面的示例代码演示了如何使用MutationObserver监测元素的属性变化，并在变化发生后进行相应的处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 目标元素</span>
<span class="token keyword">const</span> targetElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个MutationObserver实例</span>
<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutations</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  mutations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;attributes&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">属性 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>mutation<span class="token punctuation">.</span>attributeName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 发生变化</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 执行相应的处理逻辑</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置观察器</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 启动观察器</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>targetElement<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们首先选择了一个目标元素，然后创建了一个MutationObserver实例。接下来，我们配置了观察器，指定我们要监测的变化类型为属性变化。最后，我们通过调用<code>observe</code>方法，将观察器绑定到目标元素上。</p><p>当目标元素的属性发生变化时，MutationObserver的回调函数将被调用，并传递一个<code>mutations</code>参数，该参数包含了所有发生的变化。在回调函数中，我们可以根据变化的类型（<code>mutation.type</code>）来判断具体的变化类型，并执行相应的处理逻辑。</p><h3 id="_4-2-监测子元素的添加或移除" tabindex="-1"><a class="header-anchor" href="#_4-2-监测子元素的添加或移除" aria-hidden="true">#</a> 4.2 监测子元素的添加或移除</h3><p>下面的示例代码演示了如何使用MutationObserver监测子元素的添加或移除，并在变化发生后进行相应的处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 目标元素</span>
<span class="token keyword">const</span> targetElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个MutationObserver实例</span>
<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutations</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  mutations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;childList&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     

 mutation<span class="token punctuation">.</span>addedNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">addedNode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">添加了子元素：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>addedNode<span class="token punctuation">.</span>nodeName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行相应的处理逻辑</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      mutation<span class="token punctuation">.</span>removedNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">removedNode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">移除了子元素：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>removedNode<span class="token punctuation">.</span>nodeName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行相应的处理逻辑</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置观察器</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">childList</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 启动观察器</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>targetElement<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们创建了一个MutationObserver实例，并将观察器配置为监测子元素的添加或移除。当目标元素的子元素发生添加或移除操作时，MutationObserver的回调函数将被调用，并传递一个<code>mutations</code>参数，该参数包含了所有发生的变化。在回调函数中，我们可以根据变化的类型（<code>mutation.type</code>）为<code>childList</code>来判断子元素的添加或移除操作，并执行相应的处理逻辑。</p><h3 id="_4-3-监测文本节点的内容变化" tabindex="-1"><a class="header-anchor" href="#_4-3-监测文本节点的内容变化" aria-hidden="true">#</a> 4.3 监测文本节点的内容变化</h3><p>下面的示例代码演示了如何使用MutationObserver监测文本节点的内容变化，并在变化发生后进行相应的处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 目标元素</span>
<span class="token keyword">const</span> targetElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个MutationObserver实例</span>
<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutations</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  mutations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;characterData&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">文本节点内容发生变化：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>mutation<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 执行相应的处理逻辑</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置观察器</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">characterData</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 启动观察器</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>targetElement<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们创建了一个MutationObserver实例，并将观察器配置为监测文本节点的内容变化。当目标元素的文本节点的内容发生变化时，MutationObserver的回调函数将被调用，并传递一个<code>mutations</code>参数，该参数包含了所有发生的变化。在回调函数中，我们可以根据变化的类型（<code>mutation.type</code>）为<code>characterData</code>来判断文本节点的内容变化，并执行相应的处理逻辑。</p><h2 id="_5-mutationobserver的浏览器兼容性" tabindex="-1"><a class="header-anchor" href="#_5-mutationobserver的浏览器兼容性" aria-hidden="true">#</a> 5. MutationObserver的浏览器兼容性</h2><p>MutationObserver已经在大多数现代浏览器中得到支持，包括Chrome、Firefox、Safari、Edge等。然而，考虑到一些老旧的浏览器版本，建议在使用MutationObserver之前，检查浏览器的兼容性。</p><p>可以通过以下链接查看MutationObserver的浏览器兼容性信息：</p>`,38),l={href:"https://caniuse.com/?search=MutationObserver",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"_6-总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-总结","aria-hidden":"true"},"#"),a(" 6. 总结")],-1),k=n("p",null,"MutationObserver是一个强大的工具，用于监测DOM树的变化。通过MutationObserver，我们可以异步地监听DOM元素的增加、删除、属性变化等操作，并在发生变化时执行相应的操作。它在动态内容加载、表单验证、响应式布局、自定义组件开发等场景下发挥重要作用。本文介绍了MutationObserver的属性、应用场景以及使用示例，",-1),v=n("h2",{id:"_7-参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-参考资料","aria-hidden":"true"},"#"),a(" 7. 参考资料")],-1),m={href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver",target:"_blank",rel:"noopener noreferrer"},b={href:"https://dom.spec.whatwg.org/#interface-mutationobserver",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/Using_MutationObserver",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.html5rocks.com/en/tutorials/",target:"_blank",rel:"noopener noreferrer"};function _(O,M){const s=o("ExternalLinkIcon");return p(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",l,[a("Can I use MutationObserver?"),t(s)])])]),d,k,v,n("ul",null,[n("li",null,[n("a",m,[a("MDN Web Docs - MutationObserver"),t(s)])]),n("li",null,[n("a",b,[a("DOM Living Standard - MutationObserver"),t(s)])]),n("li",null,[n("a",h,[a("Using Mutation Observers"),t(s)])]),n("li",null,[n("a",g,[a("DOM Mutation Observers"),t(s)])])])])}const y=e(r,[["render",_],["__file","监测DOM变化的强大工具.html.vue"]]);export{y as default};
