import{_ as p,r as e,o,c as i,a as n,b as s,e as t,d as c}from"./app-4ff2b8c3.js";const l={},u=c('<h1 id="performance-api-提升网页性能的利器" tabindex="-1"><a class="header-anchor" href="#performance-api-提升网页性能的利器" aria-hidden="true">#</a> Performance API: 提升网页性能的利器</h1><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>在现代 Web 开发中，性能优化是一个关键的方面。用户期望快速加载的网页，而慢速的加载和响应时间可能导致用户流失和不良的用户体验。为了满足用户的需求，我们需要准确地测量和分析网页的性能，并采取相应的优化措施。</p><p>Performance API 是浏览器提供的一组接口，可以让开发者测量和监控网页的性能表现。它提供了丰富的属性和方法，可以帮助我们了解网页加载的时间、资源的使用情况、代码执行的性能等关键指标。本文将详细介绍 Performance API 的属性和 API，探讨其应用场景，并提供相关的代码示例和引用资料链接。</p><h2 id="_1-performance-api-简介" tabindex="-1"><a class="header-anchor" href="#_1-performance-api-简介" aria-hidden="true">#</a> 1. Performance API 简介</h2><p>Performance API 是 Web API 的一部分，旨在提供与浏览器性能相关的信息和指标。它通过提供一组属性和方法，使开发者能够测量和分析网页的性能，以便进行性能优化。</p><p>Performance API 的核心对象是 <code>performance</code>，它代表了网页的性能信息。通过 <code>performance</code> 对象，我们可以访问各种性能指标、测量和记录时间戳、计算代码执行时间等。</p><p>以下是一些常用的 Performance API 属性：</p><ul><li><code>navigation</code>：提供了与导航相关的性能指标，如页面加载时间、重定向次数、响应时间等。</li><li><code>timing</code>：提供了与页面加载和资源加载相关的性能指标，如 DNS 查询时间、TCP 连接时间、DOM 解析时间等。</li><li><code>memory</code>：提供了与内存使用情况相关的性能指标，如内存限制、已使用内存、垃圾回收次数等。</li><li><code>navigationTiming</code>：提供了更详细的页面加载时间指标，如重定向时间、解析 DOM 树时间、首次渲染时间等。</li></ul><p>Performance API 还提供了一些方法，用于测量和记录时间戳、添加标记、计算代码执行时间等。</p><h2 id="_2-performance-api-属性和-api" tabindex="-1"><a class="header-anchor" href="#_2-performance-api-属性和-api" aria-hidden="true">#</a> 2. Performance API 属性和 API</h2><h3 id="_2-1-navigation" tabindex="-1"><a class="header-anchor" href="#_2-1-navigation" aria-hidden="true">#</a> 2.1 navigation</h3><p><code>performance.navigation</code> 属性提供了与导航相关的性能指标，可以帮助我们了解页面的加载时间、重定向次数、响应时间等。</p><p>以下是一些常用的 navigation 属性：</p><ul><li><code>performance.navigation.type</code>：表示导航类型，如新页面加载、页面刷新、页面后退等。</li><li><code>performance.navigation.redirectCount</code>：表示页面重定向的次数。</li></ul><p>这些 navigation 属性可以用于分析页面的导航行为和性能表现。</p><p><strong>示例代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">导航类型: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">重定向次数: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>redirectCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-timing" tabindex="-1"><a class="header-anchor" href="#_2-2-timing" aria-hidden="true">#</a> 2.2 timing</h3><p><code>performance.timing</code> 属性提供了与页面加载和资源加载相关的性能指标，可以帮助我们了解页面加载的各个阶段所花费的时间。</p><p>以下是一些常用的 timing 属性：</p><ul><li><code>performance.timing.navigationStart</code>：表示页面开始导航的时间。</li><li><code>performance.timing.fetchStart</code>：表示开始获取页面资源的时间。</li><li><code>performance.timing.domContentLoadedEventStart</code>：表示 DOMContentLoaded 事件开始的时间。</li><li><code>performance.timing.loadEventStart</code>：表示 load 事件开始的时间。</li></ul><p>这些 timing 属性可以用于分析页面的加载性能，找出加载过程中的瓶颈。</p><p><strong>示例代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">导航开始时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>navigationStart<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">资源获取开始时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>fetchStart<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DOMContentLoaded 事件开始时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>domContentLoadedEventStart<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">load 事件开始时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>loadEventStart<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-memory" tabindex="-1"><a class="header-anchor" href="#_2-3-memory" aria-hidden="true">#</a> 2.3 memory</h3><p><code>performance.memory</code> 属性提供了与内存使用情况相关的性能指标，可以帮助我们了解页面的内存限制、已使用内存、垃圾回收次数等信息。</p><p>以下是一些常用的 memory 属性：</p><ul><li><code>performance.memory.jsHeapSizeLimit</code>：表示 JavaScript 堆的大小限制。</li><li><code>performance.memory.usedJSHeapSize</code>：表示已使用的 JavaScript 堆大小。</li><li><code>performance.memory.totalJSHeapSize</code>：表示 JavaScript 堆的总大小。</li></ul><p>这些 memory 属性可以用于监控页面的内存使用情况，及时发现内存泄漏或过度使用内存的问题。</p><p><strong>示例代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">JavaScript 堆大小限制: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>jsHeapSizeLimit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">已使用的 JavaScript 堆大小: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>usedJSHeapSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">JavaScript 堆的总大小: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>totalJSHeapSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-navigationtiming" tabindex="-1"><a class="header-anchor" href="#_2-4-navigationtiming" aria-hidden="true">#</a> 2.4 navigationTiming</h3><p><code>performance.getEntriesByType(&#39;navigation&#39;)</code> 方法返回与页面加载时间相关的详细信息，提供了更详细的页面加载时间指标，如重定向时间、解析 DOM 树时间、首次渲染时间等。</p><p>以下是一些常用的 navigationTiming 属性：</p><ul><li><code>navigationTiming.redirectTime</code>：表示重定向时间。</li><li><code>navigationTiming.domInteractiveTime</code>：表示 DOM 解析完成的时间。</li><li><code>navigationTiming.domContentLoadedTime</code>：表示 DOMContentLoaded 事件触发的时间。</li><li><code>navigationTiming.loadEventTime</code>：表示 load 事件触发的时间。</li></ul><p>这些 navigationTiming 属性可以用于更细粒度地分析页面加载的各个阶段所花费的时间。</p><p><strong>示例代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> entries <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&#39;navigation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> navigationTiming <span class="token operator">=</span> entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">重定向时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>navigationTiming<span class="token punctuation">.</span>redirectTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DOM 解析完成时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>navigationTiming<span class="token punctuation">.</span>domInteractiveTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DOMContentLoaded 事件触发时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>navigationTiming<span class="token punctuation">.</span>domContentLoadedTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">load 事件触发时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>navigationTiming<span class="token punctuation">.</span>loadEventTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-其他方法" tabindex="-1"><a class="header-anchor" href="#_2-5-其他方法" aria-hidden="true">#</a> 2.5 其他方法</h3><p>Performance API</p><p>还提供了一些其他方法，用于测量和记录时间戳、添加标记、计算代码执行时间等。</p><p>以下是一些常用的方法：</p><ul><li><code>performance.now()</code>：返回当前时间戳，可用于测量代码执行时间。</li><li><code>performance.mark()</code>：添加一个时间戳标记，用于记录关键时刻。</li><li><code>performance.measure()</code>：计算两个时间戳标记之间的时间间隔。</li><li><code>performance.getEntriesByName()</code>：获取指定名称的时间戳标记信息。</li></ul><p>这些方法可以帮助我们精确测量代码的执行时间和关键事件的发生时间。</p><p><strong>示例代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> startTime <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 执行一些耗时的操作</span>\n\n<span class="token keyword">const</span> endTime <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> executionTime <span class="token operator">=</span> endTime <span class="token operator">-</span> startTime<span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">代码执行时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>executionTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 毫秒</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nperformance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 执行一些操作</span>\nperformance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nperformance<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token string">&#39;操作耗时&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> measurements <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">getEntriesByName</span><span class="token punctuation">(</span><span class="token string">&#39;操作耗时&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">操作耗时: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>measurements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>duration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 毫秒</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-performance-api-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-performance-api-应用场景" aria-hidden="true">#</a> 3. Performance API 应用场景</h2><p>Performance API 在 Web 开发中有许多应用场景，下面是一些常见的应用场景：</p><h3 id="_3-1-性能优化" tabindex="-1"><a class="header-anchor" href="#_3-1-性能优化" aria-hidden="true">#</a> 3.1 性能优化</h3><p>通过使用 Performance API，我们可以测量和分析网页的性能指标，如加载时间、资源使用情况、代码执行时间等。这些指标可以帮助我们了解网页的性能瓶颈，并采取相应的优化措施。例如，通过分析页面加载时间的各个阶段所花费的时间，我们可以找出加载过程中的瓶颈，并进行相应的性能优化。</p><p><strong>示例代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> startTime <span class="token operator">=</span> performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>navigationStart<span class="token punctuation">;</span>\n<span class="token keyword">const</span> loadTime <span class="token operator">=</span> performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>loadEventStart <span class="token operator">-</span> startTime<span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">页面加载时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>loadTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 毫秒</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-监控页面资源" tabindex="-1"><a class="header-anchor" href="#_3-2-监控页面资源" aria-hidden="true">#</a> 3.2 监控页面资源</h3><p>Performance API 可以帮助我们监控页面的资源使用情况，包括网络请求、DOM 元素和脚本执行等。通过分析资源加载时间、资源大小等指标，我们可以找出资源使用不当或过度使用资源的问题，从而进行优化。</p><p><strong>示例代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> resourceEntries <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&#39;resource&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nresourceEntries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">资源 URL: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">资源加载时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>duration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 毫秒</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">资源大小: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entry<span class="token punctuation">.</span>transferSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 字节</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-监控内存使用情况" tabindex="-1"><a class="header-anchor" href="#_3-3-监控内存使用情况" aria-hidden="true">#</a> 3.3 监控内存使用情况</h3><p>使用 Performance API 的 memory 属性，我们可以监控页面的内存使用情况。通过了解页面的内存限制、已使用内存、垃圾回收次数等信息，我们可以及时发现内存泄漏或过度使用内存的问题，并进行优化。</p><p><strong>示例代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">JavaScript 堆大小限制:\n\n </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>jsHeapSizeLimit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">已使用的 JavaScript 堆大小: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>usedJSHeapSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">JavaScript 堆的总大小: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>performance<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>totalJSHeapSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-分析代码执行时间" tabindex="-1"><a class="header-anchor" href="#_3-4-分析代码执行时间" aria-hidden="true">#</a> 3.4 分析代码执行时间</h3><p>通过使用 Performance API 的 now() 方法，我们可以测量代码的执行时间。这对于优化关键代码块的性能非常有帮助，可以找出代码执行中的瓶颈，从而进行优化。</p><p><strong>示例代码：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> startTime <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 执行一些耗时的操作</span>\n\n<span class="token keyword">const</span> endTime <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> executionTime <span class="token operator">=</span> endTime <span class="token operator">-</span> startTime<span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">代码执行时间: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>executionTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 毫秒</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>Performance API 是浏览器提供的一个强大工具，可用于测量和优化网页的性能。通过使用 Performance API 提供的属性和方法，我们可以准确地测量网页加载时间、资源使用情况和代码执行时间等关键指标。这些指标可以帮助我们了解网页的性能瓶颈，并采取相应的优化措施。</p><p>在实际应用中，我们可以根据性能优化的需求使用 Performance API，从而提升网页的加载速度、响应时间和用户体验。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',69),r={href:"https://developer.mozilla.org/en-US/docs/Web/API/Performance",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.w3.org/TR/hr-time-2/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developers.google.com/web/fundamentals/performance/measuring-performance",target:"_blank",rel:"noopener noreferrer"};function g(v,f){const a=e("ExternalLinkIcon");return o(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("MDN Web Docs: Performance API"),t(a)])]),n("li",null,[n("a",k,[s("Google Developers: Measuring Performance with the User Timing API"),t(a)])]),n("li",null,[n("a",d,[s("W3C: High Resolution Time Level 2"),t(a)])]),n("li",null,[n("a",m,[s("Google Developers: Measuring Performance in a Web Page"),t(a)])])])])}const b=p(l,[["render",g],["__file","提升网页性能的利器.html.vue"]]);export{b as default};
