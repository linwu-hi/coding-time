import{_ as n,o as s,c as a,d as e}from"./app-4ff2b8c3.js";const p={},t=e(`<h1 id="函数上下文和this关键字" tabindex="-1"><a class="header-anchor" href="#函数上下文和this关键字" aria-hidden="true">#</a> 函数上下文和this关键字</h1><p>函数是 JavaScript 中最重要的概念之一，理解函数的定义和调用方式涉及到多个知识点，特别是函数的上下文，即函数中的 <code>this</code> 关键字，是前端面试中必考的知识点。本文将介绍函数上下文、箭头函数以及修正 <code>this</code> 指向的方法。</p><h2 id="_1-函数作为独立函数调用" tabindex="-1"><a class="header-anchor" href="#_1-函数作为独立函数调用" aria-hidden="true">#</a> 1. 函数作为独立函数调用</h2><p>考虑以下脚本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">printThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><ul><li>在严格模式下：<code>false</code></li><li>在非严格模式下：<code>true</code></li></ul><p>解析： 当函数被作为独立函数调用时，<code>this</code>指向不同，严格模式和非严格模式下有区别。在严格模式下，<code>this</code>指向<code>undefined</code>；在非严格模式下，<code>this</code>指向全局对象 <code>window</code>。</p><h2 id="_2-函数作为对象方法调用" tabindex="-1"><a class="header-anchor" href="#_2-函数作为对象方法调用" aria-hidden="true">#</a> 2. 函数作为对象方法调用</h2><p>考虑以下脚本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">printThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> printThis <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">printThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：<code>true</code></p><p>解析： 当函数被作为对象的方法调用时，其中的 <code>this</code> 指向该对象本身。在上述代码中，<code>printThis</code> 函数被作为 <code>obj</code> 对象的一个方法调用，所以 <code>printThis</code> 中的 <code>this</code> 指向 <code>obj</code>，而不是全局对象 <code>window</code>。</p><h2 id="_3-构造函数调用" tabindex="-1"><a class="header-anchor" href="#_3-构造函数调用" aria-hidden="true">#</a> 3. 构造函数调用</h2><p>考虑以下脚本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Puppy&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：<code>Puppy</code></p><p>解析： 在这段代码中，<code>Dog</code> 函数被当作构造函数调用，通过 <code>new</code> 关键字创建实例时，<code>this</code> 关键字会指向新创建的对象。因此，<code>this.name = &#39;Puppy&#39;</code> 将在新创建的对象上设置 <code>name</code> 属性，最后打印出 <code>Puppy</code>。</p><h2 id="_4-构造函数返回对象" tabindex="-1"><a class="header-anchor" href="#_4-构造函数返回对象" aria-hidden="true">#</a> 4. 构造函数返回对象</h2><p>考虑以下脚本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> puppet <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Emperor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>rules <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> puppet<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> emperor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emperor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emperor<span class="token punctuation">.</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：<code>false</code></p><p>解析： 尽管构造函数的 <code>this</code> 关键字指向通过构造函数构建的实例，但如果构造函数中使用 <code>return</code> 语句返回一个对象，则返回的对象将取代通过构造函数创建的实例。在上述代码中，<code>Emperor</code> 构造函数返回了 <code>puppet</code> 对象，因此 <code>emperor</code> 实例实际上就是 <code>puppet</code> 对象，其中的 <code>rules</code> 属性值为 <code>false</code>。</p><h2 id="_5-函数调用时使用-call-或-apply" tabindex="-1"><a class="header-anchor" href="#_5-函数调用时使用-call-或-apply" aria-hidden="true">#</a> 5. 函数调用时使用 <code>call</code> 或 <code>apply</code></h2><p>考虑以下脚本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用call</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用apply</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><ul><li>使用 <code>call</code>：<code>Hello, Alice!</code></li><li>使用 <code>apply</code>：<code>Hello, Alice!</code></li></ul><p>解析： 通过使用函数的 <code>call</code> 或 <code>apply</code> 方法，可以显式地指定函数执行时的上下文，即 <code>this</code> 的值。在上述代码中，<code>greet.call(person)</code> 和 <code>greet.apply(person)</code> 中的 <code>this</code> 都被绑定到了 <code>person</code> 对象，所以打印出的结果都是 <code>Hello, Alice!</code>。</p><h2 id="_6-箭头函数的上下文" tabindex="-1"><a class="header-anchor" href="#_6-箭头函数的上下文" aria-hidden="true">#</a> 6. 箭头函数的上下文</h2><p>箭头函数的 <code>this</code> 绑定与常规函数不同，箭头函数没有自己的 <code>this</code> 值，而是捕获了封闭上下文的 <code>this</code> 值。考虑以下脚本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">greet</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">arrowFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">arrowFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：<code>Hello, Bob!</code></p><p>解析： 在这段代码中，箭头函数 <code>arrowFunc</code> 没有自己的 <code>this</code> 值，而是捕获了封闭上下文 <code>greet</code> 函数中的 <code>this</code> 值，即 <code>obj</code> 对象。所以 <code>this.name</code> 实际上指向 <code>obj.name</code>，打印出 <code>Hello, Bob!</code>。</p><p>这就是 JavaScript 函数上下文和 <code>this</code> 关键字的一些重要概念和用法。</p>`,35),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","JavaScript函数上下文和this关键字.html.vue"]]);export{d as default};
