const t=JSON.parse('{"key":"v-85e885e2","path":"/js/advance/JavaScript%E5%BC%95%E6%93%8E%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html","title":"JavaScript引擎的垃圾回收机制","lang":"zh-CN","frontmatter":{"description":"1. 引言 在编程语言中，内存管理是一项关键的任务，尤其对于构建大规模和性能敏感的应用程序来说尤为重要。然而，对于JavaScript这种动态语言来说，开发者通常不需要（也无法）直接管理内存，这项任务主要由JavaScript引擎来完成。 这种自动管理的机制让开发者可以更专注于业务逻辑的实现，而不用担心内存泄漏或溢出等问题。但同时，作为开发者，了解Ja...","head":[["meta",{"property":"og:url","content":"https://www.coding-time.cn/coding-time/js/advance/JavaScript%E5%BC%95%E6%93%8E%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"编程时光"}],["meta",{"property":"og:title","content":"JavaScript引擎的垃圾回收机制"}],["meta",{"property":"og:description","content":"1. 引言 在编程语言中，内存管理是一项关键的任务，尤其对于构建大规模和性能敏感的应用程序来说尤为重要。然而，对于JavaScript这种动态语言来说，开发者通常不需要（也无法）直接管理内存，这项任务主要由JavaScript引擎来完成。 这种自动管理的机制让开发者可以更专注于业务逻辑的实现，而不用担心内存泄漏或溢出等问题。但同时，作为开发者，了解Ja..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-09T02:59:11.000Z"}],["meta",{"property":"article:author","content":"linwu"}],["meta",{"property":"article:modified_time","content":"2023-07-09T02:59:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript引擎的垃圾回收机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-09T02:59:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"linwu\\",\\"url\\":\\"https://www.coding-time.cn\\",\\"email\\":\\"linwu.hi@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. JavaScript内存生命周期","slug":"_2-javascript内存生命周期","link":"#_2-javascript内存生命周期","children":[]},{"level":2,"title":"3. 垃圾回收","slug":"_3-垃圾回收","link":"#_3-垃圾回收","children":[{"level":3,"title":"3.1. 标记-清除算法","slug":"_3-1-标记-清除算法","link":"#_3-1-标记-清除算法","children":[]},{"level":3,"title":"3.2. 引用计数算法","slug":"_3-2-引用计数算法","link":"#_3-2-引用计数算法","children":[]}]},{"level":2,"title":"4. JavaScript引擎的垃圾回收优化策略","slug":"_4-javascript引擎的垃圾回收优化策略","link":"#_4-javascript引擎的垃圾回收优化策略","children":[{"level":3,"title":"4.1. 分代收集","slug":"_4-1-分代收集","link":"#_4-1-分代收集","children":[]},{"level":3,"title":"4.2. 延迟清除和增量标记","slug":"_4-2-延迟清除和增量标记","link":"#_4-2-延迟清除和增量标记","children":[]},{"level":3,"title":"4.3 JavaScript代码优化和垃圾回收","slug":"_4-3-javascript代码优化和垃圾回收","link":"#_4-3-javascript代码优化和垃圾回收","children":[]}]},{"level":2,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[]}],"git":{"createdTime":1688871551000,"updatedTime":1688871551000,"contributors":[{"name":"linwu-hi","email":"linwu.hi@gmail.com","commits":1}]},"readingTime":{"minutes":7.67,"words":2300},"filePathRelative":"js/advance/JavaScript引擎的垃圾回收机制.md","localizedDate":"2023年7月9日","autoDesc":true}');export{t as data};
