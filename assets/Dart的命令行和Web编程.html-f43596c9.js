import{_ as n,o as a,c as s,d as t}from"./app-4ff2b8c3.js";const e={},p=t(`<h1 id="dart的命令行和web编程" tabindex="-1"><a class="header-anchor" href="#dart的命令行和web编程" aria-hidden="true">#</a> Dart的命令行和Web编程</h1><p>Dart是一个多平台的语言，它支持命令行编程和Web编程。下面是这两种编程方式的一些基础知识。</p><h2 id="dart的命令行编程" tabindex="-1"><a class="header-anchor" href="#dart的命令行编程" aria-hidden="true">#</a> Dart的命令行编程</h2><p>在命令行编程中，我们主要使用<code>dart:io</code>库，这个库提供了一些与文件系统交互、网络编程、进程管理等功能的类和函数。</p><h3 id="读取和写入文件" tabindex="-1"><a class="header-anchor" href="#读取和写入文件" aria-hidden="true">#</a> 读取和写入文件</h3><p>下面是一个例子，演示如何在Dart中读取和写入文件：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;test.txt&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 写入文件</span>
  <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">writeAsString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello, Dart!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 读取文件</span>
  <span class="token keyword">var</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">readAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：Hello, Dart!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="网络编程" tabindex="-1"><a class="header-anchor" href="#网络编程" aria-hidden="true">#</a> 网络编程</h3><p><code>dart:io</code>库还提供了一些类来进行HTTP和WebSocket编程。下面是一个简单的HTTP客户端的例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;https://dart.dev&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> data <span class="token keyword">in</span> response<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Utf8Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dart的web编程" tabindex="-1"><a class="header-anchor" href="#dart的web编程" aria-hidden="true">#</a> Dart的Web编程</h2><p>Dart也可以用于构建高质量的Web应用。在Web编程中，我们通常使用<code>dart:html</code>库，这个库提供了一些与DOM交互、处理事件、创建HTML元素等功能的类和函数。</p><h3 id="操作dom" tabindex="-1"><a class="header-anchor" href="#操作dom" aria-hidden="true">#</a> 操作DOM</h3><p>下面是一个例子，演示如何在Dart中操作DOM：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:html&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取一个元素</span>
  <span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;#title&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 修改元素的内容</span>
  title<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello, Dart!&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// HTML文件：</span>
<span class="token comment">// &lt;h1 id=&quot;title&quot;&gt;Welcome to Dart&lt;/h1&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理事件" tabindex="-1"><a class="header-anchor" href="#处理事件" aria-hidden="true">#</a> 处理事件</h3><p>我们还可以在Dart中处理各种用户事件，例如点击事件：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:html&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> button <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;#button&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  button<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Button clicked!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// HTML文件：</span>
<span class="token comment">// &lt;button id=&quot;button&quot;&gt;Click me&lt;/button&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dart编译成javascript" tabindex="-1"><a class="header-anchor" href="#dart编译成javascript" aria-hidden="true">#</a> Dart编译成JavaScript</h2><p>Dart语言可以被编译成JavaScript，这使得Dart能在所有的现代浏览器中运行，无论是桌面浏览器还是移动设备浏览器。Dart提供了<code>dart2js</code>和<code>dartdevc</code>两种编译工具，分别用于生产环境和开发环境。</p><h3 id="dart2js" tabindex="-1"><a class="header-anchor" href="#dart2js" aria-hidden="true">#</a> dart2js</h3><p><code>dart2js</code>是一个强大的工具，它可以将Dart代码编译成高效的、压缩的、部署就绪的JavaScript代码。通常我们在准备部署我们的Dart web应用到生产环境时使用<code>dart2js</code>。</p><p>下面是一个使用<code>dart2js</code>的例子：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dart2js <span class="token parameter variable">-O2</span> <span class="token parameter variable">-o</span> main.dart.js main.dart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会将<code>main.dart</code>编译成<code>main.dart.js</code>，并且使用了<code>-O2</code>优化选项。</p><h3 id="dartdevc" tabindex="-1"><a class="header-anchor" href="#dartdevc" aria-hidden="true">#</a> dartdevc</h3><p><code>dartdevc</code>（Dart Development Compiler）是另一个Dart到JavaScript的编译器，主要用于开发环境。相比于<code>dart2js</code>，<code>dartdevc</code>生成的JavaScript代码更易于调试，但是不如<code>dart2js</code>生成的代码运行效率高。</p><p>在开发环境中，我们通常使用<code>webdev serve</code>命令来运行我们的Dart web应用，这个命令会自动使用<code>dartdevc</code>来编译我们的代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>webdev serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后你就可以在浏览器中打开你的应用，地址通常是<code>localhost:8080</code>。</p>`,30),c=[p];function o(i,l){return a(),s("div",null,c)}const r=n(e,[["render",o],["__file","Dart的命令行和Web编程.html.vue"]]);export{r as default};
