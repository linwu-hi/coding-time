import{_ as n,o as s,c as a,d as e}from"./app-4ff2b8c3.js";const p={},t=e(`<h1 id="正则表达式的常见问题与练习" tabindex="-1"><a class="header-anchor" href="#正则表达式的常见问题与练习" aria-hidden="true">#</a> 正则表达式的常见问题与练习</h1><p>正则表达式是面试中经常被提及的主题之一，但很多人在面试中对于正则表达式的问题常常感到困惑。在本节中，我将通过一些常见问题和练习题目来帮助你更好地理解和掌握正则表达式的技巧。</p><h2 id="问题一-javascript-中的字符串与正则表达式操作" tabindex="-1"><a class="header-anchor" href="#问题一-javascript-中的字符串与正则表达式操作" aria-hidden="true">#</a> 问题一：JavaScript 中的字符串与正则表达式操作</h2><p>在 JavaScript 中，我们可以使用三个方法来操作字符串和正则表达式：<code>test</code>、<code>exec</code> 和 <code>match</code>。下面是它们的具体用法及括号在这些方法中的作用。</p><ol><li><p><code>RegExp.prototype.test()</code>: <code>test</code> 是 JavaScript 中正则表达式对象的一个方法，用于检测正则表达式对象与传入的字符串是否匹配。如果匹配，则返回 <code>true</code>，否则返回 <code>false</code>。使用方法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>regexObj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Jack</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>test</code> 方法中，括号只起到分组的作用，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">123{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;123123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;123123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>String.prototype.match()</code>: <code>match</code> 是字符串的方法，它接受一个正则表达式作为参数，并返回字符串中与正则表达式匹配的结果。在 <code>match</code> 方法中，括号的作用有两个：</p><ul><li>分组</li><li>捕获。捕获的意思是将用户指定的匹配到的子字符串暂存并返回给用户。</li></ul><p>当传入的正则表达式没有使用 <code>g</code> 标志时，返回一个数组。数组的第一个值为第一个完整匹配，后续的值分别为括号捕获的所有值，并且数组还包含以下三个属性：</p><ul><li><code>groups</code>：命名捕获组</li><li><code>index</code>：匹配结果的开始下标</li><li><code>input</code>：传入的原始字符串</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token string">&#39;123123&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">123{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token string">&#39;123123&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(123){2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;123123&quot;, &quot;123&quot;, index: 0, input: &quot;123123&quot;, groups: undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span>groups<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当传入的正则表达式有 <code>g</code> 标志时，将返回所有与正则表达式匹配的结果，忽略捕获。</p></li><li><p><code>RegExp.prototype.exec()</code>: <code>exec</code> 是正则表达式的方法，它接受一个</p></li></ol><p>字符串作为参数，并返回与正则表达式匹配的结果。返回结果是一个数组，其中包含了匹配到的信息。在 <code>exec</code> 方法中，括号的作用同样是分组和捕获。</p><p>当传入的正则表达式没有使用 <code>g</code> 标志时，每次调用 <code>exec</code> 方法都会返回第一个匹配结果的信息数组，包括匹配的字符串、分组捕获的值以及其他属性。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d+)([a-z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;123a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result<span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123a</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123a</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>

  regex<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> result<span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 设置下次匹配开始的位置</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当传入的正则表达式有 <code>g</code> 标志时，<code>exec</code> 方法将持续查找匹配的结果。</p><h2 id="问题二-在正则表达式中匹配多个空格" tabindex="-1"><a class="header-anchor" href="#问题二-在正则表达式中匹配多个空格" aria-hidden="true">#</a> 问题二：在正则表达式中匹配多个空格</h2><p>有时候，我们希望匹配连续的多个空格，可以使用正则表达式中的特殊字符 <code>\\s</code>。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello    World&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;Hello&quot;, &quot;World&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用 <code>\\s+</code> 匹配连续的多个空格，并通过 <code>split</code> 方法将字符串分割成数组。结果中的多个空格被去除，只留下了单词。</p><h2 id="问题三-在正则表达式中匹配邮箱地址" tabindex="-1"><a class="header-anchor" href="#问题三-在正则表达式中匹配邮箱地址" aria-hidden="true">#</a> 问题三：在正则表达式中匹配邮箱地址</h2><p>匹配邮箱地址是正则表达式中的一个常见需求。下面给出一个简单的匹配规则：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z0-9]+@[A-Za-z0-9]+\\.[A-Za-z]{2,}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个正则表达式的意思是匹配由字母、数字组成的用户名，紧接着是一个 <code>@</code> 符号，然后是由字母、数字组成的域名，最后是一个以两个或更多字母组成的顶级域名。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">&#39;example@example.com&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z0-9]+@[A-Za-z0-9]+\\.[A-Za-z]{2,}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用 <code>test</code> 方法检测邮箱地址是否符合正则表达式的规则。</p><h2 id="问题四-在正则表达式中替换字符串" tabindex="-1"><a class="header-anchor" href="#问题四-在正则表达式中替换字符串" aria-hidden="true">#</a> 问题四：在正则表达式中替换字符串</h2><p>在 JavaScript 中，我们可以使用 <code>String.prototype.replace()</code> 方法来替换字符串中的内容。正则表达式可以用于指定要替换的模式。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">;</span>


<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">World</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Hello, JavaScript!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用 <code>replace</code> 方法将字符串中的 &quot;World&quot; 替换为 &quot;JavaScript&quot;。</p><h2 id="问题五-在正则表达式中使用修饰符" tabindex="-1"><a class="header-anchor" href="#问题五-在正则表达式中使用修饰符" aria-hidden="true">#</a> 问题五：在正则表达式中使用修饰符</h2><p>在正则表达式中，修饰符是在正则表达式主体后面的字符，用于控制匹配模式的行为。</p><p>常见的修饰符有：</p><ul><li><code>i</code>：不区分大小写进行匹配。</li><li><code>g</code>：全局匹配，匹配到一个结果后继续查找下一个匹配项。</li><li><code>m</code>：多行匹配，允许匹配换行符。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello, hello, hElLo!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;Hello&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用修饰符 <code>i</code> 来实现不区分大小写的匹配。正则表达式 <code>/hello/i</code> 匹配到了字符串中的 &quot;Hello&quot;。</p><h2 id="练习题" tabindex="-1"><a class="header-anchor" href="#练习题" aria-hidden="true">#</a> 练习题</h2><p>尝试解决以下正则表达式的练习题目。</p><ol><li><p>匹配手机号码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[3456789]\\d{9}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个正则表达式可以用来匹配中国大陆的手机号码，以 &quot;1&quot; 开头，后面跟随 10 个数字。</p></li><li><p>匹配身份证号码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{17}(\\d|X|x)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个正则表达式可以用来匹配中国大陆的身份证号码，由 17 位数字和一位数字或字母 &quot;X&quot;（不区分大小写）组成。</p></li><li><p>匹配 URL：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>这个正则表达式可以用来匹配以 &quot;http://&quot;、&quot;https://&quot; 或 &quot;ftp://&quot; 开头的 URL。</p>`,38),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","正则表达式的常见问题与练习.html.vue"]]);export{r as default};
